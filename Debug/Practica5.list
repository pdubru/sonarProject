
Practica5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005034  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005170  08005170  00015170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800524c  0800524c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800524c  0800524c  0001524c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005254  08005254  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005254  08005254  00015254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005258  08005258  00015258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800525c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  080052cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  080052cc  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c707  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c8b  00000000  00000000  0002c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  0002e430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  0002f038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000177f8  00000000  00000000  0002fb58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000091fb  00000000  00000000  00047350  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092d2b  00000000  00000000  0005054b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3276  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003904  00000000  00000000  000e32f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08005158 	.word	0x08005158

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08005158 	.word	0x08005158

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	468c      	mov	ip, r1
 80001b2:	4604      	mov	r4, r0
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0c03 	orr.w	ip, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	fbbc f7fe 	udiv	r7, ip, lr
 80001e2:	fa1f f885 	uxth.w	r8, r5
 80001e6:	fb0e c317 	mls	r3, lr, r7, ip
 80001ea:	fb07 f908 	mul.w	r9, r7, r8
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f4:	4599      	cmp	r9, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 31ff 	add.w	r1, r7, #4294967295
 80001fe:	f080 811c 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000202:	4599      	cmp	r9, r3
 8000204:	f240 8119 	bls.w	800043a <__udivmoddi4+0x28e>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	eba3 0309 	sub.w	r3, r3, r9
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	fb00 f108 	mul.w	r1, r0, r8
 800021c:	b2a4      	uxth	r4, r4
 800021e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000222:	42a1      	cmp	r1, r4
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	192c      	adds	r4, r5, r4
 8000228:	f100 33ff 	add.w	r3, r0, #4294967295
 800022c:	f080 8107 	bcs.w	800043e <__udivmoddi4+0x292>
 8000230:	42a1      	cmp	r1, r4
 8000232:	f240 8104 	bls.w	800043e <__udivmoddi4+0x292>
 8000236:	3802      	subs	r0, #2
 8000238:	442c      	add	r4, r5
 800023a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023e:	2700      	movs	r7, #0
 8000240:	1a64      	subs	r4, r4, r1
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	2300      	movs	r3, #0
 8000246:	40d4      	lsrs	r4, r2
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ec 	beq.w	8000434 <__udivmoddi4+0x288>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0x158>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fb 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	469c      	mov	ip, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4c00 	strd	r4, ip, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	2701      	movs	r7, #1
 80002a0:	1b49      	subs	r1, r1, r5
 80002a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002a6:	fa1f f985 	uxth.w	r9, r5
 80002aa:	fbb1 fef8 	udiv	lr, r1, r8
 80002ae:	fb08 111e 	mls	r1, r8, lr, r1
 80002b2:	fb09 f00e 	mul.w	r0, r9, lr
 80002b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ba:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002be:	4298      	cmp	r0, r3
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c2:	18eb      	adds	r3, r5, r3
 80002c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4298      	cmp	r0, r3
 80002cc:	f200 80cd 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002d0:	468e      	mov	lr, r1
 80002d2:	1a1b      	subs	r3, r3, r0
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	fb09 f900 	mul.w	r9, r9, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e6:	45a1      	cmp	r9, r4
 80002e8:	d907      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002ea:	192c      	adds	r4, r5, r4
 80002ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a1      	cmp	r9, r4
 80002f4:	f200 80b6 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002f8:	4618      	mov	r0, r3
 80002fa:	eba4 0409 	sub.w	r4, r4, r9
 80002fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000302:	e79e      	b.n	8000242 <__udivmoddi4+0x96>
 8000304:	f1c7 0520 	rsb	r5, r7, #32
 8000308:	40bb      	lsls	r3, r7
 800030a:	fa22 fc05 	lsr.w	ip, r2, r5
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa21 f405 	lsr.w	r4, r1, r5
 8000316:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800031a:	fbb4 f9fe 	udiv	r9, r4, lr
 800031e:	fa1f f88c 	uxth.w	r8, ip
 8000322:	fb0e 4419 	mls	r4, lr, r9, r4
 8000326:	fa20 f305 	lsr.w	r3, r0, r5
 800032a:	40b9      	lsls	r1, r7
 800032c:	fb09 fa08 	mul.w	sl, r9, r8
 8000330:	4319      	orrs	r1, r3
 8000332:	0c0b      	lsrs	r3, r1, #16
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	45a2      	cmp	sl, r4
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f307 	lsl.w	r3, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	45a2      	cmp	sl, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4464      	add	r4, ip
 800035c:	eba4 040a 	sub.w	r4, r4, sl
 8000360:	fbb4 f0fe 	udiv	r0, r4, lr
 8000364:	fb0e 4410 	mls	r4, lr, r0, r4
 8000368:	fb00 fa08 	mul.w	sl, r0, r8
 800036c:	b289      	uxth	r1, r1
 800036e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000372:	45a2      	cmp	sl, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f100 31ff 	add.w	r1, r0, #4294967295
 800037e:	d26b      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 8000380:	45a2      	cmp	sl, r4
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000384:	3802      	subs	r0, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038c:	fba0 8902 	umull	r8, r9, r0, r2
 8000390:	eba4 040a 	sub.w	r4, r4, sl
 8000394:	454c      	cmp	r4, r9
 8000396:	4641      	mov	r1, r8
 8000398:	46ce      	mov	lr, r9
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d069      	beq.n	8000476 <__udivmoddi4+0x2ca>
 80003a2:	1a5a      	subs	r2, r3, r1
 80003a4:	eb64 040e 	sbc.w	r4, r4, lr
 80003a8:	fa04 f505 	lsl.w	r5, r4, r5
 80003ac:	fa22 f307 	lsr.w	r3, r2, r7
 80003b0:	40fc      	lsrs	r4, r7
 80003b2:	431d      	orrs	r5, r3
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	4095      	lsls	r5, r2
 80003be:	f1c2 0320 	rsb	r3, r2, #32
 80003c2:	fa21 f003 	lsr.w	r0, r1, r3
 80003c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003ca:	fbb0 f7f8 	udiv	r7, r0, r8
 80003ce:	fa1f f985 	uxth.w	r9, r5
 80003d2:	fb08 0017 	mls	r0, r8, r7, r0
 80003d6:	fa24 f303 	lsr.w	r3, r4, r3
 80003da:	4091      	lsls	r1, r2
 80003dc:	fb07 fc09 	mul.w	ip, r7, r9
 80003e0:	430b      	orrs	r3, r1
 80003e2:	0c19      	lsrs	r1, r3, #16
 80003e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003e8:	458c      	cmp	ip, r1
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x254>
 80003f0:	1869      	adds	r1, r5, r1
 80003f2:	f107 30ff 	add.w	r0, r7, #4294967295
 80003f6:	d231      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003f8:	458c      	cmp	ip, r1
 80003fa:	d92f      	bls.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	3f02      	subs	r7, #2
 80003fe:	4429      	add	r1, r5
 8000400:	eba1 010c 	sub.w	r1, r1, ip
 8000404:	fbb1 f0f8 	udiv	r0, r1, r8
 8000408:	fb08 1c10 	mls	ip, r8, r0, r1
 800040c:	fb00 fe09 	mul.w	lr, r0, r9
 8000410:	b299      	uxth	r1, r3
 8000412:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000416:	458e      	cmp	lr, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d218      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000422:	458e      	cmp	lr, r1
 8000424:	d916      	bls.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4637      	mov	r7, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e708      	b.n	800024c <__udivmoddi4+0xa0>
 800043a:	460f      	mov	r7, r1
 800043c:	e6e6      	b.n	800020c <__udivmoddi4+0x60>
 800043e:	4618      	mov	r0, r3
 8000440:	e6fb      	b.n	800023a <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb8 0102 	subs.w	r1, r8, r2
 800044a:	eb69 020c 	sbc.w	r2, r9, ip
 800044e:	3801      	subs	r0, #1
 8000450:	4696      	mov	lr, r2
 8000452:	e7a4      	b.n	800039e <__udivmoddi4+0x1f2>
 8000454:	4618      	mov	r0, r3
 8000456:	e7e8      	b.n	800042a <__udivmoddi4+0x27e>
 8000458:	4608      	mov	r0, r1
 800045a:	e795      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045c:	4607      	mov	r7, r0
 800045e:	e7cf      	b.n	8000400 <__udivmoddi4+0x254>
 8000460:	4681      	mov	r9, r0
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3802      	subs	r0, #2
 8000466:	442c      	add	r4, r5
 8000468:	e747      	b.n	80002fa <__udivmoddi4+0x14e>
 800046a:	f1ae 0e02 	sub.w	lr, lr, #2
 800046e:	442b      	add	r3, r5
 8000470:	e72f      	b.n	80002d2 <__udivmoddi4+0x126>
 8000472:	4638      	mov	r0, r7
 8000474:	e707      	b.n	8000286 <__udivmoddi4+0xda>
 8000476:	4637      	mov	r7, r6
 8000478:	e6e8      	b.n	800024c <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay(uint32_t delay){
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]


			if(delay < 2) delay = 2;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d801      	bhi.n	8000492 <delay+0x12>
 800048e:	2302      	movs	r3, #2
 8000490:	607b      	str	r3, [r7, #4]
			TIM7->ARR = delay - 1;
 8000492:	4a0f      	ldr	r2, [pc, #60]	; (80004d0 <delay+0x50>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3b01      	subs	r3, #1
 8000498:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM7-> CNT = 0;
 800049a:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <delay+0x50>)
 800049c:	2200      	movs	r2, #0
 800049e:	625a      	str	r2, [r3, #36]	; 0x24
			TIM7->CR1 |= 1;
 80004a0:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <delay+0x50>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <delay+0x50>)
 80004a6:	f043 0301 	orr.w	r3, r3, #1
 80004aa:	6013      	str	r3, [r2, #0]
			while((TIM7->SR&0x0001) != 1);
 80004ac:	bf00      	nop
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <delay+0x50>)
 80004b0:	691b      	ldr	r3, [r3, #16]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d1f9      	bne.n	80004ae <delay+0x2e>
			TIM7->SR &= ~(0x0001);
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <delay+0x50>)
 80004bc:	691b      	ldr	r3, [r3, #16]
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <delay+0x50>)
 80004c0:	f023 0301 	bic.w	r3, r3, #1
 80004c4:	6113      	str	r3, [r2, #16]

		}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	40001400 	.word	0x40001400

080004d4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80004dc:	1d39      	adds	r1, r7, #4
 80004de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e2:	2201      	movs	r2, #1
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <__io_putchar+0x20>)
 80004e6:	f003 fcaa 	bl	8003e3e <HAL_UART_Transmit>
	return ch;
 80004ea:	687b      	ldr	r3, [r7, #4]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000138 	.word	0x20000138

080004f8 <__io_getchar>:
GETCHAR_PROTOTYPE {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
	/* Place your implementation of fgetc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	char ch;
	HAL_UART_Receive(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80004fe:	1df9      	adds	r1, r7, #7
 8000500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000504:	2201      	movs	r2, #1
 8000506:	4804      	ldr	r0, [pc, #16]	; (8000518 <__io_getchar+0x20>)
 8000508:	f003 fd32 	bl	8003f70 <HAL_UART_Receive>
	return ch;
 800050c:	79fb      	ldrb	r3, [r7, #7]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000138 	.word	0x20000138

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fe18 	bl	8001156 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f8e1 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 faa7 	bl	8000a7c <MX_GPIO_Init>
  MX_ADC_Init();
 800052e:	f000 f92b 	bl	8000788 <MX_ADC_Init>
  MX_TIM2_Init();
 8000532:	f000 f981 	bl	8000838 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000536:	f000 f9d1 	bl	80008dc <MX_TIM3_Init>
  MX_TIM7_Init();
 800053a:	f000 fa3f 	bl	80009bc <MX_TIM7_Init>
  MX_USART2_UART_Init();
 800053e:	f000 fa73 	bl	8000a28 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	if(msg ==1 ){
 8000542:	4b58      	ldr	r3, [pc, #352]	; (80006a4 <main+0x188>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d11b      	bne.n	8000582 <main+0x66>

	  			  msg = 0;
 800054a:	4b56      	ldr	r3, [pc, #344]	; (80006a4 <main+0x188>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
	  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2120      	movs	r1, #32
 8000554:	4854      	ldr	r0, [pc, #336]	; (80006a8 <main+0x18c>)
 8000556:	f001 fd84 	bl	8002062 <HAL_GPIO_WritePin>
	  			  delay(3);
 800055a:	2003      	movs	r0, #3
 800055c:	f7ff ff90 	bl	8000480 <delay>
	  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2120      	movs	r1, #32
 8000564:	4850      	ldr	r0, [pc, #320]	; (80006a8 <main+0x18c>)
 8000566:	f001 fd7c 	bl	8002062 <HAL_GPIO_WritePin>
	  			  delay(10);
 800056a:	200a      	movs	r0, #10
 800056c:	f7ff ff88 	bl	8000480 <delay>
	  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2120      	movs	r1, #32
 8000574:	484c      	ldr	r0, [pc, #304]	; (80006a8 <main+0x18c>)
 8000576:	f001 fd74 	bl	8002062 <HAL_GPIO_WritePin>
	  			  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800057a:	2100      	movs	r1, #0
 800057c:	484b      	ldr	r0, [pc, #300]	; (80006ac <main+0x190>)
 800057e:	f002 fce3 	bl	8002f48 <HAL_TIM_IC_Start_IT>

	  		  }

	  	if(time_captured == 1){
 8000582:	4b4b      	ldr	r3, [pc, #300]	; (80006b0 <main+0x194>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d121      	bne.n	80005ce <main+0xb2>

	  		distance = (time_elapsed)/58;
 800058a:	4b4a      	ldr	r3, [pc, #296]	; (80006b4 <main+0x198>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a4a      	ldr	r2, [pc, #296]	; (80006b8 <main+0x19c>)
 8000590:	fba2 2303 	umull	r2, r3, r2, r3
 8000594:	095b      	lsrs	r3, r3, #5
 8000596:	4a49      	ldr	r2, [pc, #292]	; (80006bc <main+0x1a0>)
 8000598:	6013      	str	r3, [r2, #0]
			angle_array[string_num] = angle;
 800059a:	4b49      	ldr	r3, [pc, #292]	; (80006c0 <main+0x1a4>)
 800059c:	f993 1000 	ldrsb.w	r1, [r3]
 80005a0:	4b48      	ldr	r3, [pc, #288]	; (80006c4 <main+0x1a8>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	b2c9      	uxtb	r1, r1
 80005a8:	4b47      	ldr	r3, [pc, #284]	; (80006c8 <main+0x1ac>)
 80005aa:	5499      	strb	r1, [r3, r2]
			distance_array[string_num]=distance;
 80005ac:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <main+0x1a8>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4619      	mov	r1, r3
 80005b2:	4b42      	ldr	r3, [pc, #264]	; (80006bc <main+0x1a0>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a45      	ldr	r2, [pc, #276]	; (80006cc <main+0x1b0>)
 80005b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			string_num++;
 80005bc:	4b41      	ldr	r3, [pc, #260]	; (80006c4 <main+0x1a8>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	3301      	adds	r3, #1
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b3f      	ldr	r3, [pc, #252]	; (80006c4 <main+0x1a8>)
 80005c6:	701a      	strb	r2, [r3, #0]
	  		time_captured = 0;
 80005c8:	4b39      	ldr	r3, [pc, #228]	; (80006b0 <main+0x194>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]

	  	}

	  	if(msg == 2){
 80005ce:	4b35      	ldr	r3, [pc, #212]	; (80006a4 <main+0x188>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d13d      	bne.n	8000652 <main+0x136>
	  		while(rotate){
 80005d6:	e034      	b.n	8000642 <main+0x126>
	  		msg = 0;
 80005d8:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <main+0x188>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
	  		HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 80005de:	2108      	movs	r1, #8
 80005e0:	483b      	ldr	r0, [pc, #236]	; (80006d0 <main+0x1b4>)
 80005e2:	f002 fb95 	bl	8002d10 <HAL_TIM_PWM_Start>
	  		HAL_ADC_Start(&hadc);
 80005e6:	483b      	ldr	r0, [pc, #236]	; (80006d4 <main+0x1b8>)
 80005e8:	f000 ff6a 	bl	80014c0 <HAL_ADC_Start>
	  		HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80005ec:	f04f 31ff 	mov.w	r1, #4294967295
 80005f0:	4838      	ldr	r0, [pc, #224]	; (80006d4 <main+0x1b8>)
 80005f2:	f000 fff1 	bl	80015d8 <HAL_ADC_PollForConversion>
	  		valor_adc = HAL_ADC_GetValue(&hadc);
 80005f6:	4837      	ldr	r0, [pc, #220]	; (80006d4 <main+0x1b8>)
 80005f8:	f001 f877 	bl	80016ea <HAL_ADC_GetValue>
 80005fc:	4602      	mov	r2, r0
 80005fe:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <main+0x1bc>)
 8000600:	601a      	str	r2, [r3, #0]
	  		HAL_ADC_Stop(&hadc);
 8000602:	4834      	ldr	r0, [pc, #208]	; (80006d4 <main+0x1b8>)
 8000604:	f000 ffbc 	bl	8001580 <HAL_ADC_Stop>

	  		angle = ((valor_adc*100)/2275);
 8000608:	4b33      	ldr	r3, [pc, #204]	; (80006d8 <main+0x1bc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2264      	movs	r2, #100	; 0x64
 800060e:	fb02 f303 	mul.w	r3, r2, r3
 8000612:	4a32      	ldr	r2, [pc, #200]	; (80006dc <main+0x1c0>)
 8000614:	fba2 2303 	umull	r2, r3, r2, r3
 8000618:	0a5b      	lsrs	r3, r3, #9
 800061a:	b25a      	sxtb	r2, r3
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <main+0x1a4>)
 800061e:	701a      	strb	r2, [r3, #0]
	  		TIM2->CCR3=((valor_adc*100)/111)+800;
 8000620:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <main+0x1bc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2264      	movs	r2, #100	; 0x64
 8000626:	fb02 f203 	mul.w	r2, r2, r3
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <main+0x1c4>)
 800062c:	fba3 1302 	umull	r1, r3, r3, r2
 8000630:	1ad2      	subs	r2, r2, r3
 8000632:	0852      	lsrs	r2, r2, #1
 8000634:	4413      	add	r3, r2
 8000636:	099b      	lsrs	r3, r3, #6
 8000638:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800063c:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000640:	63d3      	str	r3, [r2, #60]	; 0x3c
	  		while(rotate){
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <main+0x1c8>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1c6      	bne.n	80005d8 <main+0xbc>
	  		}
	  		HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_3);
 800064a:	2108      	movs	r1, #8
 800064c:	4820      	ldr	r0, [pc, #128]	; (80006d0 <main+0x1b4>)
 800064e:	f002 fbf5 	bl	8002e3c <HAL_TIM_PWM_Stop>
	  	}

	  	if(msg == 3){
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <main+0x188>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b03      	cmp	r3, #3
 8000658:	f47f af73 	bne.w	8000542 <main+0x26>
	  		msg = 0;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <main+0x188>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
	  		for(int i=0;i<string_num;i++){
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	e00f      	b.n	8000688 <main+0x16c>
	  			printf("Angle: %hu - Distance: %hu\r\n",angle_array[i], distance_array[i]);
 8000668:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <main+0x1ac>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	4a16      	ldr	r2, [pc, #88]	; (80006cc <main+0x1b0>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800067a:	461a      	mov	r2, r3
 800067c:	481a      	ldr	r0, [pc, #104]	; (80006e8 <main+0x1cc>)
 800067e:	f003 fe7d 	bl	800437c <iprintf>
	  		for(int i=0;i<string_num;i++){
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	3301      	adds	r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <main+0x1a8>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4293      	cmp	r3, r2
 8000692:	dbe9      	blt.n	8000668 <main+0x14c>
	  		}

	  		string_num++;
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <main+0x1a8>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <main+0x1a8>)
 800069e:	701a      	strb	r2, [r3, #0]
	  	if(msg ==1 ){
 80006a0:	e74f      	b.n	8000542 <main+0x26>
 80006a2:	bf00      	nop
 80006a4:	200000a1 	.word	0x200000a1
 80006a8:	40020400 	.word	0x40020400
 80006ac:	200000a8 	.word	0x200000a8
 80006b0:	200000eb 	.word	0x200000eb
 80006b4:	2000009c 	.word	0x2000009c
 80006b8:	8d3dcb09 	.word	0x8d3dcb09
 80006bc:	200000a4 	.word	0x200000a4
 80006c0:	200000ea 	.word	0x200000ea
 80006c4:	2000008c 	.word	0x2000008c
 80006c8:	20000178 	.word	0x20000178
 80006cc:	200000ec 	.word	0x200000ec
 80006d0:	200000f8 	.word	0x200000f8
 80006d4:	2000017c 	.word	0x2000017c
 80006d8:	20000210 	.word	0x20000210
 80006dc:	399d336d 	.word	0x399d336d
 80006e0:	27350b89 	.word	0x27350b89
 80006e4:	200000a0 	.word	0x200000a0
 80006e8:	08005170 	.word	0x08005170

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b092      	sub	sp, #72	; 0x48
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2234      	movs	r2, #52	; 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fe36 	bl	800436c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	463b      	mov	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <SystemClock_Config+0x98>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000716:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <SystemClock_Config+0x98>)
 8000718:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800071c:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071e:	2302      	movs	r3, #2
 8000720:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000722:	2301      	movs	r3, #1
 8000724:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000726:	2310      	movs	r3, #16
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072e:	2300      	movs	r3, #0
 8000730:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000732:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000738:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fca6 	bl	8002094 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800074e:	f000 fa23 	bl	8000b98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2303      	movs	r3, #3
 8000758:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	2101      	movs	r1, #1
 800076a:	4618      	mov	r0, r3
 800076c:	f001 ffc2 	bl	80026f4 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000776:	f000 fa0f 	bl	8000b98 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3748      	adds	r7, #72	; 0x48
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40007000 	.word	0x40007000

08000788 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <MX_ADC_Init+0xa8>)
 800079a:	4a26      	ldr	r2, [pc, #152]	; (8000834 <MX_ADC_Init+0xac>)
 800079c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <MX_ADC_Init+0xa8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <MX_ADC_Init+0xa8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_ADC_Init+0xa8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_ADC_Init+0xa8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_ADC_Init+0xa8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_ADC_Init+0xa8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_ADC_Init+0xa8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_ADC_Init+0xa8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_ADC_Init+0xa8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_ADC_Init+0xa8>)
 80007d8:	2201      	movs	r2, #1
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_ADC_Init+0xa8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_ADC_Init+0xa8>)
 80007e6:	2210      	movs	r2, #16
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_ADC_Init+0xa8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_ADC_Init+0xa8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <MX_ADC_Init+0xa8>)
 80007fa:	f000 fd1b 	bl	8001234 <HAL_ADC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000804:	f000 f9c8 	bl	8000b98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800080c:	2301      	movs	r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_ADC_Init+0xa8>)
 800081a:	f000 ff73 	bl	8001704 <HAL_ADC_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000824:	f000 f9b8 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000017c 	.word	0x2000017c
 8000834:	40012400 	.word	0x40012400

08000838 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000848:	463b      	mov	r3, r7
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000854:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_TIM2_Init+0xa0>)
 8000856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800085a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_TIM2_Init+0xa0>)
 800085e:	220f      	movs	r2, #15
 8000860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_TIM2_Init+0xa0>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_TIM2_Init+0xa0>)
 800086a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800086e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_TIM2_Init+0xa0>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_TIM2_Init+0xa0>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800087c:	4816      	ldr	r0, [pc, #88]	; (80008d8 <MX_TIM2_Init+0xa0>)
 800087e:	f002 fa08 	bl	8002c92 <HAL_TIM_PWM_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000888:	f000 f986 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4619      	mov	r1, r3
 800089a:	480f      	ldr	r0, [pc, #60]	; (80008d8 <MX_TIM2_Init+0xa0>)
 800089c:	f003 fa24 	bl	8003ce8 <HAL_TIMEx_MasterConfigSynchronization>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008a6:	f000 f977 	bl	8000b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008aa:	2360      	movs	r3, #96	; 0x60
 80008ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008ba:	463b      	mov	r3, r7
 80008bc:	2208      	movs	r2, #8
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_TIM2_Init+0xa0>)
 80008c2:	f002 fd23 	bl	800330c <HAL_TIM_PWM_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80008cc:	f000 f964 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000f8 	.word	0x200000f8

080008dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	f107 0318 	add.w	r3, r7, #24
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000906:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_TIM3_Init+0xd8>)
 8000908:	4a2b      	ldr	r2, [pc, #172]	; (80009b8 <MX_TIM3_Init+0xdc>)
 800090a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <MX_TIM3_Init+0xd8>)
 800090e:	221f      	movs	r2, #31
 8000910:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_TIM3_Init+0xd8>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_TIM3_Init+0xd8>)
 800091a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800091e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000920:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <MX_TIM3_Init+0xd8>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000926:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MX_TIM3_Init+0xd8>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800092c:	4821      	ldr	r0, [pc, #132]	; (80009b4 <MX_TIM3_Init+0xd8>)
 800092e:	f002 f971 	bl	8002c14 <HAL_TIM_Base_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000938:	f000 f92e 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000940:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000942:	f107 0318 	add.w	r3, r7, #24
 8000946:	4619      	mov	r1, r3
 8000948:	481a      	ldr	r0, [pc, #104]	; (80009b4 <MX_TIM3_Init+0xd8>)
 800094a:	f002 fd9d 	bl	8003488 <HAL_TIM_ConfigClockSource>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000954:	f000 f920 	bl	8000b98 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000958:	4816      	ldr	r0, [pc, #88]	; (80009b4 <MX_TIM3_Init+0xd8>)
 800095a:	f002 faac 	bl	8002eb6 <HAL_TIM_IC_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000964:	f000 f918 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	4619      	mov	r1, r3
 8000976:	480f      	ldr	r0, [pc, #60]	; (80009b4 <MX_TIM3_Init+0xd8>)
 8000978:	f003 f9b6 	bl	8003ce8 <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000982:	f000 f909 	bl	8000b98 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000986:	230a      	movs	r3, #10
 8000988:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800098a:	2301      	movs	r3, #1
 800098c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_TIM3_Init+0xd8>)
 800099e:	f002 fc21 	bl	80031e4 <HAL_TIM_IC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80009a8:	f000 f8f6 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200000a8 	.word	0x200000a8
 80009b8:	40000400 	.word	0x40000400

080009bc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_TIM7_Init+0x64>)
 80009cc:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <MX_TIM7_Init+0x68>)
 80009ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 31;
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_TIM7_Init+0x64>)
 80009d2:	221f      	movs	r2, #31
 80009d4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_TIM7_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_TIM7_Init+0x64>)
 80009de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_TIM7_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009ea:	480d      	ldr	r0, [pc, #52]	; (8000a20 <MX_TIM7_Init+0x64>)
 80009ec:	f002 f912 	bl	8002c14 <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80009f6:	f000 f8cf 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	4619      	mov	r1, r3
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <MX_TIM7_Init+0x64>)
 8000a08:	f003 f96e 	bl	8003ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000a12:	f000 f8c1 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200001d0 	.word	0x200001d0
 8000a24:	40001400 	.word	0x40001400

08000a28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <MX_USART2_UART_Init+0x50>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a60:	f003 f9a0 	bl	8003da4 <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a6a:	f000 f895 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000138 	.word	0x20000138
 8000a78:	40004400 	.word	0x40004400

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <MX_GPIO_Init+0x108>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a3b      	ldr	r2, [pc, #236]	; (8000b84 <MX_GPIO_Init+0x108>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <MX_GPIO_Init+0x108>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <MX_GPIO_Init+0x108>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	4a35      	ldr	r2, [pc, #212]	; (8000b84 <MX_GPIO_Init+0x108>)
 8000ab0:	f043 0320 	orr.w	r3, r3, #32
 8000ab4:	61d3      	str	r3, [r2, #28]
 8000ab6:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <MX_GPIO_Init+0x108>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	f003 0320 	and.w	r3, r3, #32
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <MX_GPIO_Init+0x108>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	4a2f      	ldr	r2, [pc, #188]	; (8000b84 <MX_GPIO_Init+0x108>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	61d3      	str	r3, [r2, #28]
 8000ace:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <MX_GPIO_Init+0x108>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <MX_GPIO_Init+0x108>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a29      	ldr	r2, [pc, #164]	; (8000b84 <MX_GPIO_Init+0x108>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	61d3      	str	r3, [r2, #28]
 8000ae6:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <MX_GPIO_Init+0x108>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pin_Trigger_GPIO_Port, Pin_Trigger_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2120      	movs	r1, #32
 8000af6:	4824      	ldr	r0, [pc, #144]	; (8000b88 <MX_GPIO_Init+0x10c>)
 8000af8:	f001 fab3 	bl	8002062 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Boton_Usuari_Pin */
  GPIO_InitStruct.Pin = Boton_Usuari_Pin;
 8000afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b02:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <MX_GPIO_Init+0x110>)
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boton_Usuari_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	481f      	ldr	r0, [pc, #124]	; (8000b90 <MX_GPIO_Init+0x114>)
 8000b12:	f001 f901 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : Boton_tactil_Pin Boton_tactil_2_Pin */
  GPIO_InitStruct.Pin = Boton_tactil_Pin|Boton_tactil_2_Pin;
 8000b16:	2312      	movs	r3, #18
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_GPIO_Init+0x110>)
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	481a      	ldr	r0, [pc, #104]	; (8000b94 <MX_GPIO_Init+0x118>)
 8000b2a:	f001 f8f5 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Trigger_Pin */
  GPIO_InitStruct.Pin = Pin_Trigger_Pin;
 8000b2e:	2320      	movs	r3, #32
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Pin_Trigger_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4810      	ldr	r0, [pc, #64]	; (8000b88 <MX_GPIO_Init+0x10c>)
 8000b46:	f001 f8e7 	bl	8001d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2007      	movs	r0, #7
 8000b50:	f001 f8ab 	bl	8001caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b54:	2007      	movs	r0, #7
 8000b56:	f001 f8c4 	bl	8001ce2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	200a      	movs	r0, #10
 8000b60:	f001 f8a3 	bl	8001caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b64:	200a      	movs	r0, #10
 8000b66:	f001 f8bc 	bl	8001ce2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2028      	movs	r0, #40	; 0x28
 8000b70:	f001 f89b 	bl	8001caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b74:	2028      	movs	r0, #40	; 0x28
 8000b76:	f001 f8b4 	bl	8001ce2 <HAL_NVIC_EnableIRQ>

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	10110000 	.word	0x10110000
 8000b90:	40020800 	.word	0x40020800
 8000b94:	40020000 	.word	0x40020000

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <Error_Handler+0x6>

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_MspInit+0x58>)
 8000ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000baa:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <HAL_MspInit+0x58>)
 8000bac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb0:	6253      	str	r3, [r2, #36]	; 0x24
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_MspInit+0x58>)
 8000bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_MspInit+0x58>)
 8000bc0:	6a1b      	ldr	r3, [r3, #32]
 8000bc2:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <HAL_MspInit+0x58>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6213      	str	r3, [r2, #32]
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_MspInit+0x58>)
 8000bcc:	6a1b      	ldr	r3, [r3, #32]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_MspInit+0x58>)
 8000bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bda:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_MspInit+0x58>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	6253      	str	r3, [r2, #36]	; 0x24
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_MspInit+0x58>)
 8000be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <HAL_ADC_MspInit+0x74>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d123      	bne.n	8000c66 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_ADC_MspInit+0x78>)
 8000c20:	6a1b      	ldr	r3, [r3, #32]
 8000c22:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <HAL_ADC_MspInit+0x78>)
 8000c24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c28:	6213      	str	r3, [r2, #32]
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_ADC_MspInit+0x78>)
 8000c2c:	6a1b      	ldr	r3, [r3, #32]
 8000c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_ADC_MspInit+0x78>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <HAL_ADC_MspInit+0x78>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_ADC_MspInit+0x78>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c52:	2303      	movs	r3, #3
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_ADC_MspInit+0x7c>)
 8000c62:	f001 f859 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40012400 	.word	0x40012400
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000

08000c7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c9c:	d128      	bne.n	8000cf0 <HAL_TIM_PWM_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x7c>)
 8000ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x7c>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6253      	str	r3, [r2, #36]	; 0x24
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x7c>)
 8000cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x7c>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x7c>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x7c>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Timer_PWM_Pin;
 8000cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Timer_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4804      	ldr	r0, [pc, #16]	; (8000cfc <HAL_TIM_PWM_MspInit+0x80>)
 8000cec:	f001 f814 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020400 	.word	0x40020400

08000d00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a24      	ldr	r2, [pc, #144]	; (8000db0 <HAL_TIM_Base_MspInit+0xb0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d130      	bne.n	8000d84 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <HAL_TIM_Base_MspInit+0xb4>)
 8000d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d26:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <HAL_TIM_Base_MspInit+0xb4>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6253      	str	r3, [r2, #36]	; 0x24
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <HAL_TIM_Base_MspInit+0xb4>)
 8000d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <HAL_TIM_Base_MspInit+0xb4>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	4a1d      	ldr	r2, [pc, #116]	; (8000db4 <HAL_TIM_Base_MspInit+0xb4>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	61d3      	str	r3, [r2, #28]
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <HAL_TIM_Base_MspInit+0xb4>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Timer_Ultrasonidos_Pin;
 8000d52:	2310      	movs	r3, #16
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d62:	2302      	movs	r3, #2
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Timer_Ultrasonidos_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4812      	ldr	r0, [pc, #72]	; (8000db8 <HAL_TIM_Base_MspInit+0xb8>)
 8000d6e:	f000 ffd3 	bl	8001d18 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	201d      	movs	r0, #29
 8000d78:	f000 ff97 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d7c:	201d      	movs	r0, #29
 8000d7e:	f000 ffb0 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000d82:	e010      	b.n	8000da6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <HAL_TIM_Base_MspInit+0xbc>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d10b      	bne.n	8000da6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_TIM_Base_MspInit+0xb4>)
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_TIM_Base_MspInit+0xb4>)
 8000d94:	f043 0320 	orr.w	r3, r3, #32
 8000d98:	6253      	str	r3, [r2, #36]	; 0x24
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_TIM_Base_MspInit+0xb4>)
 8000d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9e:	f003 0320 	and.w	r3, r3, #32
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40000400 	.word	0x40000400
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020400 	.word	0x40020400
 8000dbc:	40001400 	.word	0x40001400

08000dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_UART_MspInit+0x7c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d127      	bne.n	8000e32 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_UART_MspInit+0x80>)
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	4a16      	ldr	r2, [pc, #88]	; (8000e40 <HAL_UART_MspInit+0x80>)
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	6253      	str	r3, [r2, #36]	; 0x24
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_UART_MspInit+0x80>)
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_UART_MspInit+0x80>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <HAL_UART_MspInit+0x80>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	61d3      	str	r3, [r2, #28]
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_UART_MspInit+0x80>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e12:	230c      	movs	r3, #12
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e22:	2307      	movs	r3, #7
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <HAL_UART_MspInit+0x84>)
 8000e2e:	f000 ff73 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40004400 	.word	0x40004400
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020000 	.word	0x40020000

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <NMI_Handler+0x4>

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr

08000e72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8e:	f000 f9b5 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  /* USER CODE END EXTI1_IRQn 0 */
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  if((EXTI -> PR & (1<<1))>>1){
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <EXTI1_IRQHandler+0x30>)
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00b      	beq.n	8000ec0 <EXTI1_IRQHandler+0x28>
	  	  	    rotate = 0;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <EXTI1_IRQHandler+0x34>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
  				msg = 3;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <EXTI1_IRQHandler+0x38>)
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	701a      	strb	r2, [r3, #0]
  				EXTI -> PR |= 1<<1;
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <EXTI1_IRQHandler+0x30>)
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	4a03      	ldr	r2, [pc, #12]	; (8000ec8 <EXTI1_IRQHandler+0x30>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	6153      	str	r3, [r2, #20]
  			}

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	40010400 	.word	0x40010400
 8000ecc:	200000a0 	.word	0x200000a0
 8000ed0:	200000a1 	.word	0x200000a1

08000ed4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if((EXTI -> PR & (1<<4))>>4){
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <EXTI4_IRQHandler+0x30>)
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	f003 0310 	and.w	r3, r3, #16
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00b      	beq.n	8000efc <EXTI4_IRQHandler+0x28>
		rotate = 1;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <EXTI4_IRQHandler+0x34>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
		msg = 2;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <EXTI4_IRQHandler+0x38>)
 8000eec:	2202      	movs	r2, #2
 8000eee:	701a      	strb	r2, [r3, #0]
		EXTI -> PR |= 1<<4;
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <EXTI4_IRQHandler+0x30>)
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <EXTI4_IRQHandler+0x30>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6153      	str	r3, [r2, #20]

  /* USER CODE END EXTI4_IRQn 0 */
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	40010400 	.word	0x40010400
 8000f08:	200000a0 	.word	0x200000a0
 8000f0c:	200000a1 	.word	0x200000a1

08000f10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(TIM3 -> SR & TIM_SR_CC1IF){
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <TIM3_IRQHandler+0x54>)
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d01e      	beq.n	8000f5e <TIM3_IRQHandler+0x4e>

		TIM3 -> SR &= ~TIM_SR_CC1IF;
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <TIM3_IRQHandler+0x54>)
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <TIM3_IRQHandler+0x54>)
 8000f26:	f023 0302 	bic.w	r3, r3, #2
 8000f2a:	6113      	str	r3, [r2, #16]

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	480e      	ldr	r0, [pc, #56]	; (8000f68 <TIM3_IRQHandler+0x58>)
 8000f30:	f001 f880 	bl	8002034 <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <TIM3_IRQHandler+0x32>
			TIM3->CNT=0;
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <TIM3_IRQHandler+0x54>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f40:	e00d      	b.n	8000f5e <TIM3_IRQHandler+0x4e>
			HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000f42:	2100      	movs	r1, #0
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <TIM3_IRQHandler+0x5c>)
 8000f46:	f002 f8c9 	bl	80030dc <HAL_TIM_IC_Stop_IT>
			time_elapsed = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <TIM3_IRQHandler+0x5c>)
 8000f4e:	f002 fb53 	bl	80035f8 <HAL_TIM_ReadCapturedValue>
 8000f52:	4602      	mov	r2, r0
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <TIM3_IRQHandler+0x60>)
 8000f56:	601a      	str	r2, [r3, #0]
			time_captured = 1;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <TIM3_IRQHandler+0x64>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40000400 	.word	0x40000400
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	200000a8 	.word	0x200000a8
 8000f70:	2000009c 	.word	0x2000009c
 8000f74:	200000eb 	.word	0x200000eb

08000f78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if((EXTI -> PR & (1<<13))>>13){
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <EXTI15_10_IRQHandler+0x30>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00b      	beq.n	8000fa0 <EXTI15_10_IRQHandler+0x28>
			rotate = 1; //0
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <EXTI15_10_IRQHandler+0x34>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
			msg = 2;//1
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <EXTI15_10_IRQHandler+0x38>)
 8000f90:	2202      	movs	r2, #2
 8000f92:	701a      	strb	r2, [r3, #0]
			EXTI -> PR |= 1<<13;
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <EXTI15_10_IRQHandler+0x30>)
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	4a03      	ldr	r2, [pc, #12]	; (8000fa8 <EXTI15_10_IRQHandler+0x30>)
 8000f9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f9e:	6153      	str	r3, [r2, #20]

  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	40010400 	.word	0x40010400
 8000fac:	200000a0 	.word	0x200000a0
 8000fb0:	200000a1 	.word	0x200000a1

08000fb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	e00a      	b.n	8000fdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fc6:	f7ff fa97 	bl	80004f8 <__io_getchar>
 8000fca:	4601      	mov	r1, r0
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	60ba      	str	r2, [r7, #8]
 8000fd2:	b2ca      	uxtb	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbf0      	blt.n	8000fc6 <_read+0x12>
	}

return len;
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	e009      	b.n	8001014 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	60ba      	str	r2, [r7, #8]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa63 	bl	80004d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbf1      	blt.n	8001000 <_write+0x12>
	}
	return len;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_close>:

int _close(int file)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	return -1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800104c:	605a      	str	r2, [r3, #4]
	return 0;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <_isatty>:

int _isatty(int file)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
	return 1;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
	return 0;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
	...

08001088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <_sbrk+0x5c>)
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <_sbrk+0x60>)
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <_sbrk+0x64>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <_sbrk+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d207      	bcs.n	80010c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b8:	f003 f92e 	bl	8004318 <__errno>
 80010bc:	4602      	mov	r2, r0
 80010be:	230c      	movs	r3, #12
 80010c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	e009      	b.n	80010dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <_sbrk+0x64>)
 80010d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20014000 	.word	0x20014000
 80010e8:	00000400 	.word	0x00000400
 80010ec:	20000090 	.word	0x20000090
 80010f0:	20000220 	.word	0x20000220

080010f4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <SystemInit+0x14>)
 80010fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800110c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800110e:	e003      	b.n	8001118 <LoopCopyDataInit>

08001110 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001112:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001114:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001116:	3104      	adds	r1, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001118:	480a      	ldr	r0, [pc, #40]	; (8001144 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800111c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800111e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001120:	d3f6      	bcc.n	8001110 <CopyDataInit>
  ldr r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001124:	e002      	b.n	800112c <LoopFillZerobss>

08001126 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001128:	f842 3b04 	str.w	r3, [r2], #4

0800112c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800112e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001130:	d3f9      	bcc.n	8001126 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001132:	f7ff ffdf 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001136:	f003 f8f5 	bl	8004324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800113a:	f7ff f9ef 	bl	800051c <main>
  bx lr
 800113e:	4770      	bx	lr
  ldr r3, =_sidata
 8001140:	0800525c 	.word	0x0800525c
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001148:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800114c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001150:	2000021c 	.word	0x2000021c

08001154 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC1_IRQHandler>

08001156 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 fd97 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001166:	2000      	movs	r0, #0
 8001168:	f000 f80e 	bl	8001188 <HAL_InitTick>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	71fb      	strb	r3, [r7, #7]
 8001176:	e001      	b.n	800117c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001178:	f7ff fd12 	bl	8000ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800117c:	79fb      	ldrb	r3, [r7, #7]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_InitTick+0x68>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d022      	beq.n	80011e2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_InitTick+0x6c>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <HAL_InitTick+0x68>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fda4 	bl	8001cfe <HAL_SYSTICK_Config>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10f      	bne.n	80011dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	d809      	bhi.n	80011d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c2:	2200      	movs	r2, #0
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ca:	f000 fd6e 	bl	8001caa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_InitTick+0x70>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e007      	b.n	80011e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	e004      	b.n	80011e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e001      	b.n	80011e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_IncTick+0x1c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_IncTick+0x20>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4413      	add	r3, r2
 800120a:	4a03      	ldr	r2, [pc, #12]	; (8001218 <HAL_IncTick+0x1c>)
 800120c:	6013      	str	r3, [r2, #0]
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000214 	.word	0x20000214
 800121c:	20000008 	.word	0x20000008

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b02      	ldr	r3, [pc, #8]	; (8001230 <HAL_GetTick+0x10>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	20000214 	.word	0x20000214

08001234 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e127      	b.n	80014a4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	2b00      	cmp	r3, #0
 8001260:	d115      	bne.n	800128e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001270:	4b8e      	ldr	r3, [pc, #568]	; (80014ac <HAL_ADC_Init+0x278>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4a8d      	ldr	r2, [pc, #564]	; (80014ac <HAL_ADC_Init+0x278>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6213      	str	r3, [r2, #32]
 800127c:	4b8b      	ldr	r3, [pc, #556]	; (80014ac <HAL_ADC_Init+0x278>)
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff fcb7 	bl	8000bfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	2b00      	cmp	r3, #0
 8001298:	f040 80ff 	bne.w	800149a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012a4:	f023 0302 	bic.w	r3, r3, #2
 80012a8:	f043 0202 	orr.w	r2, r3, #2
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80012b0:	4b7f      	ldr	r3, [pc, #508]	; (80014b0 <HAL_ADC_Init+0x27c>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	497c      	ldr	r1, [pc, #496]	; (80014b0 <HAL_ADC_Init+0x27c>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80012ca:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012d2:	4619      	mov	r1, r3
 80012d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d8:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	fa93 f3a3 	rbit	r3, r3
 80012e0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fab3 f383 	clz	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80012ee:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80012f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012fc:	4619      	mov	r1, r3
 80012fe:	2302      	movs	r3, #2
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001304:	fa93 f3a3 	rbit	r3, r3
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	fab3 f383 	clz	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001316:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800131a:	4313      	orrs	r3, r2
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001322:	2b10      	cmp	r3, #16
 8001324:	d007      	beq.n	8001336 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800132e:	4313      	orrs	r3, r2
 8001330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001332:	4313      	orrs	r3, r2
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001340:	2b40      	cmp	r3, #64	; 0x40
 8001342:	d04f      	beq.n	80013e4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800134a:	4313      	orrs	r3, r2
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001356:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6912      	ldr	r2, [r2, #16]
 800135c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001360:	d003      	beq.n	800136a <HAL_ADC_Init+0x136>
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6912      	ldr	r2, [r2, #16]
 8001366:	2a01      	cmp	r2, #1
 8001368:	d102      	bne.n	8001370 <HAL_ADC_Init+0x13c>
 800136a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136e:	e000      	b.n	8001372 <HAL_ADC_Init+0x13e>
 8001370:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001372:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001376:	4313      	orrs	r3, r2
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001380:	2b01      	cmp	r3, #1
 8001382:	d125      	bne.n	80013d0 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800138a:	2b00      	cmp	r3, #0
 800138c:	d114      	bne.n	80013b8 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	3b01      	subs	r3, #1
 8001394:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001398:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	fa92 f2a2 	rbit	r2, r2
 80013a0:	617a      	str	r2, [r7, #20]
  return result;
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	fab2 f282 	clz	r2, r2
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	4093      	lsls	r3, r2
 80013ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013b2:	4313      	orrs	r3, r2
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
 80013b6:	e00b      	b.n	80013d0 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	f043 0220 	orr.w	r2, r3, #32
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013c8:	f043 0201 	orr.w	r2, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4b37      	ldr	r3, [pc, #220]	; (80014b4 <HAL_ADC_Init+0x280>)
 80013d8:	4013      	ands	r3, r2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80013e0:	430b      	orrs	r3, r1
 80013e2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <HAL_ADC_Init+0x284>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013f4:	430b      	orrs	r3, r1
 80013f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001400:	d003      	beq.n	800140a <HAL_ADC_Init+0x1d6>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d119      	bne.n	800143e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	3b01      	subs	r3, #1
 800141a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800141e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	fa92 f2a2 	rbit	r2, r2
 8001426:	60fa      	str	r2, [r7, #12]
  return result;
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	fab2 f282 	clz	r2, r2
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	fa03 f202 	lsl.w	r2, r3, r2
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	631a      	str	r2, [r3, #48]	; 0x30
 800143c:	e007      	b.n	800144e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800144c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <HAL_ADC_Init+0x288>)
 8001456:	4013      	ands	r3, r2
 8001458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800145a:	429a      	cmp	r2, r3
 800145c:	d10b      	bne.n	8001476 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001468:	f023 0303 	bic.w	r3, r3, #3
 800146c:	f043 0201 	orr.w	r2, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	64da      	str	r2, [r3, #76]	; 0x4c
 8001474:	e014      	b.n	80014a0 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f023 0312 	bic.w	r3, r3, #18
 800147e:	f043 0210 	orr.w	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001498:	e002      	b.n	80014a0 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3738      	adds	r7, #56	; 0x38
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40012700 	.word	0x40012700
 80014b4:	fcfc16ff 	.word	0xfcfc16ff
 80014b8:	c0fff189 	.word	0xc0fff189
 80014bc:	bf80fffe 	.word	0xbf80fffe

080014c0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d101      	bne.n	80014da <HAL_ADC_Start+0x1a>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e04e      	b.n	8001578 <HAL_ADC_Start+0xb8>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fa7a 	bl	80019dc <ADC_Enable>
 80014e8:	4603      	mov	r3, r0
 80014ea:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d141      	bne.n	8001576 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001510:	2b00      	cmp	r3, #0
 8001512:	d007      	beq.n	8001524 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001518:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800151c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800152c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001530:	d106      	bne.n	8001540 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001536:	f023 0206 	bic.w	r2, r3, #6
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	651a      	str	r2, [r3, #80]	; 0x50
 800153e:	e002      	b.n	8001546 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001556:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d107      	bne.n	8001576 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001574:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001592:	2b01      	cmp	r3, #1
 8001594:	d101      	bne.n	800159a <HAL_ADC_Stop+0x1a>
 8001596:	2302      	movs	r3, #2
 8001598:	e01a      	b.n	80015d0 <HAL_ADC_Stop+0x50>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 fa70 	bl	8001a88 <ADC_ConversionStop_Disable>
 80015a8:	4603      	mov	r3, r0
 80015aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f4:	d113      	bne.n	800161e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001604:	d10b      	bne.n	800161e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f043 0220 	orr.w	r2, r3, #32
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e061      	b.n	80016e2 <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800161e:	f7ff fdff 	bl	8001220 <HAL_GetTick>
 8001622:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001624:	e01a      	b.n	800165c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d016      	beq.n	800165c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d007      	beq.n	8001644 <HAL_ADC_PollForConversion+0x6c>
 8001634:	f7ff fdf4 	bl	8001220 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d20b      	bcs.n	800165c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	f043 0204 	orr.w	r2, r3, #4
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e042      	b.n	80016e2 <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0dd      	beq.n	8001626 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d104      	bne.n	800167c <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f06f 0212 	mvn.w	r2, #18
 800167a:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001680:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d124      	bne.n	80016e0 <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800169c:	2b00      	cmp	r3, #0
 800169e:	d11f      	bne.n	80016e0 <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d111      	bne.n	80016e0 <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	f043 0201 	orr.w	r2, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
	...

08001704 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x20>
 8001720:	2302      	movs	r3, #2
 8001722:	e14f      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x2c0>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b06      	cmp	r3, #6
 8001732:	d81c      	bhi.n	800176e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	3b05      	subs	r3, #5
 8001746:	221f      	movs	r2, #31
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	4019      	ands	r1, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	3b05      	subs	r3, #5
 8001760:	fa00 f203 	lsl.w	r2, r0, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	641a      	str	r2, [r3, #64]	; 0x40
 800176c:	e07e      	b.n	800186c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b0c      	cmp	r3, #12
 8001774:	d81c      	bhi.n	80017b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b23      	subs	r3, #35	; 0x23
 8001788:	221f      	movs	r2, #31
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	4019      	ands	r1, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	3b23      	subs	r3, #35	; 0x23
 80017a2:	fa00 f203 	lsl.w	r2, r0, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80017ae:	e05d      	b.n	800186c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b12      	cmp	r3, #18
 80017b6:	d81c      	bhi.n	80017f2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	3b41      	subs	r3, #65	; 0x41
 80017ca:	221f      	movs	r2, #31
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	4019      	ands	r1, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	6818      	ldr	r0, [r3, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	3b41      	subs	r3, #65	; 0x41
 80017e4:	fa00 f203 	lsl.w	r2, r0, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	639a      	str	r2, [r3, #56]	; 0x38
 80017f0:	e03c      	b.n	800186c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b18      	cmp	r3, #24
 80017f8:	d81c      	bhi.n	8001834 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	3b5f      	subs	r3, #95	; 0x5f
 800180c:	221f      	movs	r2, #31
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	4019      	ands	r1, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	3b5f      	subs	r3, #95	; 0x5f
 8001826:	fa00 f203 	lsl.w	r2, r0, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	635a      	str	r2, [r3, #52]	; 0x34
 8001832:	e01b      	b.n	800186c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	3b7d      	subs	r3, #125	; 0x7d
 8001846:	221f      	movs	r2, #31
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	4019      	ands	r1, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	3b7d      	subs	r3, #125	; 0x7d
 8001860:	fa00 f203 	lsl.w	r2, r0, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b09      	cmp	r3, #9
 8001872:	d81a      	bhi.n	80018aa <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6959      	ldr	r1, [r3, #20]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	2207      	movs	r2, #7
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	4019      	ands	r1, r3
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	6898      	ldr	r0, [r3, #8]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	fa00 f203 	lsl.w	r2, r0, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	615a      	str	r2, [r3, #20]
 80018a8:	e05d      	b.n	8001966 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b13      	cmp	r3, #19
 80018b0:	d81c      	bhi.n	80018ec <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6919      	ldr	r1, [r3, #16]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	3b1e      	subs	r3, #30
 80018c4:	2207      	movs	r2, #7
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	4019      	ands	r1, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	6898      	ldr	r0, [r3, #8]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	3b1e      	subs	r3, #30
 80018de:	fa00 f203 	lsl.w	r2, r0, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	e03c      	b.n	8001966 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b1d      	cmp	r3, #29
 80018f2:	d81c      	bhi.n	800192e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68d9      	ldr	r1, [r3, #12]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	3b3c      	subs	r3, #60	; 0x3c
 8001906:	2207      	movs	r2, #7
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	4019      	ands	r1, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	6898      	ldr	r0, [r3, #8]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	3b3c      	subs	r3, #60	; 0x3c
 8001920:	fa00 f203 	lsl.w	r2, r0, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	e01b      	b.n	8001966 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	3b5a      	subs	r3, #90	; 0x5a
 8001940:	2207      	movs	r2, #7
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	4019      	ands	r1, r3
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	6898      	ldr	r0, [r3, #8]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	3b5a      	subs	r3, #90	; 0x5a
 800195a:	fa00 f203 	lsl.w	r2, r0, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b10      	cmp	r3, #16
 800196c:	d003      	beq.n	8001976 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001972:	2b11      	cmp	r3, #17
 8001974:	d121      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_ADC_ConfigChannel+0x2cc>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d11b      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_ADC_ConfigChannel+0x2cc>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <HAL_ADC_ConfigChannel+0x2cc>)
 8001988:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800198c:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b10      	cmp	r3, #16
 8001994:	d111      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_ADC_ConfigChannel+0x2d0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a0f      	ldr	r2, [pc, #60]	; (80019d8 <HAL_ADC_ConfigChannel+0x2d4>)
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	0c9a      	lsrs	r2, r3, #18
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80019ac:	e002      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f9      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40012700 	.word	0x40012700
 80019d4:	20000000 	.word	0x20000000
 80019d8:	431bde83 	.word	0x431bde83

080019dc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	2b40      	cmp	r3, #64	; 0x40
 80019f8:	d03c      	beq.n	8001a74 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0201 	orr.w	r2, r2, #1
 8001a08:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <ADC_Enable+0xa4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <ADC_Enable+0xa8>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	0c9a      	lsrs	r2, r3, #18
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001a1e:	e002      	b.n	8001a26 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f9      	bne.n	8001a20 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001a2c:	f7ff fbf8 	bl	8001220 <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a32:	e018      	b.n	8001a66 <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001a34:	f7ff fbf4 	bl	8001220 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d911      	bls.n	8001a66 <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	f043 0210 	orr.w	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e007      	b.n	8001a76 <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a70:	2b40      	cmp	r3, #64	; 0x40
 8001a72:	d1df      	bne.n	8001a34 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000000 	.word	0x20000000
 8001a84:	431bde83 	.word	0x431bde83

08001a88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9e:	2b40      	cmp	r3, #64	; 0x40
 8001aa0:	d127      	bne.n	8001af2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0201 	bic.w	r2, r2, #1
 8001ab0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ab2:	f7ff fbb5 	bl	8001220 <HAL_GetTick>
 8001ab6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ab8:	e014      	b.n	8001ae4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8001aba:	f7ff fbb1 	bl	8001220 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d90d      	bls.n	8001ae4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001acc:	f043 0210 	orr.w	r2, r3, #16
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	651a      	str	r2, [r3, #80]	; 0x50
        
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e007      	b.n	8001af4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aee:	2b40      	cmp	r3, #64	; 0x40
 8001af0:	d0e3      	beq.n	8001aba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4906      	ldr	r1, [pc, #24]	; (8001b94 <__NVIC_EnableIRQ+0x34>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	; (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ff90 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff2d 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff42 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff90 	bl	8001bec <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5f 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff35 	bl	8001b60 <__NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffa2 	bl	8001c50 <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d2e:	e160      	b.n	8001ff2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8152 	beq.w	8001fec <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d00b      	beq.n	8001d68 <HAL_GPIO_Init+0x50>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d007      	beq.n	8001d68 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d5c:	2b11      	cmp	r3, #17
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b12      	cmp	r3, #18
 8001d66:	d130      	bne.n	8001dca <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001d9e:	2201      	movs	r2, #1
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	091b      	lsrs	r3, r3, #4
 8001db4:	f003 0201 	and.w	r2, r3, #1
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0xf2>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b12      	cmp	r3, #18
 8001e08:	d123      	bne.n	8001e52 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e16:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	6939      	ldr	r1, [r7, #16]
 8001e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0203 	and.w	r2, r3, #3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80ac 	beq.w	8001fec <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	4b5d      	ldr	r3, [pc, #372]	; (800200c <HAL_GPIO_Init+0x2f4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4a5c      	ldr	r2, [pc, #368]	; (800200c <HAL_GPIO_Init+0x2f4>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6213      	str	r3, [r2, #32]
 8001ea0:	4b5a      	ldr	r3, [pc, #360]	; (800200c <HAL_GPIO_Init+0x2f4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001eac:	4a58      	ldr	r2, [pc, #352]	; (8002010 <HAL_GPIO_Init+0x2f8>)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a50      	ldr	r2, [pc, #320]	; (8002014 <HAL_GPIO_Init+0x2fc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d025      	beq.n	8001f24 <HAL_GPIO_Init+0x20c>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a4f      	ldr	r2, [pc, #316]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d01f      	beq.n	8001f20 <HAL_GPIO_Init+0x208>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a4e      	ldr	r2, [pc, #312]	; (800201c <HAL_GPIO_Init+0x304>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d019      	beq.n	8001f1c <HAL_GPIO_Init+0x204>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a4d      	ldr	r2, [pc, #308]	; (8002020 <HAL_GPIO_Init+0x308>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d013      	beq.n	8001f18 <HAL_GPIO_Init+0x200>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a4c      	ldr	r2, [pc, #304]	; (8002024 <HAL_GPIO_Init+0x30c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00d      	beq.n	8001f14 <HAL_GPIO_Init+0x1fc>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a4b      	ldr	r2, [pc, #300]	; (8002028 <HAL_GPIO_Init+0x310>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <HAL_GPIO_Init+0x1f8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a4a      	ldr	r2, [pc, #296]	; (800202c <HAL_GPIO_Init+0x314>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_GPIO_Init+0x1f4>
 8001f08:	2306      	movs	r3, #6
 8001f0a:	e00c      	b.n	8001f26 <HAL_GPIO_Init+0x20e>
 8001f0c:	2307      	movs	r3, #7
 8001f0e:	e00a      	b.n	8001f26 <HAL_GPIO_Init+0x20e>
 8001f10:	2305      	movs	r3, #5
 8001f12:	e008      	b.n	8001f26 <HAL_GPIO_Init+0x20e>
 8001f14:	2304      	movs	r3, #4
 8001f16:	e006      	b.n	8001f26 <HAL_GPIO_Init+0x20e>
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e004      	b.n	8001f26 <HAL_GPIO_Init+0x20e>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e002      	b.n	8001f26 <HAL_GPIO_Init+0x20e>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_GPIO_Init+0x20e>
 8001f24:	2300      	movs	r3, #0
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	f002 0203 	and.w	r2, r2, #3
 8001f2c:	0092      	lsls	r2, r2, #2
 8001f2e:	4093      	lsls	r3, r2
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f36:	4936      	ldr	r1, [pc, #216]	; (8002010 <HAL_GPIO_Init+0x2f8>)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f44:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <HAL_GPIO_Init+0x318>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f68:	4a31      	ldr	r2, [pc, #196]	; (8002030 <HAL_GPIO_Init+0x318>)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f6e:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_GPIO_Init+0x318>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f92:	4a27      	ldr	r2, [pc, #156]	; (8002030 <HAL_GPIO_Init+0x318>)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f98:	4b25      	ldr	r3, [pc, #148]	; (8002030 <HAL_GPIO_Init+0x318>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_GPIO_Init+0x318>)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_GPIO_Init+0x318>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fe6:	4a12      	ldr	r2, [pc, #72]	; (8002030 <HAL_GPIO_Init+0x318>)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f47f ae97 	bne.w	8001d30 <HAL_GPIO_Init+0x18>
  }
}
 8002002:	bf00      	nop
 8002004:	371c      	adds	r7, #28
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	40023800 	.word	0x40023800
 8002010:	40010000 	.word	0x40010000
 8002014:	40020000 	.word	0x40020000
 8002018:	40020400 	.word	0x40020400
 800201c:	40020800 	.word	0x40020800
 8002020:	40020c00 	.word	0x40020c00
 8002024:	40021000 	.word	0x40021000
 8002028:	40021400 	.word	0x40021400
 800202c:	40021800 	.word	0x40021800
 8002030:	40010400 	.word	0x40010400

08002034 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	e001      	b.n	8002056 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	807b      	strh	r3, [r7, #2]
 800206e:	4613      	mov	r3, r2
 8002070:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002072:	787b      	ldrb	r3, [r7, #1]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002078:	887a      	ldrh	r2, [r7, #2]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800207e:	e003      	b.n	8002088 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	041a      	lsls	r2, r3, #16
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	619a      	str	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
	...

08002094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e31d      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a6:	4b94      	ldr	r3, [pc, #592]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020b0:	4b91      	ldr	r3, [pc, #580]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d07b      	beq.n	80021be <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d006      	beq.n	80020da <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d10f      	bne.n	80020f2 <HAL_RCC_OscConfig+0x5e>
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d8:	d10b      	bne.n	80020f2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020da:	4b87      	ldr	r3, [pc, #540]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d06a      	beq.n	80021bc <HAL_RCC_OscConfig+0x128>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d166      	bne.n	80021bc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e2f7      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d106      	bne.n	8002108 <HAL_RCC_OscConfig+0x74>
 80020fa:	4b7f      	ldr	r3, [pc, #508]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7e      	ldr	r2, [pc, #504]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e02d      	b.n	8002164 <HAL_RCC_OscConfig+0xd0>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10c      	bne.n	800212a <HAL_RCC_OscConfig+0x96>
 8002110:	4b79      	ldr	r3, [pc, #484]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a78      	ldr	r2, [pc, #480]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 8002116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	4b76      	ldr	r3, [pc, #472]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a75      	ldr	r2, [pc, #468]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 8002122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	e01c      	b.n	8002164 <HAL_RCC_OscConfig+0xd0>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b05      	cmp	r3, #5
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0xb8>
 8002132:	4b71      	ldr	r3, [pc, #452]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a70      	ldr	r2, [pc, #448]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b6e      	ldr	r3, [pc, #440]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a6d      	ldr	r2, [pc, #436]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0xd0>
 800214c:	4b6a      	ldr	r3, [pc, #424]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a69      	ldr	r2, [pc, #420]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 8002152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b67      	ldr	r3, [pc, #412]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a66      	ldr	r2, [pc, #408]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 800215e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff f858 	bl	8001220 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff f854 	bl	8001220 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e2ad      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002186:	4b5c      	ldr	r3, [pc, #368]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0xe0>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff f844 	bl	8001220 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800219c:	f7ff f840 	bl	8001220 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e299      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021ae:	4b52      	ldr	r3, [pc, #328]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x108>
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d05a      	beq.n	8002280 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2b0c      	cmp	r3, #12
 80021d4:	d119      	bne.n	800220a <HAL_RCC_OscConfig+0x176>
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d116      	bne.n	800220a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021dc:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_OscConfig+0x160>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e276      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f4:	4b40      	ldr	r3, [pc, #256]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	493d      	ldr	r1, [pc, #244]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002208:	e03a      	b.n	8002280 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d020      	beq.n	8002254 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002212:	4b3a      	ldr	r3, [pc, #232]	; (80022fc <HAL_RCC_OscConfig+0x268>)
 8002214:	2201      	movs	r2, #1
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff f802 	bl	8001220 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002220:	f7fe fffe 	bl	8001220 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e257      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002232:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223e:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	021b      	lsls	r3, r3, #8
 800224c:	492a      	ldr	r1, [pc, #168]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
 8002252:	e015      	b.n	8002280 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002254:	4b29      	ldr	r3, [pc, #164]	; (80022fc <HAL_RCC_OscConfig+0x268>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe ffe1 	bl	8001220 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002262:	f7fe ffdd 	bl	8001220 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e236      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80b8 	beq.w	80023fe <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d170      	bne.n	8002376 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002294:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <HAL_RCC_OscConfig+0x218>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e21a      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1a      	ldr	r2, [r3, #32]
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d921      	bls.n	8002300 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fc47 	bl	8002b54 <RCC_SetFlashLatencyFromMSIRange>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e208      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4906      	ldr	r1, [pc, #24]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	061b      	lsls	r3, r3, #24
 80022f0:	4901      	ldr	r1, [pc, #4]	; (80022f8 <HAL_RCC_OscConfig+0x264>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
 80022f6:	e020      	b.n	800233a <HAL_RCC_OscConfig+0x2a6>
 80022f8:	40023800 	.word	0x40023800
 80022fc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002300:	4ba4      	ldr	r3, [pc, #656]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	49a1      	ldr	r1, [pc, #644]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002312:	4ba0      	ldr	r3, [pc, #640]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	061b      	lsls	r3, r3, #24
 8002320:	499c      	ldr	r1, [pc, #624]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002322:	4313      	orrs	r3, r2
 8002324:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fc12 	bl	8002b54 <RCC_SetFlashLatencyFromMSIRange>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e1d3      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	0b5b      	lsrs	r3, r3, #13
 8002340:	3301      	adds	r3, #1
 8002342:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800234a:	4a92      	ldr	r2, [pc, #584]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 800234c:	6892      	ldr	r2, [r2, #8]
 800234e:	0912      	lsrs	r2, r2, #4
 8002350:	f002 020f 	and.w	r2, r2, #15
 8002354:	4990      	ldr	r1, [pc, #576]	; (8002598 <HAL_RCC_OscConfig+0x504>)
 8002356:	5c8a      	ldrb	r2, [r1, r2]
 8002358:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800235a:	4a90      	ldr	r2, [pc, #576]	; (800259c <HAL_RCC_OscConfig+0x508>)
 800235c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800235e:	4b90      	ldr	r3, [pc, #576]	; (80025a0 <HAL_RCC_OscConfig+0x50c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe ff10 	bl	8001188 <HAL_InitTick>
 8002368:	4603      	mov	r3, r0
 800236a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d045      	beq.n	80023fe <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	e1b5      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d029      	beq.n	80023d2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800237e:	4b89      	ldr	r3, [pc, #548]	; (80025a4 <HAL_RCC_OscConfig+0x510>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe ff4c 	bl	8001220 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800238c:	f7fe ff48 	bl	8001220 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1a1      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800239e:	4b7d      	ldr	r3, [pc, #500]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023aa:	4b7a      	ldr	r3, [pc, #488]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4977      	ldr	r1, [pc, #476]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023bc:	4b75      	ldr	r3, [pc, #468]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	061b      	lsls	r3, r3, #24
 80023ca:	4972      	ldr	r1, [pc, #456]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
 80023d0:	e015      	b.n	80023fe <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023d2:	4b74      	ldr	r3, [pc, #464]	; (80025a4 <HAL_RCC_OscConfig+0x510>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7fe ff22 	bl	8001220 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e0:	f7fe ff1e 	bl	8001220 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e177      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023f2:	4b68      	ldr	r3, [pc, #416]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d030      	beq.n	800246c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002412:	4b65      	ldr	r3, [pc, #404]	; (80025a8 <HAL_RCC_OscConfig+0x514>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002418:	f7fe ff02 	bl	8001220 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002420:	f7fe fefe 	bl	8001220 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e157      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002432:	4b58      	ldr	r3, [pc, #352]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x38c>
 800243e:	e015      	b.n	800246c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002440:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_RCC_OscConfig+0x514>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7fe feeb 	bl	8001220 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244e:	f7fe fee7 	bl	8001220 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e140      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002460:	4b4c      	ldr	r3, [pc, #304]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80b5 	beq.w	80025e4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800247e:	4b45      	ldr	r3, [pc, #276]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10d      	bne.n	80024a6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248a:	4b42      	ldr	r3, [pc, #264]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	4a41      	ldr	r2, [pc, #260]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002494:	6253      	str	r3, [r2, #36]	; 0x24
 8002496:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a2:	2301      	movs	r3, #1
 80024a4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a6:	4b41      	ldr	r3, [pc, #260]	; (80025ac <HAL_RCC_OscConfig+0x518>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d118      	bne.n	80024e4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b2:	4b3e      	ldr	r3, [pc, #248]	; (80025ac <HAL_RCC_OscConfig+0x518>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a3d      	ldr	r2, [pc, #244]	; (80025ac <HAL_RCC_OscConfig+0x518>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024be:	f7fe feaf 	bl	8001220 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c6:	f7fe feab 	bl	8001220 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b64      	cmp	r3, #100	; 0x64
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e104      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d8:	4b34      	ldr	r3, [pc, #208]	; (80025ac <HAL_RCC_OscConfig+0x518>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x466>
 80024ec:	4b29      	ldr	r3, [pc, #164]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f0:	4a28      	ldr	r2, [pc, #160]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f6:	6353      	str	r3, [r2, #52]	; 0x34
 80024f8:	e02d      	b.n	8002556 <HAL_RCC_OscConfig+0x4c2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x488>
 8002502:	4b24      	ldr	r3, [pc, #144]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002506:	4a23      	ldr	r2, [pc, #140]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800250c:	6353      	str	r3, [r2, #52]	; 0x34
 800250e:	4b21      	ldr	r3, [pc, #132]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002512:	4a20      	ldr	r2, [pc, #128]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002514:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002518:	6353      	str	r3, [r2, #52]	; 0x34
 800251a:	e01c      	b.n	8002556 <HAL_RCC_OscConfig+0x4c2>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d10c      	bne.n	800253e <HAL_RCC_OscConfig+0x4aa>
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002528:	4a1a      	ldr	r2, [pc, #104]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 800252a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800252e:	6353      	str	r3, [r2, #52]	; 0x34
 8002530:	4b18      	ldr	r3, [pc, #96]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002534:	4a17      	ldr	r2, [pc, #92]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253a:	6353      	str	r3, [r2, #52]	; 0x34
 800253c:	e00b      	b.n	8002556 <HAL_RCC_OscConfig+0x4c2>
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	4a14      	ldr	r2, [pc, #80]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002548:	6353      	str	r3, [r2, #52]	; 0x34
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 800254c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254e:	4a11      	ldr	r2, [pc, #68]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002554:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d015      	beq.n	800258a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fe5f 	bl	8001220 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe fe5b 	bl	8001220 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0b2      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 800257e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ee      	beq.n	8002566 <HAL_RCC_OscConfig+0x4d2>
 8002588:	e023      	b.n	80025d2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7fe fe49 	bl	8001220 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002590:	e019      	b.n	80025c6 <HAL_RCC_OscConfig+0x532>
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	0800519c 	.word	0x0800519c
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000004 	.word	0x20000004
 80025a4:	42470020 	.word	0x42470020
 80025a8:	42470680 	.word	0x42470680
 80025ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b0:	f7fe fe36 	bl	8001220 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e08d      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025c6:	4b49      	ldr	r3, [pc, #292]	; (80026ec <HAL_RCC_OscConfig+0x658>)
 80025c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1ee      	bne.n	80025b0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025d2:	7ffb      	ldrb	r3, [r7, #31]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d8:	4b44      	ldr	r3, [pc, #272]	; (80026ec <HAL_RCC_OscConfig+0x658>)
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	4a43      	ldr	r2, [pc, #268]	; (80026ec <HAL_RCC_OscConfig+0x658>)
 80025de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d079      	beq.n	80026e0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d056      	beq.n	80026a0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d13b      	bne.n	8002672 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fa:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <HAL_RCC_OscConfig+0x65c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe fe0e 	bl	8001220 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002608:	f7fe fe0a 	bl	8001220 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e063      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800261a:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_RCC_OscConfig+0x658>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002626:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_RCC_OscConfig+0x658>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	4319      	orrs	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	430b      	orrs	r3, r1
 800263e:	492b      	ldr	r1, [pc, #172]	; (80026ec <HAL_RCC_OscConfig+0x658>)
 8002640:	4313      	orrs	r3, r2
 8002642:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002644:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <HAL_RCC_OscConfig+0x65c>)
 8002646:	2201      	movs	r2, #1
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264a:	f7fe fde9 	bl	8001220 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002652:	f7fe fde5 	bl	8001220 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e03e      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002664:	4b21      	ldr	r3, [pc, #132]	; (80026ec <HAL_RCC_OscConfig+0x658>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x5be>
 8002670:	e036      	b.n	80026e0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002672:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <HAL_RCC_OscConfig+0x65c>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe fdd2 	bl	8001220 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe fdce 	bl	8001220 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e027      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002692:	4b16      	ldr	r3, [pc, #88]	; (80026ec <HAL_RCC_OscConfig+0x658>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x5ec>
 800269e:	e01f      	b.n	80026e0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e01a      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026ac:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <HAL_RCC_OscConfig+0x658>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	429a      	cmp	r2, r3
 80026be:	d10d      	bne.n	80026dc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d106      	bne.n	80026dc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3720      	adds	r7, #32
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	42470060 	.word	0x42470060

080026f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e11a      	b.n	800293e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002708:	4b8f      	ldr	r3, [pc, #572]	; (8002948 <HAL_RCC_ClockConfig+0x254>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d919      	bls.n	800274a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d105      	bne.n	8002728 <HAL_RCC_ClockConfig+0x34>
 800271c:	4b8a      	ldr	r3, [pc, #552]	; (8002948 <HAL_RCC_ClockConfig+0x254>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a89      	ldr	r2, [pc, #548]	; (8002948 <HAL_RCC_ClockConfig+0x254>)
 8002722:	f043 0304 	orr.w	r3, r3, #4
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b87      	ldr	r3, [pc, #540]	; (8002948 <HAL_RCC_ClockConfig+0x254>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 0201 	bic.w	r2, r3, #1
 8002730:	4985      	ldr	r1, [pc, #532]	; (8002948 <HAL_RCC_ClockConfig+0x254>)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002738:	4b83      	ldr	r3, [pc, #524]	; (8002948 <HAL_RCC_ClockConfig+0x254>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d001      	beq.n	800274a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0f9      	b.n	800293e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d008      	beq.n	8002768 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002756:	4b7d      	ldr	r3, [pc, #500]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	497a      	ldr	r1, [pc, #488]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 8002764:	4313      	orrs	r3, r2
 8002766:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 808e 	beq.w	8002892 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800277e:	4b73      	ldr	r3, [pc, #460]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d121      	bne.n	80027ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e0d7      	b.n	800293e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b03      	cmp	r3, #3
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002796:	4b6d      	ldr	r3, [pc, #436]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d115      	bne.n	80027ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e0cb      	b.n	800293e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ae:	4b67      	ldr	r3, [pc, #412]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0bf      	b.n	800293e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027be:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e0b7      	b.n	800293e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ce:	4b5f      	ldr	r3, [pc, #380]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	495c      	ldr	r1, [pc, #368]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e0:	f7fe fd1e 	bl	8001220 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d112      	bne.n	8002814 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7fe fd16 	bl	8001220 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e09b      	b.n	800293e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002806:	4b51      	ldr	r3, [pc, #324]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b08      	cmp	r3, #8
 8002810:	d1ee      	bne.n	80027f0 <HAL_RCC_ClockConfig+0xfc>
 8002812:	e03e      	b.n	8002892 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d112      	bne.n	8002842 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800281c:	e00a      	b.n	8002834 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281e:	f7fe fcff 	bl	8001220 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	; 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e084      	b.n	800293e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002834:	4b45      	ldr	r3, [pc, #276]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b0c      	cmp	r3, #12
 800283e:	d1ee      	bne.n	800281e <HAL_RCC_ClockConfig+0x12a>
 8002840:	e027      	b.n	8002892 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d11d      	bne.n	8002886 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800284a:	e00a      	b.n	8002862 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284c:	f7fe fce8 	bl	8001220 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	; 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e06d      	b.n	800293e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002862:	4b3a      	ldr	r3, [pc, #232]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b04      	cmp	r3, #4
 800286c:	d1ee      	bne.n	800284c <HAL_RCC_ClockConfig+0x158>
 800286e:	e010      	b.n	8002892 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002870:	f7fe fcd6 	bl	8001220 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e05b      	b.n	800293e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002886:	4b31      	ldr	r3, [pc, #196]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1ee      	bne.n	8002870 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002892:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <HAL_RCC_ClockConfig+0x254>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d219      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <HAL_RCC_ClockConfig+0x1be>
 80028a6:	4b28      	ldr	r3, [pc, #160]	; (8002948 <HAL_RCC_ClockConfig+0x254>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a27      	ldr	r2, [pc, #156]	; (8002948 <HAL_RCC_ClockConfig+0x254>)
 80028ac:	f043 0304 	orr.w	r3, r3, #4
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b25      	ldr	r3, [pc, #148]	; (8002948 <HAL_RCC_ClockConfig+0x254>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 0201 	bic.w	r2, r3, #1
 80028ba:	4923      	ldr	r1, [pc, #140]	; (8002948 <HAL_RCC_ClockConfig+0x254>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b21      	ldr	r3, [pc, #132]	; (8002948 <HAL_RCC_ClockConfig+0x254>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e034      	b.n	800293e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4917      	ldr	r1, [pc, #92]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fe:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	490f      	ldr	r1, [pc, #60]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002912:	f000 f823 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8002916:	4601      	mov	r1, r0
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <HAL_RCC_ClockConfig+0x258>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <HAL_RCC_ClockConfig+0x25c>)
 8002924:	5cd3      	ldrb	r3, [r2, r3]
 8002926:	fa21 f303 	lsr.w	r3, r1, r3
 800292a:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <HAL_RCC_ClockConfig+0x260>)
 800292c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fc28 	bl	8001188 <HAL_InitTick>
 8002938:	4603      	mov	r3, r0
 800293a:	72fb      	strb	r3, [r7, #11]

  return status;
 800293c:	7afb      	ldrb	r3, [r7, #11]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023c00 	.word	0x40023c00
 800294c:	40023800 	.word	0x40023800
 8002950:	0800519c 	.word	0x0800519c
 8002954:	20000000 	.word	0x20000000
 8002958:	20000004 	.word	0x20000004

0800295c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002962:	4b5f      	ldr	r3, [pc, #380]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b08      	cmp	r3, #8
 8002970:	d007      	beq.n	8002982 <HAL_RCC_GetSysClockFreq+0x26>
 8002972:	2b0c      	cmp	r3, #12
 8002974:	d008      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x2c>
 8002976:	2b04      	cmp	r3, #4
 8002978:	f040 809f 	bne.w	8002aba <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800297c:	4b59      	ldr	r3, [pc, #356]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 800297e:	613b      	str	r3, [r7, #16]
      break;
 8002980:	e0a9      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002982:	4b59      	ldr	r3, [pc, #356]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002984:	613b      	str	r3, [r7, #16]
      break;
 8002986:	e0a6      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	0c9b      	lsrs	r3, r3, #18
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	4a56      	ldr	r2, [pc, #344]	; (8002aec <HAL_RCC_GetSysClockFreq+0x190>)
 8002992:	5cd3      	ldrb	r3, [r2, r3]
 8002994:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	0d9b      	lsrs	r3, r3, #22
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	3301      	adds	r3, #1
 80029a0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029a2:	4b4f      	ldr	r3, [pc, #316]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d041      	beq.n	8002a32 <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	461d      	mov	r5, r3
 80029b2:	f04f 0600 	mov.w	r6, #0
 80029b6:	4629      	mov	r1, r5
 80029b8:	4632      	mov	r2, r6
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	f04f 0400 	mov.w	r4, #0
 80029c2:	0154      	lsls	r4, r2, #5
 80029c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029c8:	014b      	lsls	r3, r1, #5
 80029ca:	4619      	mov	r1, r3
 80029cc:	4622      	mov	r2, r4
 80029ce:	1b49      	subs	r1, r1, r5
 80029d0:	eb62 0206 	sbc.w	r2, r2, r6
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	f04f 0400 	mov.w	r4, #0
 80029dc:	0194      	lsls	r4, r2, #6
 80029de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029e2:	018b      	lsls	r3, r1, #6
 80029e4:	1a5b      	subs	r3, r3, r1
 80029e6:	eb64 0402 	sbc.w	r4, r4, r2
 80029ea:	f04f 0100 	mov.w	r1, #0
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	00e2      	lsls	r2, r4, #3
 80029f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029f8:	00d9      	lsls	r1, r3, #3
 80029fa:	460b      	mov	r3, r1
 80029fc:	4614      	mov	r4, r2
 80029fe:	195b      	adds	r3, r3, r5
 8002a00:	eb44 0406 	adc.w	r4, r4, r6
 8002a04:	f04f 0100 	mov.w	r1, #0
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	0262      	lsls	r2, r4, #9
 8002a0e:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a12:	0259      	lsls	r1, r3, #9
 8002a14:	460b      	mov	r3, r1
 8002a16:	4614      	mov	r4, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f04f 0400 	mov.w	r4, #0
 8002a22:	461a      	mov	r2, r3
 8002a24:	4623      	mov	r3, r4
 8002a26:	f7fd fba9 	bl	800017c <__aeabi_uldivmod>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	460c      	mov	r4, r1
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	e040      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	461d      	mov	r5, r3
 8002a36:	f04f 0600 	mov.w	r6, #0
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	4632      	mov	r2, r6
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	f04f 0400 	mov.w	r4, #0
 8002a46:	0154      	lsls	r4, r2, #5
 8002a48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a4c:	014b      	lsls	r3, r1, #5
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4622      	mov	r2, r4
 8002a52:	1b49      	subs	r1, r1, r5
 8002a54:	eb62 0206 	sbc.w	r2, r2, r6
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	f04f 0400 	mov.w	r4, #0
 8002a60:	0194      	lsls	r4, r2, #6
 8002a62:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a66:	018b      	lsls	r3, r1, #6
 8002a68:	1a5b      	subs	r3, r3, r1
 8002a6a:	eb64 0402 	sbc.w	r4, r4, r2
 8002a6e:	f04f 0100 	mov.w	r1, #0
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	00e2      	lsls	r2, r4, #3
 8002a78:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a7c:	00d9      	lsls	r1, r3, #3
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4614      	mov	r4, r2
 8002a82:	195b      	adds	r3, r3, r5
 8002a84:	eb44 0406 	adc.w	r4, r4, r6
 8002a88:	f04f 0100 	mov.w	r1, #0
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	02a2      	lsls	r2, r4, #10
 8002a92:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a96:	0299      	lsls	r1, r3, #10
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4614      	mov	r4, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f04f 0400 	mov.w	r4, #0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4623      	mov	r3, r4
 8002aaa:	f7fd fb67 	bl	800017c <__aeabi_uldivmod>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	460c      	mov	r4, r1
 8002ab2:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	613b      	str	r3, [r7, #16]
      break;
 8002ab8:	e00d      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	0b5b      	lsrs	r3, r3, #13
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	613b      	str	r3, [r7, #16]
      break;
 8002ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad6:	693b      	ldr	r3, [r7, #16]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	371c      	adds	r7, #28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	00f42400 	.word	0x00f42400
 8002ae8:	007a1200 	.word	0x007a1200
 8002aec:	08005190 	.word	0x08005190

08002af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af4:	4b02      	ldr	r3, [pc, #8]	; (8002b00 <HAL_RCC_GetHCLKFreq+0x10>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	20000000 	.word	0x20000000

08002b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b08:	f7ff fff2 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b0c:	4601      	mov	r1, r0
 8002b0e:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	0a1b      	lsrs	r3, r3, #8
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4a03      	ldr	r2, [pc, #12]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1a:	5cd3      	ldrb	r3, [r2, r3]
 8002b1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	080051ac 	.word	0x080051ac

08002b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b30:	f7ff ffde 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b34:	4601      	mov	r1, r0
 8002b36:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	0adb      	lsrs	r3, r3, #11
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4a03      	ldr	r2, [pc, #12]	; (8002b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b42:	5cd3      	ldrb	r3, [r2, r3]
 8002b44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	080051ac 	.word	0x080051ac

08002b54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002b60:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d12c      	bne.n	8002bc6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b6c:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002b78:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e016      	b.n	8002bb2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	4a1f      	ldr	r2, [pc, #124]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	6253      	str	r3, [r2, #36]	; 0x24
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002ba4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	4a17      	ldr	r2, [pc, #92]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002bb8:	d105      	bne.n	8002bc6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002bc0:	d101      	bne.n	8002bc6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d105      	bne.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002bcc:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0f      	ldr	r2, [pc, #60]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 0201 	bic.w	r2, r3, #1
 8002be0:	490b      	ldr	r1, [pc, #44]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d001      	beq.n	8002bfa <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	40023c00 	.word	0x40023c00

08002c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e031      	b.n	8002c8a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe f860 	bl	8000d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	4619      	mov	r1, r3
 8002c52:	4610      	mov	r0, r2
 8002c54:	f000 fd14 	bl	8003680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e031      	b.n	8002d08 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d106      	bne.n	8002cbe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7fd ffdf 	bl	8000c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	f000 fcd5 	bl	8003680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HAL_TIM_PWM_Start+0x24>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e022      	b.n	8002d7a <HAL_TIM_PWM_Start+0x6a>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d109      	bne.n	8002d4e <HAL_TIM_PWM_Start+0x3e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	bf14      	ite	ne
 8002d46:	2301      	movne	r3, #1
 8002d48:	2300      	moveq	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	e015      	b.n	8002d7a <HAL_TIM_PWM_Start+0x6a>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d109      	bne.n	8002d68 <HAL_TIM_PWM_Start+0x58>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	e008      	b.n	8002d7a <HAL_TIM_PWM_Start+0x6a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	bf14      	ite	ne
 8002d74:	2301      	movne	r3, #1
 8002d76:	2300      	moveq	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e051      	b.n	8002e26 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d104      	bne.n	8002d92 <HAL_TIM_PWM_Start+0x82>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002d90:	e013      	b.n	8002dba <HAL_TIM_PWM_Start+0xaa>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_PWM_Start+0x92>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002da0:	e00b      	b.n	8002dba <HAL_TIM_PWM_Start+0xaa>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_PWM_Start+0xa2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002db0:	e003      	b.n	8002dba <HAL_TIM_PWM_Start+0xaa>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	6839      	ldr	r1, [r7, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 ff6b 	bl	8003c9e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd0:	d00e      	beq.n	8002df0 <HAL_TIM_PWM_Start+0xe0>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a16      	ldr	r2, [pc, #88]	; (8002e30 <HAL_TIM_PWM_Start+0x120>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d009      	beq.n	8002df0 <HAL_TIM_PWM_Start+0xe0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a14      	ldr	r2, [pc, #80]	; (8002e34 <HAL_TIM_PWM_Start+0x124>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <HAL_TIM_PWM_Start+0xe0>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a13      	ldr	r2, [pc, #76]	; (8002e38 <HAL_TIM_PWM_Start+0x128>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d111      	bne.n	8002e14 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d010      	beq.n	8002e24 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0201 	orr.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e12:	e007      	b.n	8002e24 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40000800 	.word	0x40000800
 8002e38:	40010800 	.word	0x40010800

08002e3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	6839      	ldr	r1, [r7, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 ff25 	bl	8003c9e <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6a1a      	ldr	r2, [r3, #32]
 8002e5a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d107      	bne.n	8002e74 <HAL_TIM_PWM_Stop+0x38>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d104      	bne.n	8002e84 <HAL_TIM_PWM_Stop+0x48>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002e82:	e013      	b.n	8002eac <HAL_TIM_PWM_Stop+0x70>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d104      	bne.n	8002e94 <HAL_TIM_PWM_Stop+0x58>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002e92:	e00b      	b.n	8002eac <HAL_TIM_PWM_Stop+0x70>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d104      	bne.n	8002ea4 <HAL_TIM_PWM_Stop+0x68>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ea2:	e003      	b.n	8002eac <HAL_TIM_PWM_Stop+0x70>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e031      	b.n	8002f2c <HAL_TIM_IC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d106      	bne.n	8002ee2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f829 	bl	8002f34 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	f000 fbc3 	bl	8003680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr
	...

08002f48 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d104      	bne.n	8002f62 <HAL_TIM_IC_Start_IT+0x1a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	e013      	b.n	8002f8a <HAL_TIM_IC_Start_IT+0x42>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d104      	bne.n	8002f72 <HAL_TIM_IC_Start_IT+0x2a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	e00b      	b.n	8002f8a <HAL_TIM_IC_Start_IT+0x42>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d104      	bne.n	8002f82 <HAL_TIM_IC_Start_IT+0x3a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	e003      	b.n	8002f8a <HAL_TIM_IC_Start_IT+0x42>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d001      	beq.n	8002f96 <HAL_TIM_IC_Start_IT+0x4e>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e097      	b.n	80030c6 <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_IC_Start_IT+0x5e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002fa4:	e013      	b.n	8002fce <HAL_TIM_IC_Start_IT+0x86>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_IC_Start_IT+0x6e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002fb4:	e00b      	b.n	8002fce <HAL_TIM_IC_Start_IT+0x86>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_IC_Start_IT+0x7e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002fc4:	e003      	b.n	8002fce <HAL_TIM_IC_Start_IT+0x86>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b0c      	cmp	r3, #12
 8002fd2:	d841      	bhi.n	8003058 <HAL_TIM_IC_Start_IT+0x110>
 8002fd4:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <HAL_TIM_IC_Start_IT+0x94>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08003011 	.word	0x08003011
 8002fe0:	08003059 	.word	0x08003059
 8002fe4:	08003059 	.word	0x08003059
 8002fe8:	08003059 	.word	0x08003059
 8002fec:	08003023 	.word	0x08003023
 8002ff0:	08003059 	.word	0x08003059
 8002ff4:	08003059 	.word	0x08003059
 8002ff8:	08003059 	.word	0x08003059
 8002ffc:	08003035 	.word	0x08003035
 8003000:	08003059 	.word	0x08003059
 8003004:	08003059 	.word	0x08003059
 8003008:	08003059 	.word	0x08003059
 800300c:	08003047 	.word	0x08003047
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0202 	orr.w	r2, r2, #2
 800301e:	60da      	str	r2, [r3, #12]
      break;
 8003020:	e01b      	b.n	800305a <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0204 	orr.w	r2, r2, #4
 8003030:	60da      	str	r2, [r3, #12]
      break;
 8003032:	e012      	b.n	800305a <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0208 	orr.w	r2, r2, #8
 8003042:	60da      	str	r2, [r3, #12]
      break;
 8003044:	e009      	b.n	800305a <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0210 	orr.w	r2, r2, #16
 8003054:	60da      	str	r2, [r3, #12]
      break;
 8003056:	e000      	b.n	800305a <HAL_TIM_IC_Start_IT+0x112>
    }

    default:
      break;
 8003058:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2201      	movs	r2, #1
 8003060:	6839      	ldr	r1, [r7, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fe1b 	bl	8003c9e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003070:	d00e      	beq.n	8003090 <HAL_TIM_IC_Start_IT+0x148>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a16      	ldr	r2, [pc, #88]	; (80030d0 <HAL_TIM_IC_Start_IT+0x188>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_TIM_IC_Start_IT+0x148>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a14      	ldr	r2, [pc, #80]	; (80030d4 <HAL_TIM_IC_Start_IT+0x18c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_TIM_IC_Start_IT+0x148>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a13      	ldr	r2, [pc, #76]	; (80030d8 <HAL_TIM_IC_Start_IT+0x190>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d111      	bne.n	80030b4 <HAL_TIM_IC_Start_IT+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d010      	beq.n	80030c4 <HAL_TIM_IC_Start_IT+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b2:	e007      	b.n	80030c4 <HAL_TIM_IC_Start_IT+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40000800 	.word	0x40000800
 80030d8:	40010800 	.word	0x40010800

080030dc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b0c      	cmp	r3, #12
 80030ea:	d841      	bhi.n	8003170 <HAL_TIM_IC_Stop_IT+0x94>
 80030ec:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <HAL_TIM_IC_Stop_IT+0x18>)
 80030ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f2:	bf00      	nop
 80030f4:	08003129 	.word	0x08003129
 80030f8:	08003171 	.word	0x08003171
 80030fc:	08003171 	.word	0x08003171
 8003100:	08003171 	.word	0x08003171
 8003104:	0800313b 	.word	0x0800313b
 8003108:	08003171 	.word	0x08003171
 800310c:	08003171 	.word	0x08003171
 8003110:	08003171 	.word	0x08003171
 8003114:	0800314d 	.word	0x0800314d
 8003118:	08003171 	.word	0x08003171
 800311c:	08003171 	.word	0x08003171
 8003120:	08003171 	.word	0x08003171
 8003124:	0800315f 	.word	0x0800315f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0202 	bic.w	r2, r2, #2
 8003136:	60da      	str	r2, [r3, #12]
      break;
 8003138:	e01b      	b.n	8003172 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0204 	bic.w	r2, r2, #4
 8003148:	60da      	str	r2, [r3, #12]
      break;
 800314a:	e012      	b.n	8003172 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0208 	bic.w	r2, r2, #8
 800315a:	60da      	str	r2, [r3, #12]
      break;
 800315c:	e009      	b.n	8003172 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0210 	bic.w	r2, r2, #16
 800316c:	60da      	str	r2, [r3, #12]
      break;
 800316e:	e000      	b.n	8003172 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8003170:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	6839      	ldr	r1, [r7, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fd8f 	bl	8003c9e <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6a1a      	ldr	r2, [r3, #32]
 8003186:	f241 1311 	movw	r3, #4369	; 0x1111
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d107      	bne.n	80031a0 <HAL_TIM_IC_Stop_IT+0xc4>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d104      	bne.n	80031b0 <HAL_TIM_IC_Stop_IT+0xd4>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80031ae:	e013      	b.n	80031d8 <HAL_TIM_IC_Stop_IT+0xfc>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d104      	bne.n	80031c0 <HAL_TIM_IC_Stop_IT+0xe4>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80031be:	e00b      	b.n	80031d8 <HAL_TIM_IC_Stop_IT+0xfc>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d104      	bne.n	80031d0 <HAL_TIM_IC_Stop_IT+0xf4>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031ce:	e003      	b.n	80031d8 <HAL_TIM_IC_Stop_IT+0xfc>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop

080031e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_TIM_IC_ConfigChannel+0x1a>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e082      	b.n	8003304 <HAL_TIM_IC_ConfigChannel+0x120>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (Channel == TIM_CHANNEL_1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d11b      	bne.n	8003244 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	6819      	ldr	r1, [r3, #0]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f000 fb96 	bl	800394c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 020c 	bic.w	r2, r2, #12
 800322e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6999      	ldr	r1, [r3, #24]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	619a      	str	r2, [r3, #24]
 8003242:	e05a      	b.n	80032fa <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b04      	cmp	r3, #4
 8003248:	d11c      	bne.n	8003284 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f000 fc05 	bl	8003a68 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699a      	ldr	r2, [r3, #24]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800326c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6999      	ldr	r1, [r3, #24]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	021a      	lsls	r2, r3, #8
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	619a      	str	r2, [r3, #24]
 8003282:	e03a      	b.n	80032fa <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b08      	cmp	r3, #8
 8003288:	d11b      	bne.n	80032c2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	6819      	ldr	r1, [r3, #0]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f000 fc50 	bl	8003b3e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 020c 	bic.w	r2, r2, #12
 80032ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69d9      	ldr	r1, [r3, #28]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	61da      	str	r2, [r3, #28]
 80032c0:	e01b      	b.n	80032fa <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6819      	ldr	r1, [r3, #0]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f000 fc6f 	bl	8003bb4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80032e4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69d9      	ldr	r1, [r3, #28]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	021a      	lsls	r2, r3, #8
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003322:	2302      	movs	r3, #2
 8003324:	e0ac      	b.n	8003480 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b0c      	cmp	r3, #12
 8003332:	f200 809f 	bhi.w	8003474 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003336:	a201      	add	r2, pc, #4	; (adr r2, 800333c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	08003371 	.word	0x08003371
 8003340:	08003475 	.word	0x08003475
 8003344:	08003475 	.word	0x08003475
 8003348:	08003475 	.word	0x08003475
 800334c:	080033b1 	.word	0x080033b1
 8003350:	08003475 	.word	0x08003475
 8003354:	08003475 	.word	0x08003475
 8003358:	08003475 	.word	0x08003475
 800335c:	080033f3 	.word	0x080033f3
 8003360:	08003475 	.word	0x08003475
 8003364:	08003475 	.word	0x08003475
 8003368:	08003475 	.word	0x08003475
 800336c:	08003433 	.word	0x08003433
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f9f2 	bl	8003760 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0208 	orr.w	r2, r2, #8
 800338a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0204 	bic.w	r2, r2, #4
 800339a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6999      	ldr	r1, [r3, #24]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	619a      	str	r2, [r3, #24]
      break;
 80033ae:	e062      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fa0e 	bl	80037d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6999      	ldr	r1, [r3, #24]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	021a      	lsls	r2, r3, #8
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	619a      	str	r2, [r3, #24]
      break;
 80033f0:	e041      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fa2b 	bl	8003854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0208 	orr.w	r2, r2, #8
 800340c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0204 	bic.w	r2, r2, #4
 800341c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69d9      	ldr	r1, [r3, #28]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	61da      	str	r2, [r3, #28]
      break;
 8003430:	e021      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fa48 	bl	80038ce <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800344c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69d9      	ldr	r1, [r3, #28]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	021a      	lsls	r2, r3, #8
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	61da      	str	r2, [r3, #28]
      break;
 8003472:	e000      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003474:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_TIM_ConfigClockSource+0x18>
 800349c:	2302      	movs	r3, #2
 800349e:	e0a6      	b.n	80035ee <HAL_TIM_ConfigClockSource+0x166>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d067      	beq.n	80035a8 <HAL_TIM_ConfigClockSource+0x120>
 80034d8:	2b40      	cmp	r3, #64	; 0x40
 80034da:	d80b      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x6c>
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d073      	beq.n	80035c8 <HAL_TIM_ConfigClockSource+0x140>
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d802      	bhi.n	80034ea <HAL_TIM_ConfigClockSource+0x62>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d06f      	beq.n	80035c8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034e8:	e078      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d06c      	beq.n	80035c8 <HAL_TIM_ConfigClockSource+0x140>
 80034ee:	2b30      	cmp	r3, #48	; 0x30
 80034f0:	d06a      	beq.n	80035c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80034f2:	e073      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034f4:	2b70      	cmp	r3, #112	; 0x70
 80034f6:	d00d      	beq.n	8003514 <HAL_TIM_ConfigClockSource+0x8c>
 80034f8:	2b70      	cmp	r3, #112	; 0x70
 80034fa:	d804      	bhi.n	8003506 <HAL_TIM_ConfigClockSource+0x7e>
 80034fc:	2b50      	cmp	r3, #80	; 0x50
 80034fe:	d033      	beq.n	8003568 <HAL_TIM_ConfigClockSource+0xe0>
 8003500:	2b60      	cmp	r3, #96	; 0x60
 8003502:	d041      	beq.n	8003588 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003504:	e06a      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350a:	d066      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x152>
 800350c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003510:	d017      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003512:	e063      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	6899      	ldr	r1, [r3, #8]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f000 fb9c 	bl	8003c60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003536:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	609a      	str	r2, [r3, #8]
      break;
 8003540:	e04c      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6899      	ldr	r1, [r3, #8]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f000 fb85 	bl	8003c60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003564:	609a      	str	r2, [r3, #8]
      break;
 8003566:	e039      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	461a      	mov	r2, r3
 8003576:	f000 fa49 	bl	8003a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2150      	movs	r1, #80	; 0x50
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fb53 	bl	8003c2c <TIM_ITRx_SetConfig>
      break;
 8003586:	e029      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6859      	ldr	r1, [r3, #4]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	461a      	mov	r2, r3
 8003596:	f000 faa3 	bl	8003ae0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2160      	movs	r1, #96	; 0x60
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fb43 	bl	8003c2c <TIM_ITRx_SetConfig>
      break;
 80035a6:	e019      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	461a      	mov	r2, r3
 80035b6:	f000 fa29 	bl	8003a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2140      	movs	r1, #64	; 0x40
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fb33 	bl	8003c2c <TIM_ITRx_SetConfig>
      break;
 80035c6:	e009      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f000 fb2a 	bl	8003c2c <TIM_ITRx_SetConfig>
        break;
 80035d8:	e000      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80035da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b0c      	cmp	r3, #12
 800360a:	d831      	bhi.n	8003670 <HAL_TIM_ReadCapturedValue+0x78>
 800360c:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <HAL_TIM_ReadCapturedValue+0x1c>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	08003649 	.word	0x08003649
 8003618:	08003671 	.word	0x08003671
 800361c:	08003671 	.word	0x08003671
 8003620:	08003671 	.word	0x08003671
 8003624:	08003653 	.word	0x08003653
 8003628:	08003671 	.word	0x08003671
 800362c:	08003671 	.word	0x08003671
 8003630:	08003671 	.word	0x08003671
 8003634:	0800365d 	.word	0x0800365d
 8003638:	08003671 	.word	0x08003671
 800363c:	08003671 	.word	0x08003671
 8003640:	08003671 	.word	0x08003671
 8003644:	08003667 	.word	0x08003667
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364e:	60fb      	str	r3, [r7, #12]

      break;
 8003650:	e00f      	b.n	8003672 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	60fb      	str	r3, [r7, #12]

      break;
 800365a:	e00a      	b.n	8003672 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	60fb      	str	r3, [r7, #12]

      break;
 8003664:	e005      	b.n	8003672 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	60fb      	str	r3, [r7, #12]

      break;
 800366e:	e000      	b.n	8003672 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003670:	bf00      	nop
  }

  return tmpreg;
 8003672:	68fb      	ldr	r3, [r7, #12]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop

08003680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003696:	d00f      	beq.n	80036b8 <TIM_Base_SetConfig+0x38>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a2b      	ldr	r2, [pc, #172]	; (8003748 <TIM_Base_SetConfig+0xc8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00b      	beq.n	80036b8 <TIM_Base_SetConfig+0x38>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a2a      	ldr	r2, [pc, #168]	; (800374c <TIM_Base_SetConfig+0xcc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d007      	beq.n	80036b8 <TIM_Base_SetConfig+0x38>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a29      	ldr	r2, [pc, #164]	; (8003750 <TIM_Base_SetConfig+0xd0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d003      	beq.n	80036b8 <TIM_Base_SetConfig+0x38>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a28      	ldr	r2, [pc, #160]	; (8003754 <TIM_Base_SetConfig+0xd4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d108      	bne.n	80036ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d0:	d017      	beq.n	8003702 <TIM_Base_SetConfig+0x82>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <TIM_Base_SetConfig+0xc8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <TIM_Base_SetConfig+0x82>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a1b      	ldr	r2, [pc, #108]	; (800374c <TIM_Base_SetConfig+0xcc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00f      	beq.n	8003702 <TIM_Base_SetConfig+0x82>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <TIM_Base_SetConfig+0xd0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00b      	beq.n	8003702 <TIM_Base_SetConfig+0x82>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a19      	ldr	r2, [pc, #100]	; (8003754 <TIM_Base_SetConfig+0xd4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <TIM_Base_SetConfig+0x82>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a18      	ldr	r2, [pc, #96]	; (8003758 <TIM_Base_SetConfig+0xd8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d003      	beq.n	8003702 <TIM_Base_SetConfig+0x82>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a17      	ldr	r2, [pc, #92]	; (800375c <TIM_Base_SetConfig+0xdc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d108      	bne.n	8003714 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	615a      	str	r2, [r3, #20]
}
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800
 8003750:	40000c00 	.word	0x40000c00
 8003754:	40010800 	.word	0x40010800
 8003758:	40010c00 	.word	0x40010c00
 800375c:	40011000 	.word	0x40011000

08003760 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f023 0201 	bic.w	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0303 	bic.w	r3, r3, #3
 8003796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f023 0302 	bic.w	r3, r3, #2
 80037a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	621a      	str	r2, [r3, #32]
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr

080037d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f023 0210 	bic.w	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0320 	bic.w	r3, r3, #32
 8003822:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	621a      	str	r2, [r3, #32]
}
 800384a:	bf00      	nop
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0303 	bic.w	r3, r3, #3
 800388a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800389c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	621a      	str	r2, [r3, #32]
}
 80038c4:	bf00      	nop
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr

080038ce <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b087      	sub	sp, #28
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003904:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	031b      	lsls	r3, r3, #12
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	621a      	str	r2, [r3, #32]
}
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr
	...

0800394c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f023 0201 	bic.w	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003978:	d00f      	beq.n	800399a <TIM_TI1_SetConfig+0x4e>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4a1f      	ldr	r2, [pc, #124]	; (80039fc <TIM_TI1_SetConfig+0xb0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00b      	beq.n	800399a <TIM_TI1_SetConfig+0x4e>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a1e      	ldr	r2, [pc, #120]	; (8003a00 <TIM_TI1_SetConfig+0xb4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d007      	beq.n	800399a <TIM_TI1_SetConfig+0x4e>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <TIM_TI1_SetConfig+0xb8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <TIM_TI1_SetConfig+0x4e>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <TIM_TI1_SetConfig+0xbc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d101      	bne.n	800399e <TIM_TI1_SetConfig+0x52>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <TIM_TI1_SetConfig+0x54>
 800399e:	2300      	movs	r3, #0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f023 0303 	bic.w	r3, r3, #3
 80039aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	e003      	b.n	80039be <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f023 030a 	bic.w	r3, r3, #10
 80039d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f003 030a 	and.w	r3, r3, #10
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr
 80039fc:	40000400 	.word	0x40000400
 8003a00:	40000800 	.word	0x40000800
 8003a04:	40000c00 	.word	0x40000c00
 8003a08:	40010800 	.word	0x40010800

08003a0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	f023 0201 	bic.w	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f023 030a 	bic.w	r3, r3, #10
 8003a48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	621a      	str	r2, [r3, #32]
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f023 0210 	bic.w	r2, r3, #16
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aa6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	031b      	lsls	r3, r3, #12
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f023 0210 	bic.w	r2, r3, #16
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	031b      	lsls	r3, r3, #12
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	621a      	str	r2, [r3, #32]
}
 8003b34:	bf00      	nop
 8003b36:	371c      	adds	r7, #28
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b087      	sub	sp, #28
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f023 0303 	bic.w	r3, r3, #3
 8003b6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003b8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	621a      	str	r2, [r3, #32]
}
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bf2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	031b      	lsls	r3, r3, #12
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003c06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	031b      	lsls	r3, r3, #12
 8003c0c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	621a      	str	r2, [r3, #32]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f043 0307 	orr.w	r3, r3, #7
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	609a      	str	r2, [r3, #8]
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	021a      	lsls	r2, r3, #8
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	609a      	str	r2, [r3, #8]
}
 8003c94:	bf00      	nop
 8003c96:	371c      	adds	r7, #28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b087      	sub	sp, #28
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a1a      	ldr	r2, [r3, #32]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	401a      	ands	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a1a      	ldr	r2, [r3, #32]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	621a      	str	r2, [r3, #32]
}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
	...

08003ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e046      	b.n	8003d8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d42:	d00e      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a13      	ldr	r2, [pc, #76]	; (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d009      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a10      	ldr	r2, [pc, #64]	; (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10c      	bne.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr
 8003d98:	40000400 	.word	0x40000400
 8003d9c:	40000800 	.word	0x40000800
 8003da0:	40010800 	.word	0x40010800

08003da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e03f      	b.n	8003e36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fc fff8 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2224      	movs	r2, #36	; 0x24
 8003dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f9b1 	bl	8004150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b088      	sub	sp, #32
 8003e42:	af02      	add	r7, sp, #8
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	603b      	str	r3, [r7, #0]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	f040 8083 	bne.w	8003f66 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_UART_Transmit+0x2e>
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e07b      	b.n	8003f68 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_UART_Transmit+0x40>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e074      	b.n	8003f68 <HAL_UART_Transmit+0x12a>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2221      	movs	r2, #33	; 0x21
 8003e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e94:	f7fd f9c4 	bl	8001220 <HAL_GetTick>
 8003e98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	88fa      	ldrh	r2, [r7, #6]
 8003e9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	88fa      	ldrh	r2, [r7, #6]
 8003ea4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003eae:	e042      	b.n	8003f36 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec6:	d122      	bne.n	8003f0e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2180      	movs	r1, #128	; 0x80
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 f8f2 	bl	80040bc <UART_WaitOnFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e042      	b.n	8003f68 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	3302      	adds	r3, #2
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	e017      	b.n	8003f36 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	e013      	b.n	8003f36 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2200      	movs	r2, #0
 8003f16:	2180      	movs	r1, #128	; 0x80
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f8cf 	bl	80040bc <UART_WaitOnFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e01f      	b.n	8003f68 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	60ba      	str	r2, [r7, #8]
 8003f2e:	781a      	ldrb	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1b7      	bne.n	8003eb0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2200      	movs	r2, #0
 8003f48:	2140      	movs	r1, #64	; 0x40
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f8b6 	bl	80040bc <UART_WaitOnFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e006      	b.n	8003f68 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e000      	b.n	8003f68 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b20      	cmp	r3, #32
 8003f8e:	f040 8090 	bne.w	80040b2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_UART_Receive+0x2e>
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e088      	b.n	80040b4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_UART_Receive+0x40>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e081      	b.n	80040b4 <HAL_UART_Receive+0x144>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2222      	movs	r2, #34	; 0x22
 8003fc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003fc6:	f7fd f92b 	bl	8001220 <HAL_GetTick>
 8003fca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	88fa      	ldrh	r2, [r7, #6]
 8003fd0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	88fa      	ldrh	r2, [r7, #6]
 8003fd6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003fe0:	e05c      	b.n	800409c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff8:	d12b      	bne.n	8004052 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2200      	movs	r2, #0
 8004002:	2120      	movs	r1, #32
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f859 	bl	80040bc <UART_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e04f      	b.n	80040b4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10c      	bne.n	800403a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	b29b      	uxth	r3, r3
 8004028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800402c:	b29a      	uxth	r2, r3
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	3302      	adds	r3, #2
 8004036:	60bb      	str	r3, [r7, #8]
 8004038:	e030      	b.n	800409c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	b29b      	uxth	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	b29a      	uxth	r2, r3
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	3301      	adds	r3, #1
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	e024      	b.n	800409c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2200      	movs	r2, #0
 800405a:	2120      	movs	r1, #32
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f82d 	bl	80040bc <UART_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e023      	b.n	80040b4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d108      	bne.n	8004086 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6859      	ldr	r1, [r3, #4]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	60ba      	str	r2, [r7, #8]
 8004080:	b2ca      	uxtb	r2, r1
 8004082:	701a      	strb	r2, [r3, #0]
 8004084:	e00a      	b.n	800409c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	1c59      	adds	r1, r3, #1
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d19d      	bne.n	8003fe2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	e000      	b.n	80040b4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80040b2:	2302      	movs	r3, #2
  }
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040cc:	e02c      	b.n	8004128 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d028      	beq.n	8004128 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <UART_WaitOnFlagUntilTimeout+0x30>
 80040dc:	f7fd f8a0 	bl	8001220 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d21d      	bcs.n	8004128 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e00f      	b.n	8004148 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4013      	ands	r3, r2
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	429a      	cmp	r2, r3
 8004136:	bf0c      	ite	eq
 8004138:	2301      	moveq	r3, #1
 800413a:	2300      	movne	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	429a      	cmp	r2, r3
 8004144:	d0c3      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	4313      	orrs	r3, r2
 8004184:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004190:	f023 030c 	bic.w	r3, r3, #12
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	430b      	orrs	r3, r1
 800419c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699a      	ldr	r2, [r3, #24]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a55      	ldr	r2, [pc, #340]	; (8004310 <UART_SetConfig+0x1c0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d103      	bne.n	80041c6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041be:	f7fe fcb5 	bl	8002b2c <HAL_RCC_GetPCLK2Freq>
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	e002      	b.n	80041cc <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041c6:	f7fe fc9d 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 80041ca:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d4:	d14c      	bne.n	8004270 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	009a      	lsls	r2, r3, #2
 80041e0:	441a      	add	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	4a49      	ldr	r2, [pc, #292]	; (8004314 <UART_SetConfig+0x1c4>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	0119      	lsls	r1, r3, #4
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	009a      	lsls	r2, r3, #2
 8004200:	441a      	add	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	fbb2 f2f3 	udiv	r2, r2, r3
 800420c:	4b41      	ldr	r3, [pc, #260]	; (8004314 <UART_SetConfig+0x1c4>)
 800420e:	fba3 0302 	umull	r0, r3, r3, r2
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	2064      	movs	r0, #100	; 0x64
 8004216:	fb00 f303 	mul.w	r3, r0, r3
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	3332      	adds	r3, #50	; 0x32
 8004220:	4a3c      	ldr	r2, [pc, #240]	; (8004314 <UART_SetConfig+0x1c4>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800422e:	4419      	add	r1, r3
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	009a      	lsls	r2, r3, #2
 800423a:	441a      	add	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	fbb2 f2f3 	udiv	r2, r2, r3
 8004246:	4b33      	ldr	r3, [pc, #204]	; (8004314 <UART_SetConfig+0x1c4>)
 8004248:	fba3 0302 	umull	r0, r3, r3, r2
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	2064      	movs	r0, #100	; 0x64
 8004250:	fb00 f303 	mul.w	r3, r0, r3
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	3332      	adds	r3, #50	; 0x32
 800425a:	4a2e      	ldr	r2, [pc, #184]	; (8004314 <UART_SetConfig+0x1c4>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	f003 0207 	and.w	r2, r3, #7
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	440a      	add	r2, r1
 800426c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800426e:	e04a      	b.n	8004306 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	009a      	lsls	r2, r3, #2
 800427a:	441a      	add	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	fbb2 f3f3 	udiv	r3, r2, r3
 8004286:	4a23      	ldr	r2, [pc, #140]	; (8004314 <UART_SetConfig+0x1c4>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	095b      	lsrs	r3, r3, #5
 800428e:	0119      	lsls	r1, r3, #4
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009a      	lsls	r2, r3, #2
 800429a:	441a      	add	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80042a6:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <UART_SetConfig+0x1c4>)
 80042a8:	fba3 0302 	umull	r0, r3, r3, r2
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	2064      	movs	r0, #100	; 0x64
 80042b0:	fb00 f303 	mul.w	r3, r0, r3
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	3332      	adds	r3, #50	; 0x32
 80042ba:	4a16      	ldr	r2, [pc, #88]	; (8004314 <UART_SetConfig+0x1c4>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042c6:	4419      	add	r1, r3
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	009a      	lsls	r2, r3, #2
 80042d2:	441a      	add	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	fbb2 f2f3 	udiv	r2, r2, r3
 80042de:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <UART_SetConfig+0x1c4>)
 80042e0:	fba3 0302 	umull	r0, r3, r3, r2
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	2064      	movs	r0, #100	; 0x64
 80042e8:	fb00 f303 	mul.w	r3, r0, r3
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	3332      	adds	r3, #50	; 0x32
 80042f2:	4a08      	ldr	r2, [pc, #32]	; (8004314 <UART_SetConfig+0x1c4>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	f003 020f 	and.w	r2, r3, #15
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	440a      	add	r2, r1
 8004304:	609a      	str	r2, [r3, #8]
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40013800 	.word	0x40013800
 8004314:	51eb851f 	.word	0x51eb851f

08004318 <__errno>:
 8004318:	4b01      	ldr	r3, [pc, #4]	; (8004320 <__errno+0x8>)
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	2000000c 	.word	0x2000000c

08004324 <__libc_init_array>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	2500      	movs	r5, #0
 8004328:	4e0c      	ldr	r6, [pc, #48]	; (800435c <__libc_init_array+0x38>)
 800432a:	4c0d      	ldr	r4, [pc, #52]	; (8004360 <__libc_init_array+0x3c>)
 800432c:	1ba4      	subs	r4, r4, r6
 800432e:	10a4      	asrs	r4, r4, #2
 8004330:	42a5      	cmp	r5, r4
 8004332:	d109      	bne.n	8004348 <__libc_init_array+0x24>
 8004334:	f000 ff10 	bl	8005158 <_init>
 8004338:	2500      	movs	r5, #0
 800433a:	4e0a      	ldr	r6, [pc, #40]	; (8004364 <__libc_init_array+0x40>)
 800433c:	4c0a      	ldr	r4, [pc, #40]	; (8004368 <__libc_init_array+0x44>)
 800433e:	1ba4      	subs	r4, r4, r6
 8004340:	10a4      	asrs	r4, r4, #2
 8004342:	42a5      	cmp	r5, r4
 8004344:	d105      	bne.n	8004352 <__libc_init_array+0x2e>
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800434c:	4798      	blx	r3
 800434e:	3501      	adds	r5, #1
 8004350:	e7ee      	b.n	8004330 <__libc_init_array+0xc>
 8004352:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004356:	4798      	blx	r3
 8004358:	3501      	adds	r5, #1
 800435a:	e7f2      	b.n	8004342 <__libc_init_array+0x1e>
 800435c:	08005254 	.word	0x08005254
 8004360:	08005254 	.word	0x08005254
 8004364:	08005254 	.word	0x08005254
 8004368:	08005258 	.word	0x08005258

0800436c <memset>:
 800436c:	4603      	mov	r3, r0
 800436e:	4402      	add	r2, r0
 8004370:	4293      	cmp	r3, r2
 8004372:	d100      	bne.n	8004376 <memset+0xa>
 8004374:	4770      	bx	lr
 8004376:	f803 1b01 	strb.w	r1, [r3], #1
 800437a:	e7f9      	b.n	8004370 <memset+0x4>

0800437c <iprintf>:
 800437c:	b40f      	push	{r0, r1, r2, r3}
 800437e:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <iprintf+0x2c>)
 8004380:	b513      	push	{r0, r1, r4, lr}
 8004382:	681c      	ldr	r4, [r3, #0]
 8004384:	b124      	cbz	r4, 8004390 <iprintf+0x14>
 8004386:	69a3      	ldr	r3, [r4, #24]
 8004388:	b913      	cbnz	r3, 8004390 <iprintf+0x14>
 800438a:	4620      	mov	r0, r4
 800438c:	f000 f84e 	bl	800442c <__sinit>
 8004390:	ab05      	add	r3, sp, #20
 8004392:	9a04      	ldr	r2, [sp, #16]
 8004394:	68a1      	ldr	r1, [r4, #8]
 8004396:	4620      	mov	r0, r4
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	f000 f953 	bl	8004644 <_vfiprintf_r>
 800439e:	b002      	add	sp, #8
 80043a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a4:	b004      	add	sp, #16
 80043a6:	4770      	bx	lr
 80043a8:	2000000c 	.word	0x2000000c

080043ac <std>:
 80043ac:	2300      	movs	r3, #0
 80043ae:	b510      	push	{r4, lr}
 80043b0:	4604      	mov	r4, r0
 80043b2:	e9c0 3300 	strd	r3, r3, [r0]
 80043b6:	6083      	str	r3, [r0, #8]
 80043b8:	8181      	strh	r1, [r0, #12]
 80043ba:	6643      	str	r3, [r0, #100]	; 0x64
 80043bc:	81c2      	strh	r2, [r0, #14]
 80043be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043c2:	6183      	str	r3, [r0, #24]
 80043c4:	4619      	mov	r1, r3
 80043c6:	2208      	movs	r2, #8
 80043c8:	305c      	adds	r0, #92	; 0x5c
 80043ca:	f7ff ffcf 	bl	800436c <memset>
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <std+0x38>)
 80043d0:	6224      	str	r4, [r4, #32]
 80043d2:	6263      	str	r3, [r4, #36]	; 0x24
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <std+0x3c>)
 80043d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80043d8:	4b04      	ldr	r3, [pc, #16]	; (80043ec <std+0x40>)
 80043da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043dc:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <std+0x44>)
 80043de:	6323      	str	r3, [r4, #48]	; 0x30
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	bf00      	nop
 80043e4:	08004ba1 	.word	0x08004ba1
 80043e8:	08004bc3 	.word	0x08004bc3
 80043ec:	08004bfb 	.word	0x08004bfb
 80043f0:	08004c1f 	.word	0x08004c1f

080043f4 <_cleanup_r>:
 80043f4:	4901      	ldr	r1, [pc, #4]	; (80043fc <_cleanup_r+0x8>)
 80043f6:	f000 b885 	b.w	8004504 <_fwalk_reent>
 80043fa:	bf00      	nop
 80043fc:	08004ef9 	.word	0x08004ef9

08004400 <__sfmoreglue>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	2568      	movs	r5, #104	; 0x68
 8004404:	1e4a      	subs	r2, r1, #1
 8004406:	4355      	muls	r5, r2
 8004408:	460e      	mov	r6, r1
 800440a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800440e:	f000 f897 	bl	8004540 <_malloc_r>
 8004412:	4604      	mov	r4, r0
 8004414:	b140      	cbz	r0, 8004428 <__sfmoreglue+0x28>
 8004416:	2100      	movs	r1, #0
 8004418:	e9c0 1600 	strd	r1, r6, [r0]
 800441c:	300c      	adds	r0, #12
 800441e:	60a0      	str	r0, [r4, #8]
 8004420:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004424:	f7ff ffa2 	bl	800436c <memset>
 8004428:	4620      	mov	r0, r4
 800442a:	bd70      	pop	{r4, r5, r6, pc}

0800442c <__sinit>:
 800442c:	6983      	ldr	r3, [r0, #24]
 800442e:	b510      	push	{r4, lr}
 8004430:	4604      	mov	r4, r0
 8004432:	bb33      	cbnz	r3, 8004482 <__sinit+0x56>
 8004434:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004438:	6503      	str	r3, [r0, #80]	; 0x50
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <__sinit+0x58>)
 800443c:	4a12      	ldr	r2, [pc, #72]	; (8004488 <__sinit+0x5c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6282      	str	r2, [r0, #40]	; 0x28
 8004442:	4298      	cmp	r0, r3
 8004444:	bf04      	itt	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	6183      	streq	r3, [r0, #24]
 800444a:	f000 f81f 	bl	800448c <__sfp>
 800444e:	6060      	str	r0, [r4, #4]
 8004450:	4620      	mov	r0, r4
 8004452:	f000 f81b 	bl	800448c <__sfp>
 8004456:	60a0      	str	r0, [r4, #8]
 8004458:	4620      	mov	r0, r4
 800445a:	f000 f817 	bl	800448c <__sfp>
 800445e:	2200      	movs	r2, #0
 8004460:	60e0      	str	r0, [r4, #12]
 8004462:	2104      	movs	r1, #4
 8004464:	6860      	ldr	r0, [r4, #4]
 8004466:	f7ff ffa1 	bl	80043ac <std>
 800446a:	2201      	movs	r2, #1
 800446c:	2109      	movs	r1, #9
 800446e:	68a0      	ldr	r0, [r4, #8]
 8004470:	f7ff ff9c 	bl	80043ac <std>
 8004474:	2202      	movs	r2, #2
 8004476:	2112      	movs	r1, #18
 8004478:	68e0      	ldr	r0, [r4, #12]
 800447a:	f7ff ff97 	bl	80043ac <std>
 800447e:	2301      	movs	r3, #1
 8004480:	61a3      	str	r3, [r4, #24]
 8004482:	bd10      	pop	{r4, pc}
 8004484:	080051b4 	.word	0x080051b4
 8004488:	080043f5 	.word	0x080043f5

0800448c <__sfp>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <__sfp+0x70>)
 8004490:	4607      	mov	r7, r0
 8004492:	681e      	ldr	r6, [r3, #0]
 8004494:	69b3      	ldr	r3, [r6, #24]
 8004496:	b913      	cbnz	r3, 800449e <__sfp+0x12>
 8004498:	4630      	mov	r0, r6
 800449a:	f7ff ffc7 	bl	800442c <__sinit>
 800449e:	3648      	adds	r6, #72	; 0x48
 80044a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	d503      	bpl.n	80044b0 <__sfp+0x24>
 80044a8:	6833      	ldr	r3, [r6, #0]
 80044aa:	b133      	cbz	r3, 80044ba <__sfp+0x2e>
 80044ac:	6836      	ldr	r6, [r6, #0]
 80044ae:	e7f7      	b.n	80044a0 <__sfp+0x14>
 80044b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044b4:	b16d      	cbz	r5, 80044d2 <__sfp+0x46>
 80044b6:	3468      	adds	r4, #104	; 0x68
 80044b8:	e7f4      	b.n	80044a4 <__sfp+0x18>
 80044ba:	2104      	movs	r1, #4
 80044bc:	4638      	mov	r0, r7
 80044be:	f7ff ff9f 	bl	8004400 <__sfmoreglue>
 80044c2:	6030      	str	r0, [r6, #0]
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d1f1      	bne.n	80044ac <__sfp+0x20>
 80044c8:	230c      	movs	r3, #12
 80044ca:	4604      	mov	r4, r0
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	4620      	mov	r0, r4
 80044d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <__sfp+0x74>)
 80044d4:	6665      	str	r5, [r4, #100]	; 0x64
 80044d6:	e9c4 5500 	strd	r5, r5, [r4]
 80044da:	60a5      	str	r5, [r4, #8]
 80044dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80044e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80044e4:	2208      	movs	r2, #8
 80044e6:	4629      	mov	r1, r5
 80044e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044ec:	f7ff ff3e 	bl	800436c <memset>
 80044f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044f8:	e7e9      	b.n	80044ce <__sfp+0x42>
 80044fa:	bf00      	nop
 80044fc:	080051b4 	.word	0x080051b4
 8004500:	ffff0001 	.word	0xffff0001

08004504 <_fwalk_reent>:
 8004504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004508:	4680      	mov	r8, r0
 800450a:	4689      	mov	r9, r1
 800450c:	2600      	movs	r6, #0
 800450e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004512:	b914      	cbnz	r4, 800451a <_fwalk_reent+0x16>
 8004514:	4630      	mov	r0, r6
 8004516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800451a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800451e:	3f01      	subs	r7, #1
 8004520:	d501      	bpl.n	8004526 <_fwalk_reent+0x22>
 8004522:	6824      	ldr	r4, [r4, #0]
 8004524:	e7f5      	b.n	8004512 <_fwalk_reent+0xe>
 8004526:	89ab      	ldrh	r3, [r5, #12]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d907      	bls.n	800453c <_fwalk_reent+0x38>
 800452c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004530:	3301      	adds	r3, #1
 8004532:	d003      	beq.n	800453c <_fwalk_reent+0x38>
 8004534:	4629      	mov	r1, r5
 8004536:	4640      	mov	r0, r8
 8004538:	47c8      	blx	r9
 800453a:	4306      	orrs	r6, r0
 800453c:	3568      	adds	r5, #104	; 0x68
 800453e:	e7ee      	b.n	800451e <_fwalk_reent+0x1a>

08004540 <_malloc_r>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	1ccd      	adds	r5, r1, #3
 8004544:	f025 0503 	bic.w	r5, r5, #3
 8004548:	3508      	adds	r5, #8
 800454a:	2d0c      	cmp	r5, #12
 800454c:	bf38      	it	cc
 800454e:	250c      	movcc	r5, #12
 8004550:	2d00      	cmp	r5, #0
 8004552:	4606      	mov	r6, r0
 8004554:	db01      	blt.n	800455a <_malloc_r+0x1a>
 8004556:	42a9      	cmp	r1, r5
 8004558:	d903      	bls.n	8004562 <_malloc_r+0x22>
 800455a:	230c      	movs	r3, #12
 800455c:	6033      	str	r3, [r6, #0]
 800455e:	2000      	movs	r0, #0
 8004560:	bd70      	pop	{r4, r5, r6, pc}
 8004562:	f000 fd77 	bl	8005054 <__malloc_lock>
 8004566:	4a21      	ldr	r2, [pc, #132]	; (80045ec <_malloc_r+0xac>)
 8004568:	6814      	ldr	r4, [r2, #0]
 800456a:	4621      	mov	r1, r4
 800456c:	b991      	cbnz	r1, 8004594 <_malloc_r+0x54>
 800456e:	4c20      	ldr	r4, [pc, #128]	; (80045f0 <_malloc_r+0xb0>)
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	b91b      	cbnz	r3, 800457c <_malloc_r+0x3c>
 8004574:	4630      	mov	r0, r6
 8004576:	f000 fb03 	bl	8004b80 <_sbrk_r>
 800457a:	6020      	str	r0, [r4, #0]
 800457c:	4629      	mov	r1, r5
 800457e:	4630      	mov	r0, r6
 8004580:	f000 fafe 	bl	8004b80 <_sbrk_r>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d124      	bne.n	80045d2 <_malloc_r+0x92>
 8004588:	230c      	movs	r3, #12
 800458a:	4630      	mov	r0, r6
 800458c:	6033      	str	r3, [r6, #0]
 800458e:	f000 fd62 	bl	8005056 <__malloc_unlock>
 8004592:	e7e4      	b.n	800455e <_malloc_r+0x1e>
 8004594:	680b      	ldr	r3, [r1, #0]
 8004596:	1b5b      	subs	r3, r3, r5
 8004598:	d418      	bmi.n	80045cc <_malloc_r+0x8c>
 800459a:	2b0b      	cmp	r3, #11
 800459c:	d90f      	bls.n	80045be <_malloc_r+0x7e>
 800459e:	600b      	str	r3, [r1, #0]
 80045a0:	18cc      	adds	r4, r1, r3
 80045a2:	50cd      	str	r5, [r1, r3]
 80045a4:	4630      	mov	r0, r6
 80045a6:	f000 fd56 	bl	8005056 <__malloc_unlock>
 80045aa:	f104 000b 	add.w	r0, r4, #11
 80045ae:	1d23      	adds	r3, r4, #4
 80045b0:	f020 0007 	bic.w	r0, r0, #7
 80045b4:	1ac3      	subs	r3, r0, r3
 80045b6:	d0d3      	beq.n	8004560 <_malloc_r+0x20>
 80045b8:	425a      	negs	r2, r3
 80045ba:	50e2      	str	r2, [r4, r3]
 80045bc:	e7d0      	b.n	8004560 <_malloc_r+0x20>
 80045be:	684b      	ldr	r3, [r1, #4]
 80045c0:	428c      	cmp	r4, r1
 80045c2:	bf16      	itet	ne
 80045c4:	6063      	strne	r3, [r4, #4]
 80045c6:	6013      	streq	r3, [r2, #0]
 80045c8:	460c      	movne	r4, r1
 80045ca:	e7eb      	b.n	80045a4 <_malloc_r+0x64>
 80045cc:	460c      	mov	r4, r1
 80045ce:	6849      	ldr	r1, [r1, #4]
 80045d0:	e7cc      	b.n	800456c <_malloc_r+0x2c>
 80045d2:	1cc4      	adds	r4, r0, #3
 80045d4:	f024 0403 	bic.w	r4, r4, #3
 80045d8:	42a0      	cmp	r0, r4
 80045da:	d005      	beq.n	80045e8 <_malloc_r+0xa8>
 80045dc:	1a21      	subs	r1, r4, r0
 80045de:	4630      	mov	r0, r6
 80045e0:	f000 face 	bl	8004b80 <_sbrk_r>
 80045e4:	3001      	adds	r0, #1
 80045e6:	d0cf      	beq.n	8004588 <_malloc_r+0x48>
 80045e8:	6025      	str	r5, [r4, #0]
 80045ea:	e7db      	b.n	80045a4 <_malloc_r+0x64>
 80045ec:	20000094 	.word	0x20000094
 80045f0:	20000098 	.word	0x20000098

080045f4 <__sfputc_r>:
 80045f4:	6893      	ldr	r3, [r2, #8]
 80045f6:	b410      	push	{r4}
 80045f8:	3b01      	subs	r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	6093      	str	r3, [r2, #8]
 80045fe:	da07      	bge.n	8004610 <__sfputc_r+0x1c>
 8004600:	6994      	ldr	r4, [r2, #24]
 8004602:	42a3      	cmp	r3, r4
 8004604:	db01      	blt.n	800460a <__sfputc_r+0x16>
 8004606:	290a      	cmp	r1, #10
 8004608:	d102      	bne.n	8004610 <__sfputc_r+0x1c>
 800460a:	bc10      	pop	{r4}
 800460c:	f000 bb0c 	b.w	8004c28 <__swbuf_r>
 8004610:	6813      	ldr	r3, [r2, #0]
 8004612:	1c58      	adds	r0, r3, #1
 8004614:	6010      	str	r0, [r2, #0]
 8004616:	7019      	strb	r1, [r3, #0]
 8004618:	4608      	mov	r0, r1
 800461a:	bc10      	pop	{r4}
 800461c:	4770      	bx	lr

0800461e <__sfputs_r>:
 800461e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004620:	4606      	mov	r6, r0
 8004622:	460f      	mov	r7, r1
 8004624:	4614      	mov	r4, r2
 8004626:	18d5      	adds	r5, r2, r3
 8004628:	42ac      	cmp	r4, r5
 800462a:	d101      	bne.n	8004630 <__sfputs_r+0x12>
 800462c:	2000      	movs	r0, #0
 800462e:	e007      	b.n	8004640 <__sfputs_r+0x22>
 8004630:	463a      	mov	r2, r7
 8004632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004636:	4630      	mov	r0, r6
 8004638:	f7ff ffdc 	bl	80045f4 <__sfputc_r>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d1f3      	bne.n	8004628 <__sfputs_r+0xa>
 8004640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004644 <_vfiprintf_r>:
 8004644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004648:	460c      	mov	r4, r1
 800464a:	b09d      	sub	sp, #116	; 0x74
 800464c:	4617      	mov	r7, r2
 800464e:	461d      	mov	r5, r3
 8004650:	4606      	mov	r6, r0
 8004652:	b118      	cbz	r0, 800465c <_vfiprintf_r+0x18>
 8004654:	6983      	ldr	r3, [r0, #24]
 8004656:	b90b      	cbnz	r3, 800465c <_vfiprintf_r+0x18>
 8004658:	f7ff fee8 	bl	800442c <__sinit>
 800465c:	4b7c      	ldr	r3, [pc, #496]	; (8004850 <_vfiprintf_r+0x20c>)
 800465e:	429c      	cmp	r4, r3
 8004660:	d158      	bne.n	8004714 <_vfiprintf_r+0xd0>
 8004662:	6874      	ldr	r4, [r6, #4]
 8004664:	89a3      	ldrh	r3, [r4, #12]
 8004666:	0718      	lsls	r0, r3, #28
 8004668:	d55e      	bpl.n	8004728 <_vfiprintf_r+0xe4>
 800466a:	6923      	ldr	r3, [r4, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d05b      	beq.n	8004728 <_vfiprintf_r+0xe4>
 8004670:	2300      	movs	r3, #0
 8004672:	9309      	str	r3, [sp, #36]	; 0x24
 8004674:	2320      	movs	r3, #32
 8004676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800467a:	2330      	movs	r3, #48	; 0x30
 800467c:	f04f 0b01 	mov.w	fp, #1
 8004680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004684:	9503      	str	r5, [sp, #12]
 8004686:	46b8      	mov	r8, r7
 8004688:	4645      	mov	r5, r8
 800468a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800468e:	b10b      	cbz	r3, 8004694 <_vfiprintf_r+0x50>
 8004690:	2b25      	cmp	r3, #37	; 0x25
 8004692:	d154      	bne.n	800473e <_vfiprintf_r+0xfa>
 8004694:	ebb8 0a07 	subs.w	sl, r8, r7
 8004698:	d00b      	beq.n	80046b2 <_vfiprintf_r+0x6e>
 800469a:	4653      	mov	r3, sl
 800469c:	463a      	mov	r2, r7
 800469e:	4621      	mov	r1, r4
 80046a0:	4630      	mov	r0, r6
 80046a2:	f7ff ffbc 	bl	800461e <__sfputs_r>
 80046a6:	3001      	adds	r0, #1
 80046a8:	f000 80c2 	beq.w	8004830 <_vfiprintf_r+0x1ec>
 80046ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ae:	4453      	add	r3, sl
 80046b0:	9309      	str	r3, [sp, #36]	; 0x24
 80046b2:	f898 3000 	ldrb.w	r3, [r8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 80ba 	beq.w	8004830 <_vfiprintf_r+0x1ec>
 80046bc:	2300      	movs	r3, #0
 80046be:	f04f 32ff 	mov.w	r2, #4294967295
 80046c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046c6:	9304      	str	r3, [sp, #16]
 80046c8:	9307      	str	r3, [sp, #28]
 80046ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046ce:	931a      	str	r3, [sp, #104]	; 0x68
 80046d0:	46a8      	mov	r8, r5
 80046d2:	2205      	movs	r2, #5
 80046d4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80046d8:	485e      	ldr	r0, [pc, #376]	; (8004854 <_vfiprintf_r+0x210>)
 80046da:	f000 fcad 	bl	8005038 <memchr>
 80046de:	9b04      	ldr	r3, [sp, #16]
 80046e0:	bb78      	cbnz	r0, 8004742 <_vfiprintf_r+0xfe>
 80046e2:	06d9      	lsls	r1, r3, #27
 80046e4:	bf44      	itt	mi
 80046e6:	2220      	movmi	r2, #32
 80046e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80046ec:	071a      	lsls	r2, r3, #28
 80046ee:	bf44      	itt	mi
 80046f0:	222b      	movmi	r2, #43	; 0x2b
 80046f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80046f6:	782a      	ldrb	r2, [r5, #0]
 80046f8:	2a2a      	cmp	r2, #42	; 0x2a
 80046fa:	d02a      	beq.n	8004752 <_vfiprintf_r+0x10e>
 80046fc:	46a8      	mov	r8, r5
 80046fe:	2000      	movs	r0, #0
 8004700:	250a      	movs	r5, #10
 8004702:	9a07      	ldr	r2, [sp, #28]
 8004704:	4641      	mov	r1, r8
 8004706:	f811 3b01 	ldrb.w	r3, [r1], #1
 800470a:	3b30      	subs	r3, #48	; 0x30
 800470c:	2b09      	cmp	r3, #9
 800470e:	d969      	bls.n	80047e4 <_vfiprintf_r+0x1a0>
 8004710:	b360      	cbz	r0, 800476c <_vfiprintf_r+0x128>
 8004712:	e024      	b.n	800475e <_vfiprintf_r+0x11a>
 8004714:	4b50      	ldr	r3, [pc, #320]	; (8004858 <_vfiprintf_r+0x214>)
 8004716:	429c      	cmp	r4, r3
 8004718:	d101      	bne.n	800471e <_vfiprintf_r+0xda>
 800471a:	68b4      	ldr	r4, [r6, #8]
 800471c:	e7a2      	b.n	8004664 <_vfiprintf_r+0x20>
 800471e:	4b4f      	ldr	r3, [pc, #316]	; (800485c <_vfiprintf_r+0x218>)
 8004720:	429c      	cmp	r4, r3
 8004722:	bf08      	it	eq
 8004724:	68f4      	ldreq	r4, [r6, #12]
 8004726:	e79d      	b.n	8004664 <_vfiprintf_r+0x20>
 8004728:	4621      	mov	r1, r4
 800472a:	4630      	mov	r0, r6
 800472c:	f000 fae0 	bl	8004cf0 <__swsetup_r>
 8004730:	2800      	cmp	r0, #0
 8004732:	d09d      	beq.n	8004670 <_vfiprintf_r+0x2c>
 8004734:	f04f 30ff 	mov.w	r0, #4294967295
 8004738:	b01d      	add	sp, #116	; 0x74
 800473a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800473e:	46a8      	mov	r8, r5
 8004740:	e7a2      	b.n	8004688 <_vfiprintf_r+0x44>
 8004742:	4a44      	ldr	r2, [pc, #272]	; (8004854 <_vfiprintf_r+0x210>)
 8004744:	4645      	mov	r5, r8
 8004746:	1a80      	subs	r0, r0, r2
 8004748:	fa0b f000 	lsl.w	r0, fp, r0
 800474c:	4318      	orrs	r0, r3
 800474e:	9004      	str	r0, [sp, #16]
 8004750:	e7be      	b.n	80046d0 <_vfiprintf_r+0x8c>
 8004752:	9a03      	ldr	r2, [sp, #12]
 8004754:	1d11      	adds	r1, r2, #4
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	9103      	str	r1, [sp, #12]
 800475a:	2a00      	cmp	r2, #0
 800475c:	db01      	blt.n	8004762 <_vfiprintf_r+0x11e>
 800475e:	9207      	str	r2, [sp, #28]
 8004760:	e004      	b.n	800476c <_vfiprintf_r+0x128>
 8004762:	4252      	negs	r2, r2
 8004764:	f043 0302 	orr.w	r3, r3, #2
 8004768:	9207      	str	r2, [sp, #28]
 800476a:	9304      	str	r3, [sp, #16]
 800476c:	f898 3000 	ldrb.w	r3, [r8]
 8004770:	2b2e      	cmp	r3, #46	; 0x2e
 8004772:	d10e      	bne.n	8004792 <_vfiprintf_r+0x14e>
 8004774:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004778:	2b2a      	cmp	r3, #42	; 0x2a
 800477a:	d138      	bne.n	80047ee <_vfiprintf_r+0x1aa>
 800477c:	9b03      	ldr	r3, [sp, #12]
 800477e:	f108 0802 	add.w	r8, r8, #2
 8004782:	1d1a      	adds	r2, r3, #4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	9203      	str	r2, [sp, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	bfb8      	it	lt
 800478c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004790:	9305      	str	r3, [sp, #20]
 8004792:	4d33      	ldr	r5, [pc, #204]	; (8004860 <_vfiprintf_r+0x21c>)
 8004794:	2203      	movs	r2, #3
 8004796:	f898 1000 	ldrb.w	r1, [r8]
 800479a:	4628      	mov	r0, r5
 800479c:	f000 fc4c 	bl	8005038 <memchr>
 80047a0:	b140      	cbz	r0, 80047b4 <_vfiprintf_r+0x170>
 80047a2:	2340      	movs	r3, #64	; 0x40
 80047a4:	1b40      	subs	r0, r0, r5
 80047a6:	fa03 f000 	lsl.w	r0, r3, r0
 80047aa:	9b04      	ldr	r3, [sp, #16]
 80047ac:	f108 0801 	add.w	r8, r8, #1
 80047b0:	4303      	orrs	r3, r0
 80047b2:	9304      	str	r3, [sp, #16]
 80047b4:	f898 1000 	ldrb.w	r1, [r8]
 80047b8:	2206      	movs	r2, #6
 80047ba:	482a      	ldr	r0, [pc, #168]	; (8004864 <_vfiprintf_r+0x220>)
 80047bc:	f108 0701 	add.w	r7, r8, #1
 80047c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047c4:	f000 fc38 	bl	8005038 <memchr>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d037      	beq.n	800483c <_vfiprintf_r+0x1f8>
 80047cc:	4b26      	ldr	r3, [pc, #152]	; (8004868 <_vfiprintf_r+0x224>)
 80047ce:	bb1b      	cbnz	r3, 8004818 <_vfiprintf_r+0x1d4>
 80047d0:	9b03      	ldr	r3, [sp, #12]
 80047d2:	3307      	adds	r3, #7
 80047d4:	f023 0307 	bic.w	r3, r3, #7
 80047d8:	3308      	adds	r3, #8
 80047da:	9303      	str	r3, [sp, #12]
 80047dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047de:	444b      	add	r3, r9
 80047e0:	9309      	str	r3, [sp, #36]	; 0x24
 80047e2:	e750      	b.n	8004686 <_vfiprintf_r+0x42>
 80047e4:	fb05 3202 	mla	r2, r5, r2, r3
 80047e8:	2001      	movs	r0, #1
 80047ea:	4688      	mov	r8, r1
 80047ec:	e78a      	b.n	8004704 <_vfiprintf_r+0xc0>
 80047ee:	2300      	movs	r3, #0
 80047f0:	250a      	movs	r5, #10
 80047f2:	4619      	mov	r1, r3
 80047f4:	f108 0801 	add.w	r8, r8, #1
 80047f8:	9305      	str	r3, [sp, #20]
 80047fa:	4640      	mov	r0, r8
 80047fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004800:	3a30      	subs	r2, #48	; 0x30
 8004802:	2a09      	cmp	r2, #9
 8004804:	d903      	bls.n	800480e <_vfiprintf_r+0x1ca>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0c3      	beq.n	8004792 <_vfiprintf_r+0x14e>
 800480a:	9105      	str	r1, [sp, #20]
 800480c:	e7c1      	b.n	8004792 <_vfiprintf_r+0x14e>
 800480e:	fb05 2101 	mla	r1, r5, r1, r2
 8004812:	2301      	movs	r3, #1
 8004814:	4680      	mov	r8, r0
 8004816:	e7f0      	b.n	80047fa <_vfiprintf_r+0x1b6>
 8004818:	ab03      	add	r3, sp, #12
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	4622      	mov	r2, r4
 800481e:	4b13      	ldr	r3, [pc, #76]	; (800486c <_vfiprintf_r+0x228>)
 8004820:	a904      	add	r1, sp, #16
 8004822:	4630      	mov	r0, r6
 8004824:	f3af 8000 	nop.w
 8004828:	f1b0 3fff 	cmp.w	r0, #4294967295
 800482c:	4681      	mov	r9, r0
 800482e:	d1d5      	bne.n	80047dc <_vfiprintf_r+0x198>
 8004830:	89a3      	ldrh	r3, [r4, #12]
 8004832:	065b      	lsls	r3, r3, #25
 8004834:	f53f af7e 	bmi.w	8004734 <_vfiprintf_r+0xf0>
 8004838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800483a:	e77d      	b.n	8004738 <_vfiprintf_r+0xf4>
 800483c:	ab03      	add	r3, sp, #12
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	4622      	mov	r2, r4
 8004842:	4b0a      	ldr	r3, [pc, #40]	; (800486c <_vfiprintf_r+0x228>)
 8004844:	a904      	add	r1, sp, #16
 8004846:	4630      	mov	r0, r6
 8004848:	f000 f888 	bl	800495c <_printf_i>
 800484c:	e7ec      	b.n	8004828 <_vfiprintf_r+0x1e4>
 800484e:	bf00      	nop
 8004850:	080051d8 	.word	0x080051d8
 8004854:	08005218 	.word	0x08005218
 8004858:	080051f8 	.word	0x080051f8
 800485c:	080051b8 	.word	0x080051b8
 8004860:	0800521e 	.word	0x0800521e
 8004864:	08005222 	.word	0x08005222
 8004868:	00000000 	.word	0x00000000
 800486c:	0800461f 	.word	0x0800461f

08004870 <_printf_common>:
 8004870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004874:	4691      	mov	r9, r2
 8004876:	461f      	mov	r7, r3
 8004878:	688a      	ldr	r2, [r1, #8]
 800487a:	690b      	ldr	r3, [r1, #16]
 800487c:	4606      	mov	r6, r0
 800487e:	4293      	cmp	r3, r2
 8004880:	bfb8      	it	lt
 8004882:	4613      	movlt	r3, r2
 8004884:	f8c9 3000 	str.w	r3, [r9]
 8004888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800488c:	460c      	mov	r4, r1
 800488e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004892:	b112      	cbz	r2, 800489a <_printf_common+0x2a>
 8004894:	3301      	adds	r3, #1
 8004896:	f8c9 3000 	str.w	r3, [r9]
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	0699      	lsls	r1, r3, #26
 800489e:	bf42      	ittt	mi
 80048a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048a4:	3302      	addmi	r3, #2
 80048a6:	f8c9 3000 	strmi.w	r3, [r9]
 80048aa:	6825      	ldr	r5, [r4, #0]
 80048ac:	f015 0506 	ands.w	r5, r5, #6
 80048b0:	d107      	bne.n	80048c2 <_printf_common+0x52>
 80048b2:	f104 0a19 	add.w	sl, r4, #25
 80048b6:	68e3      	ldr	r3, [r4, #12]
 80048b8:	f8d9 2000 	ldr.w	r2, [r9]
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	42ab      	cmp	r3, r5
 80048c0:	dc29      	bgt.n	8004916 <_printf_common+0xa6>
 80048c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048c6:	6822      	ldr	r2, [r4, #0]
 80048c8:	3300      	adds	r3, #0
 80048ca:	bf18      	it	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	0692      	lsls	r2, r2, #26
 80048d0:	d42e      	bmi.n	8004930 <_printf_common+0xc0>
 80048d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048d6:	4639      	mov	r1, r7
 80048d8:	4630      	mov	r0, r6
 80048da:	47c0      	blx	r8
 80048dc:	3001      	adds	r0, #1
 80048de:	d021      	beq.n	8004924 <_printf_common+0xb4>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	68e5      	ldr	r5, [r4, #12]
 80048e4:	f003 0306 	and.w	r3, r3, #6
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	bf18      	it	ne
 80048ec:	2500      	movne	r5, #0
 80048ee:	f8d9 2000 	ldr.w	r2, [r9]
 80048f2:	f04f 0900 	mov.w	r9, #0
 80048f6:	bf08      	it	eq
 80048f8:	1aad      	subeq	r5, r5, r2
 80048fa:	68a3      	ldr	r3, [r4, #8]
 80048fc:	6922      	ldr	r2, [r4, #16]
 80048fe:	bf08      	it	eq
 8004900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004904:	4293      	cmp	r3, r2
 8004906:	bfc4      	itt	gt
 8004908:	1a9b      	subgt	r3, r3, r2
 800490a:	18ed      	addgt	r5, r5, r3
 800490c:	341a      	adds	r4, #26
 800490e:	454d      	cmp	r5, r9
 8004910:	d11a      	bne.n	8004948 <_printf_common+0xd8>
 8004912:	2000      	movs	r0, #0
 8004914:	e008      	b.n	8004928 <_printf_common+0xb8>
 8004916:	2301      	movs	r3, #1
 8004918:	4652      	mov	r2, sl
 800491a:	4639      	mov	r1, r7
 800491c:	4630      	mov	r0, r6
 800491e:	47c0      	blx	r8
 8004920:	3001      	adds	r0, #1
 8004922:	d103      	bne.n	800492c <_printf_common+0xbc>
 8004924:	f04f 30ff 	mov.w	r0, #4294967295
 8004928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800492c:	3501      	adds	r5, #1
 800492e:	e7c2      	b.n	80048b6 <_printf_common+0x46>
 8004930:	2030      	movs	r0, #48	; 0x30
 8004932:	18e1      	adds	r1, r4, r3
 8004934:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800493e:	4422      	add	r2, r4
 8004940:	3302      	adds	r3, #2
 8004942:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004946:	e7c4      	b.n	80048d2 <_printf_common+0x62>
 8004948:	2301      	movs	r3, #1
 800494a:	4622      	mov	r2, r4
 800494c:	4639      	mov	r1, r7
 800494e:	4630      	mov	r0, r6
 8004950:	47c0      	blx	r8
 8004952:	3001      	adds	r0, #1
 8004954:	d0e6      	beq.n	8004924 <_printf_common+0xb4>
 8004956:	f109 0901 	add.w	r9, r9, #1
 800495a:	e7d8      	b.n	800490e <_printf_common+0x9e>

0800495c <_printf_i>:
 800495c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004960:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004964:	460c      	mov	r4, r1
 8004966:	7e09      	ldrb	r1, [r1, #24]
 8004968:	b085      	sub	sp, #20
 800496a:	296e      	cmp	r1, #110	; 0x6e
 800496c:	4617      	mov	r7, r2
 800496e:	4606      	mov	r6, r0
 8004970:	4698      	mov	r8, r3
 8004972:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004974:	f000 80b3 	beq.w	8004ade <_printf_i+0x182>
 8004978:	d822      	bhi.n	80049c0 <_printf_i+0x64>
 800497a:	2963      	cmp	r1, #99	; 0x63
 800497c:	d036      	beq.n	80049ec <_printf_i+0x90>
 800497e:	d80a      	bhi.n	8004996 <_printf_i+0x3a>
 8004980:	2900      	cmp	r1, #0
 8004982:	f000 80b9 	beq.w	8004af8 <_printf_i+0x19c>
 8004986:	2958      	cmp	r1, #88	; 0x58
 8004988:	f000 8083 	beq.w	8004a92 <_printf_i+0x136>
 800498c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004990:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004994:	e032      	b.n	80049fc <_printf_i+0xa0>
 8004996:	2964      	cmp	r1, #100	; 0x64
 8004998:	d001      	beq.n	800499e <_printf_i+0x42>
 800499a:	2969      	cmp	r1, #105	; 0x69
 800499c:	d1f6      	bne.n	800498c <_printf_i+0x30>
 800499e:	6820      	ldr	r0, [r4, #0]
 80049a0:	6813      	ldr	r3, [r2, #0]
 80049a2:	0605      	lsls	r5, r0, #24
 80049a4:	f103 0104 	add.w	r1, r3, #4
 80049a8:	d52a      	bpl.n	8004a00 <_printf_i+0xa4>
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6011      	str	r1, [r2, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	da03      	bge.n	80049ba <_printf_i+0x5e>
 80049b2:	222d      	movs	r2, #45	; 0x2d
 80049b4:	425b      	negs	r3, r3
 80049b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049ba:	486f      	ldr	r0, [pc, #444]	; (8004b78 <_printf_i+0x21c>)
 80049bc:	220a      	movs	r2, #10
 80049be:	e039      	b.n	8004a34 <_printf_i+0xd8>
 80049c0:	2973      	cmp	r1, #115	; 0x73
 80049c2:	f000 809d 	beq.w	8004b00 <_printf_i+0x1a4>
 80049c6:	d808      	bhi.n	80049da <_printf_i+0x7e>
 80049c8:	296f      	cmp	r1, #111	; 0x6f
 80049ca:	d020      	beq.n	8004a0e <_printf_i+0xb2>
 80049cc:	2970      	cmp	r1, #112	; 0x70
 80049ce:	d1dd      	bne.n	800498c <_printf_i+0x30>
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	f043 0320 	orr.w	r3, r3, #32
 80049d6:	6023      	str	r3, [r4, #0]
 80049d8:	e003      	b.n	80049e2 <_printf_i+0x86>
 80049da:	2975      	cmp	r1, #117	; 0x75
 80049dc:	d017      	beq.n	8004a0e <_printf_i+0xb2>
 80049de:	2978      	cmp	r1, #120	; 0x78
 80049e0:	d1d4      	bne.n	800498c <_printf_i+0x30>
 80049e2:	2378      	movs	r3, #120	; 0x78
 80049e4:	4865      	ldr	r0, [pc, #404]	; (8004b7c <_printf_i+0x220>)
 80049e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049ea:	e055      	b.n	8004a98 <_printf_i+0x13c>
 80049ec:	6813      	ldr	r3, [r2, #0]
 80049ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049f2:	1d19      	adds	r1, r3, #4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6011      	str	r1, [r2, #0]
 80049f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049fc:	2301      	movs	r3, #1
 80049fe:	e08c      	b.n	8004b1a <_printf_i+0x1be>
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a06:	6011      	str	r1, [r2, #0]
 8004a08:	bf18      	it	ne
 8004a0a:	b21b      	sxthne	r3, r3
 8004a0c:	e7cf      	b.n	80049ae <_printf_i+0x52>
 8004a0e:	6813      	ldr	r3, [r2, #0]
 8004a10:	6825      	ldr	r5, [r4, #0]
 8004a12:	1d18      	adds	r0, r3, #4
 8004a14:	6010      	str	r0, [r2, #0]
 8004a16:	0628      	lsls	r0, r5, #24
 8004a18:	d501      	bpl.n	8004a1e <_printf_i+0xc2>
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	e002      	b.n	8004a24 <_printf_i+0xc8>
 8004a1e:	0668      	lsls	r0, r5, #25
 8004a20:	d5fb      	bpl.n	8004a1a <_printf_i+0xbe>
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	296f      	cmp	r1, #111	; 0x6f
 8004a26:	bf14      	ite	ne
 8004a28:	220a      	movne	r2, #10
 8004a2a:	2208      	moveq	r2, #8
 8004a2c:	4852      	ldr	r0, [pc, #328]	; (8004b78 <_printf_i+0x21c>)
 8004a2e:	2100      	movs	r1, #0
 8004a30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a34:	6865      	ldr	r5, [r4, #4]
 8004a36:	2d00      	cmp	r5, #0
 8004a38:	60a5      	str	r5, [r4, #8]
 8004a3a:	f2c0 8095 	blt.w	8004b68 <_printf_i+0x20c>
 8004a3e:	6821      	ldr	r1, [r4, #0]
 8004a40:	f021 0104 	bic.w	r1, r1, #4
 8004a44:	6021      	str	r1, [r4, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d13d      	bne.n	8004ac6 <_printf_i+0x16a>
 8004a4a:	2d00      	cmp	r5, #0
 8004a4c:	f040 808e 	bne.w	8004b6c <_printf_i+0x210>
 8004a50:	4665      	mov	r5, ip
 8004a52:	2a08      	cmp	r2, #8
 8004a54:	d10b      	bne.n	8004a6e <_printf_i+0x112>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	07db      	lsls	r3, r3, #31
 8004a5a:	d508      	bpl.n	8004a6e <_printf_i+0x112>
 8004a5c:	6923      	ldr	r3, [r4, #16]
 8004a5e:	6862      	ldr	r2, [r4, #4]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	bfde      	ittt	le
 8004a64:	2330      	movle	r3, #48	; 0x30
 8004a66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a6e:	ebac 0305 	sub.w	r3, ip, r5
 8004a72:	6123      	str	r3, [r4, #16]
 8004a74:	f8cd 8000 	str.w	r8, [sp]
 8004a78:	463b      	mov	r3, r7
 8004a7a:	aa03      	add	r2, sp, #12
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4630      	mov	r0, r6
 8004a80:	f7ff fef6 	bl	8004870 <_printf_common>
 8004a84:	3001      	adds	r0, #1
 8004a86:	d14d      	bne.n	8004b24 <_printf_i+0x1c8>
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	b005      	add	sp, #20
 8004a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a92:	4839      	ldr	r0, [pc, #228]	; (8004b78 <_printf_i+0x21c>)
 8004a94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a98:	6813      	ldr	r3, [r2, #0]
 8004a9a:	6821      	ldr	r1, [r4, #0]
 8004a9c:	1d1d      	adds	r5, r3, #4
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6015      	str	r5, [r2, #0]
 8004aa2:	060a      	lsls	r2, r1, #24
 8004aa4:	d50b      	bpl.n	8004abe <_printf_i+0x162>
 8004aa6:	07ca      	lsls	r2, r1, #31
 8004aa8:	bf44      	itt	mi
 8004aaa:	f041 0120 	orrmi.w	r1, r1, #32
 8004aae:	6021      	strmi	r1, [r4, #0]
 8004ab0:	b91b      	cbnz	r3, 8004aba <_printf_i+0x15e>
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	f022 0220 	bic.w	r2, r2, #32
 8004ab8:	6022      	str	r2, [r4, #0]
 8004aba:	2210      	movs	r2, #16
 8004abc:	e7b7      	b.n	8004a2e <_printf_i+0xd2>
 8004abe:	064d      	lsls	r5, r1, #25
 8004ac0:	bf48      	it	mi
 8004ac2:	b29b      	uxthmi	r3, r3
 8004ac4:	e7ef      	b.n	8004aa6 <_printf_i+0x14a>
 8004ac6:	4665      	mov	r5, ip
 8004ac8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004acc:	fb02 3311 	mls	r3, r2, r1, r3
 8004ad0:	5cc3      	ldrb	r3, [r0, r3]
 8004ad2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	2900      	cmp	r1, #0
 8004ada:	d1f5      	bne.n	8004ac8 <_printf_i+0x16c>
 8004adc:	e7b9      	b.n	8004a52 <_printf_i+0xf6>
 8004ade:	6813      	ldr	r3, [r2, #0]
 8004ae0:	6825      	ldr	r5, [r4, #0]
 8004ae2:	1d18      	adds	r0, r3, #4
 8004ae4:	6961      	ldr	r1, [r4, #20]
 8004ae6:	6010      	str	r0, [r2, #0]
 8004ae8:	0628      	lsls	r0, r5, #24
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	d501      	bpl.n	8004af2 <_printf_i+0x196>
 8004aee:	6019      	str	r1, [r3, #0]
 8004af0:	e002      	b.n	8004af8 <_printf_i+0x19c>
 8004af2:	066a      	lsls	r2, r5, #25
 8004af4:	d5fb      	bpl.n	8004aee <_printf_i+0x192>
 8004af6:	8019      	strh	r1, [r3, #0]
 8004af8:	2300      	movs	r3, #0
 8004afa:	4665      	mov	r5, ip
 8004afc:	6123      	str	r3, [r4, #16]
 8004afe:	e7b9      	b.n	8004a74 <_printf_i+0x118>
 8004b00:	6813      	ldr	r3, [r2, #0]
 8004b02:	1d19      	adds	r1, r3, #4
 8004b04:	6011      	str	r1, [r2, #0]
 8004b06:	681d      	ldr	r5, [r3, #0]
 8004b08:	6862      	ldr	r2, [r4, #4]
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	f000 fa93 	bl	8005038 <memchr>
 8004b12:	b108      	cbz	r0, 8004b18 <_printf_i+0x1bc>
 8004b14:	1b40      	subs	r0, r0, r5
 8004b16:	6060      	str	r0, [r4, #4]
 8004b18:	6863      	ldr	r3, [r4, #4]
 8004b1a:	6123      	str	r3, [r4, #16]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b22:	e7a7      	b.n	8004a74 <_printf_i+0x118>
 8004b24:	6923      	ldr	r3, [r4, #16]
 8004b26:	462a      	mov	r2, r5
 8004b28:	4639      	mov	r1, r7
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	47c0      	blx	r8
 8004b2e:	3001      	adds	r0, #1
 8004b30:	d0aa      	beq.n	8004a88 <_printf_i+0x12c>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	079b      	lsls	r3, r3, #30
 8004b36:	d413      	bmi.n	8004b60 <_printf_i+0x204>
 8004b38:	68e0      	ldr	r0, [r4, #12]
 8004b3a:	9b03      	ldr	r3, [sp, #12]
 8004b3c:	4298      	cmp	r0, r3
 8004b3e:	bfb8      	it	lt
 8004b40:	4618      	movlt	r0, r3
 8004b42:	e7a3      	b.n	8004a8c <_printf_i+0x130>
 8004b44:	2301      	movs	r3, #1
 8004b46:	464a      	mov	r2, r9
 8004b48:	4639      	mov	r1, r7
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	47c0      	blx	r8
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d09a      	beq.n	8004a88 <_printf_i+0x12c>
 8004b52:	3501      	adds	r5, #1
 8004b54:	68e3      	ldr	r3, [r4, #12]
 8004b56:	9a03      	ldr	r2, [sp, #12]
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	42ab      	cmp	r3, r5
 8004b5c:	dcf2      	bgt.n	8004b44 <_printf_i+0x1e8>
 8004b5e:	e7eb      	b.n	8004b38 <_printf_i+0x1dc>
 8004b60:	2500      	movs	r5, #0
 8004b62:	f104 0919 	add.w	r9, r4, #25
 8004b66:	e7f5      	b.n	8004b54 <_printf_i+0x1f8>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1ac      	bne.n	8004ac6 <_printf_i+0x16a>
 8004b6c:	7803      	ldrb	r3, [r0, #0]
 8004b6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b76:	e76c      	b.n	8004a52 <_printf_i+0xf6>
 8004b78:	08005229 	.word	0x08005229
 8004b7c:	0800523a 	.word	0x0800523a

08004b80 <_sbrk_r>:
 8004b80:	b538      	push	{r3, r4, r5, lr}
 8004b82:	2300      	movs	r3, #0
 8004b84:	4c05      	ldr	r4, [pc, #20]	; (8004b9c <_sbrk_r+0x1c>)
 8004b86:	4605      	mov	r5, r0
 8004b88:	4608      	mov	r0, r1
 8004b8a:	6023      	str	r3, [r4, #0]
 8004b8c:	f7fc fa7c 	bl	8001088 <_sbrk>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d102      	bne.n	8004b9a <_sbrk_r+0x1a>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	b103      	cbz	r3, 8004b9a <_sbrk_r+0x1a>
 8004b98:	602b      	str	r3, [r5, #0]
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	20000218 	.word	0x20000218

08004ba0 <__sread>:
 8004ba0:	b510      	push	{r4, lr}
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba8:	f000 faa2 	bl	80050f0 <_read_r>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	bfab      	itete	ge
 8004bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8004bb4:	181b      	addge	r3, r3, r0
 8004bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bba:	bfac      	ite	ge
 8004bbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bbe:	81a3      	strhlt	r3, [r4, #12]
 8004bc0:	bd10      	pop	{r4, pc}

08004bc2 <__swrite>:
 8004bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc6:	461f      	mov	r7, r3
 8004bc8:	898b      	ldrh	r3, [r1, #12]
 8004bca:	4605      	mov	r5, r0
 8004bcc:	05db      	lsls	r3, r3, #23
 8004bce:	460c      	mov	r4, r1
 8004bd0:	4616      	mov	r6, r2
 8004bd2:	d505      	bpl.n	8004be0 <__swrite+0x1e>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bdc:	f000 f9b6 	bl	8004f4c <_lseek_r>
 8004be0:	89a3      	ldrh	r3, [r4, #12]
 8004be2:	4632      	mov	r2, r6
 8004be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004be8:	81a3      	strh	r3, [r4, #12]
 8004bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bee:	463b      	mov	r3, r7
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf6:	f000 b869 	b.w	8004ccc <_write_r>

08004bfa <__sseek>:
 8004bfa:	b510      	push	{r4, lr}
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c02:	f000 f9a3 	bl	8004f4c <_lseek_r>
 8004c06:	1c43      	adds	r3, r0, #1
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	bf15      	itete	ne
 8004c0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c16:	81a3      	strheq	r3, [r4, #12]
 8004c18:	bf18      	it	ne
 8004c1a:	81a3      	strhne	r3, [r4, #12]
 8004c1c:	bd10      	pop	{r4, pc}

08004c1e <__sclose>:
 8004c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c22:	f000 b8d3 	b.w	8004dcc <_close_r>
	...

08004c28 <__swbuf_r>:
 8004c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2a:	460e      	mov	r6, r1
 8004c2c:	4614      	mov	r4, r2
 8004c2e:	4605      	mov	r5, r0
 8004c30:	b118      	cbz	r0, 8004c3a <__swbuf_r+0x12>
 8004c32:	6983      	ldr	r3, [r0, #24]
 8004c34:	b90b      	cbnz	r3, 8004c3a <__swbuf_r+0x12>
 8004c36:	f7ff fbf9 	bl	800442c <__sinit>
 8004c3a:	4b21      	ldr	r3, [pc, #132]	; (8004cc0 <__swbuf_r+0x98>)
 8004c3c:	429c      	cmp	r4, r3
 8004c3e:	d12a      	bne.n	8004c96 <__swbuf_r+0x6e>
 8004c40:	686c      	ldr	r4, [r5, #4]
 8004c42:	69a3      	ldr	r3, [r4, #24]
 8004c44:	60a3      	str	r3, [r4, #8]
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	071a      	lsls	r2, r3, #28
 8004c4a:	d52e      	bpl.n	8004caa <__swbuf_r+0x82>
 8004c4c:	6923      	ldr	r3, [r4, #16]
 8004c4e:	b363      	cbz	r3, 8004caa <__swbuf_r+0x82>
 8004c50:	6923      	ldr	r3, [r4, #16]
 8004c52:	6820      	ldr	r0, [r4, #0]
 8004c54:	b2f6      	uxtb	r6, r6
 8004c56:	1ac0      	subs	r0, r0, r3
 8004c58:	6963      	ldr	r3, [r4, #20]
 8004c5a:	4637      	mov	r7, r6
 8004c5c:	4283      	cmp	r3, r0
 8004c5e:	dc04      	bgt.n	8004c6a <__swbuf_r+0x42>
 8004c60:	4621      	mov	r1, r4
 8004c62:	4628      	mov	r0, r5
 8004c64:	f000 f948 	bl	8004ef8 <_fflush_r>
 8004c68:	bb28      	cbnz	r0, 8004cb6 <__swbuf_r+0x8e>
 8004c6a:	68a3      	ldr	r3, [r4, #8]
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	60a3      	str	r3, [r4, #8]
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	6022      	str	r2, [r4, #0]
 8004c78:	701e      	strb	r6, [r3, #0]
 8004c7a:	6963      	ldr	r3, [r4, #20]
 8004c7c:	4283      	cmp	r3, r0
 8004c7e:	d004      	beq.n	8004c8a <__swbuf_r+0x62>
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	07db      	lsls	r3, r3, #31
 8004c84:	d519      	bpl.n	8004cba <__swbuf_r+0x92>
 8004c86:	2e0a      	cmp	r6, #10
 8004c88:	d117      	bne.n	8004cba <__swbuf_r+0x92>
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f000 f933 	bl	8004ef8 <_fflush_r>
 8004c92:	b190      	cbz	r0, 8004cba <__swbuf_r+0x92>
 8004c94:	e00f      	b.n	8004cb6 <__swbuf_r+0x8e>
 8004c96:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <__swbuf_r+0x9c>)
 8004c98:	429c      	cmp	r4, r3
 8004c9a:	d101      	bne.n	8004ca0 <__swbuf_r+0x78>
 8004c9c:	68ac      	ldr	r4, [r5, #8]
 8004c9e:	e7d0      	b.n	8004c42 <__swbuf_r+0x1a>
 8004ca0:	4b09      	ldr	r3, [pc, #36]	; (8004cc8 <__swbuf_r+0xa0>)
 8004ca2:	429c      	cmp	r4, r3
 8004ca4:	bf08      	it	eq
 8004ca6:	68ec      	ldreq	r4, [r5, #12]
 8004ca8:	e7cb      	b.n	8004c42 <__swbuf_r+0x1a>
 8004caa:	4621      	mov	r1, r4
 8004cac:	4628      	mov	r0, r5
 8004cae:	f000 f81f 	bl	8004cf0 <__swsetup_r>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d0cc      	beq.n	8004c50 <__swbuf_r+0x28>
 8004cb6:	f04f 37ff 	mov.w	r7, #4294967295
 8004cba:	4638      	mov	r0, r7
 8004cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	080051d8 	.word	0x080051d8
 8004cc4:	080051f8 	.word	0x080051f8
 8004cc8:	080051b8 	.word	0x080051b8

08004ccc <_write_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4605      	mov	r5, r0
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	4c05      	ldr	r4, [pc, #20]	; (8004cec <_write_r+0x20>)
 8004cd8:	6022      	str	r2, [r4, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f7fc f987 	bl	8000fee <_write>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d102      	bne.n	8004cea <_write_r+0x1e>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	b103      	cbz	r3, 8004cea <_write_r+0x1e>
 8004ce8:	602b      	str	r3, [r5, #0]
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	20000218 	.word	0x20000218

08004cf0 <__swsetup_r>:
 8004cf0:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <__swsetup_r+0xcc>)
 8004cf2:	b570      	push	{r4, r5, r6, lr}
 8004cf4:	681d      	ldr	r5, [r3, #0]
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	b125      	cbz	r5, 8004d06 <__swsetup_r+0x16>
 8004cfc:	69ab      	ldr	r3, [r5, #24]
 8004cfe:	b913      	cbnz	r3, 8004d06 <__swsetup_r+0x16>
 8004d00:	4628      	mov	r0, r5
 8004d02:	f7ff fb93 	bl	800442c <__sinit>
 8004d06:	4b2e      	ldr	r3, [pc, #184]	; (8004dc0 <__swsetup_r+0xd0>)
 8004d08:	429c      	cmp	r4, r3
 8004d0a:	d10f      	bne.n	8004d2c <__swsetup_r+0x3c>
 8004d0c:	686c      	ldr	r4, [r5, #4]
 8004d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	0715      	lsls	r5, r2, #28
 8004d16:	d42c      	bmi.n	8004d72 <__swsetup_r+0x82>
 8004d18:	06d0      	lsls	r0, r2, #27
 8004d1a:	d411      	bmi.n	8004d40 <__swsetup_r+0x50>
 8004d1c:	2209      	movs	r2, #9
 8004d1e:	6032      	str	r2, [r6, #0]
 8004d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d24:	81a3      	strh	r3, [r4, #12]
 8004d26:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2a:	e03e      	b.n	8004daa <__swsetup_r+0xba>
 8004d2c:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <__swsetup_r+0xd4>)
 8004d2e:	429c      	cmp	r4, r3
 8004d30:	d101      	bne.n	8004d36 <__swsetup_r+0x46>
 8004d32:	68ac      	ldr	r4, [r5, #8]
 8004d34:	e7eb      	b.n	8004d0e <__swsetup_r+0x1e>
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <__swsetup_r+0xd8>)
 8004d38:	429c      	cmp	r4, r3
 8004d3a:	bf08      	it	eq
 8004d3c:	68ec      	ldreq	r4, [r5, #12]
 8004d3e:	e7e6      	b.n	8004d0e <__swsetup_r+0x1e>
 8004d40:	0751      	lsls	r1, r2, #29
 8004d42:	d512      	bpl.n	8004d6a <__swsetup_r+0x7a>
 8004d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d46:	b141      	cbz	r1, 8004d5a <__swsetup_r+0x6a>
 8004d48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d4c:	4299      	cmp	r1, r3
 8004d4e:	d002      	beq.n	8004d56 <__swsetup_r+0x66>
 8004d50:	4630      	mov	r0, r6
 8004d52:	f000 f981 	bl	8005058 <_free_r>
 8004d56:	2300      	movs	r3, #0
 8004d58:	6363      	str	r3, [r4, #52]	; 0x34
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d60:	81a3      	strh	r3, [r4, #12]
 8004d62:	2300      	movs	r3, #0
 8004d64:	6063      	str	r3, [r4, #4]
 8004d66:	6923      	ldr	r3, [r4, #16]
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	89a3      	ldrh	r3, [r4, #12]
 8004d6c:	f043 0308 	orr.w	r3, r3, #8
 8004d70:	81a3      	strh	r3, [r4, #12]
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	b94b      	cbnz	r3, 8004d8a <__swsetup_r+0x9a>
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d80:	d003      	beq.n	8004d8a <__swsetup_r+0x9a>
 8004d82:	4621      	mov	r1, r4
 8004d84:	4630      	mov	r0, r6
 8004d86:	f000 f917 	bl	8004fb8 <__smakebuf_r>
 8004d8a:	89a2      	ldrh	r2, [r4, #12]
 8004d8c:	f012 0301 	ands.w	r3, r2, #1
 8004d90:	d00c      	beq.n	8004dac <__swsetup_r+0xbc>
 8004d92:	2300      	movs	r3, #0
 8004d94:	60a3      	str	r3, [r4, #8]
 8004d96:	6963      	ldr	r3, [r4, #20]
 8004d98:	425b      	negs	r3, r3
 8004d9a:	61a3      	str	r3, [r4, #24]
 8004d9c:	6923      	ldr	r3, [r4, #16]
 8004d9e:	b953      	cbnz	r3, 8004db6 <__swsetup_r+0xc6>
 8004da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004da4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004da8:	d1ba      	bne.n	8004d20 <__swsetup_r+0x30>
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	0792      	lsls	r2, r2, #30
 8004dae:	bf58      	it	pl
 8004db0:	6963      	ldrpl	r3, [r4, #20]
 8004db2:	60a3      	str	r3, [r4, #8]
 8004db4:	e7f2      	b.n	8004d9c <__swsetup_r+0xac>
 8004db6:	2000      	movs	r0, #0
 8004db8:	e7f7      	b.n	8004daa <__swsetup_r+0xba>
 8004dba:	bf00      	nop
 8004dbc:	2000000c 	.word	0x2000000c
 8004dc0:	080051d8 	.word	0x080051d8
 8004dc4:	080051f8 	.word	0x080051f8
 8004dc8:	080051b8 	.word	0x080051b8

08004dcc <_close_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	2300      	movs	r3, #0
 8004dd0:	4c05      	ldr	r4, [pc, #20]	; (8004de8 <_close_r+0x1c>)
 8004dd2:	4605      	mov	r5, r0
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	6023      	str	r3, [r4, #0]
 8004dd8:	f7fc f925 	bl	8001026 <_close>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d102      	bne.n	8004de6 <_close_r+0x1a>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	b103      	cbz	r3, 8004de6 <_close_r+0x1a>
 8004de4:	602b      	str	r3, [r5, #0]
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
 8004de8:	20000218 	.word	0x20000218

08004dec <__sflush_r>:
 8004dec:	898a      	ldrh	r2, [r1, #12]
 8004dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df2:	4605      	mov	r5, r0
 8004df4:	0710      	lsls	r0, r2, #28
 8004df6:	460c      	mov	r4, r1
 8004df8:	d458      	bmi.n	8004eac <__sflush_r+0xc0>
 8004dfa:	684b      	ldr	r3, [r1, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	dc05      	bgt.n	8004e0c <__sflush_r+0x20>
 8004e00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	dc02      	bgt.n	8004e0c <__sflush_r+0x20>
 8004e06:	2000      	movs	r0, #0
 8004e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	d0f9      	beq.n	8004e06 <__sflush_r+0x1a>
 8004e12:	2300      	movs	r3, #0
 8004e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e18:	682f      	ldr	r7, [r5, #0]
 8004e1a:	6a21      	ldr	r1, [r4, #32]
 8004e1c:	602b      	str	r3, [r5, #0]
 8004e1e:	d032      	beq.n	8004e86 <__sflush_r+0x9a>
 8004e20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	075a      	lsls	r2, r3, #29
 8004e26:	d505      	bpl.n	8004e34 <__sflush_r+0x48>
 8004e28:	6863      	ldr	r3, [r4, #4]
 8004e2a:	1ac0      	subs	r0, r0, r3
 8004e2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e2e:	b10b      	cbz	r3, 8004e34 <__sflush_r+0x48>
 8004e30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e32:	1ac0      	subs	r0, r0, r3
 8004e34:	2300      	movs	r3, #0
 8004e36:	4602      	mov	r2, r0
 8004e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e3a:	6a21      	ldr	r1, [r4, #32]
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	47b0      	blx	r6
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	89a3      	ldrh	r3, [r4, #12]
 8004e44:	d106      	bne.n	8004e54 <__sflush_r+0x68>
 8004e46:	6829      	ldr	r1, [r5, #0]
 8004e48:	291d      	cmp	r1, #29
 8004e4a:	d848      	bhi.n	8004ede <__sflush_r+0xf2>
 8004e4c:	4a29      	ldr	r2, [pc, #164]	; (8004ef4 <__sflush_r+0x108>)
 8004e4e:	40ca      	lsrs	r2, r1
 8004e50:	07d6      	lsls	r6, r2, #31
 8004e52:	d544      	bpl.n	8004ede <__sflush_r+0xf2>
 8004e54:	2200      	movs	r2, #0
 8004e56:	6062      	str	r2, [r4, #4]
 8004e58:	6922      	ldr	r2, [r4, #16]
 8004e5a:	04d9      	lsls	r1, r3, #19
 8004e5c:	6022      	str	r2, [r4, #0]
 8004e5e:	d504      	bpl.n	8004e6a <__sflush_r+0x7e>
 8004e60:	1c42      	adds	r2, r0, #1
 8004e62:	d101      	bne.n	8004e68 <__sflush_r+0x7c>
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	b903      	cbnz	r3, 8004e6a <__sflush_r+0x7e>
 8004e68:	6560      	str	r0, [r4, #84]	; 0x54
 8004e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e6c:	602f      	str	r7, [r5, #0]
 8004e6e:	2900      	cmp	r1, #0
 8004e70:	d0c9      	beq.n	8004e06 <__sflush_r+0x1a>
 8004e72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e76:	4299      	cmp	r1, r3
 8004e78:	d002      	beq.n	8004e80 <__sflush_r+0x94>
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f000 f8ec 	bl	8005058 <_free_r>
 8004e80:	2000      	movs	r0, #0
 8004e82:	6360      	str	r0, [r4, #52]	; 0x34
 8004e84:	e7c0      	b.n	8004e08 <__sflush_r+0x1c>
 8004e86:	2301      	movs	r3, #1
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b0      	blx	r6
 8004e8c:	1c41      	adds	r1, r0, #1
 8004e8e:	d1c8      	bne.n	8004e22 <__sflush_r+0x36>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0c5      	beq.n	8004e22 <__sflush_r+0x36>
 8004e96:	2b1d      	cmp	r3, #29
 8004e98:	d001      	beq.n	8004e9e <__sflush_r+0xb2>
 8004e9a:	2b16      	cmp	r3, #22
 8004e9c:	d101      	bne.n	8004ea2 <__sflush_r+0xb6>
 8004e9e:	602f      	str	r7, [r5, #0]
 8004ea0:	e7b1      	b.n	8004e06 <__sflush_r+0x1a>
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ea8:	81a3      	strh	r3, [r4, #12]
 8004eaa:	e7ad      	b.n	8004e08 <__sflush_r+0x1c>
 8004eac:	690f      	ldr	r7, [r1, #16]
 8004eae:	2f00      	cmp	r7, #0
 8004eb0:	d0a9      	beq.n	8004e06 <__sflush_r+0x1a>
 8004eb2:	0793      	lsls	r3, r2, #30
 8004eb4:	bf18      	it	ne
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	680e      	ldr	r6, [r1, #0]
 8004eba:	bf08      	it	eq
 8004ebc:	694b      	ldreq	r3, [r1, #20]
 8004ebe:	eba6 0807 	sub.w	r8, r6, r7
 8004ec2:	600f      	str	r7, [r1, #0]
 8004ec4:	608b      	str	r3, [r1, #8]
 8004ec6:	f1b8 0f00 	cmp.w	r8, #0
 8004eca:	dd9c      	ble.n	8004e06 <__sflush_r+0x1a>
 8004ecc:	4643      	mov	r3, r8
 8004ece:	463a      	mov	r2, r7
 8004ed0:	6a21      	ldr	r1, [r4, #32]
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ed6:	47b0      	blx	r6
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	dc06      	bgt.n	8004eea <__sflush_r+0xfe>
 8004edc:	89a3      	ldrh	r3, [r4, #12]
 8004ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ee2:	81a3      	strh	r3, [r4, #12]
 8004ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee8:	e78e      	b.n	8004e08 <__sflush_r+0x1c>
 8004eea:	4407      	add	r7, r0
 8004eec:	eba8 0800 	sub.w	r8, r8, r0
 8004ef0:	e7e9      	b.n	8004ec6 <__sflush_r+0xda>
 8004ef2:	bf00      	nop
 8004ef4:	20400001 	.word	0x20400001

08004ef8 <_fflush_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	690b      	ldr	r3, [r1, #16]
 8004efc:	4605      	mov	r5, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	b1db      	cbz	r3, 8004f3a <_fflush_r+0x42>
 8004f02:	b118      	cbz	r0, 8004f0c <_fflush_r+0x14>
 8004f04:	6983      	ldr	r3, [r0, #24]
 8004f06:	b90b      	cbnz	r3, 8004f0c <_fflush_r+0x14>
 8004f08:	f7ff fa90 	bl	800442c <__sinit>
 8004f0c:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <_fflush_r+0x48>)
 8004f0e:	429c      	cmp	r4, r3
 8004f10:	d109      	bne.n	8004f26 <_fflush_r+0x2e>
 8004f12:	686c      	ldr	r4, [r5, #4]
 8004f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f18:	b17b      	cbz	r3, 8004f3a <_fflush_r+0x42>
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f22:	f7ff bf63 	b.w	8004dec <__sflush_r>
 8004f26:	4b07      	ldr	r3, [pc, #28]	; (8004f44 <_fflush_r+0x4c>)
 8004f28:	429c      	cmp	r4, r3
 8004f2a:	d101      	bne.n	8004f30 <_fflush_r+0x38>
 8004f2c:	68ac      	ldr	r4, [r5, #8]
 8004f2e:	e7f1      	b.n	8004f14 <_fflush_r+0x1c>
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <_fflush_r+0x50>)
 8004f32:	429c      	cmp	r4, r3
 8004f34:	bf08      	it	eq
 8004f36:	68ec      	ldreq	r4, [r5, #12]
 8004f38:	e7ec      	b.n	8004f14 <_fflush_r+0x1c>
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	bd38      	pop	{r3, r4, r5, pc}
 8004f3e:	bf00      	nop
 8004f40:	080051d8 	.word	0x080051d8
 8004f44:	080051f8 	.word	0x080051f8
 8004f48:	080051b8 	.word	0x080051b8

08004f4c <_lseek_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	4605      	mov	r5, r0
 8004f50:	4608      	mov	r0, r1
 8004f52:	4611      	mov	r1, r2
 8004f54:	2200      	movs	r2, #0
 8004f56:	4c05      	ldr	r4, [pc, #20]	; (8004f6c <_lseek_r+0x20>)
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f7fc f887 	bl	800106e <_lseek>
 8004f60:	1c43      	adds	r3, r0, #1
 8004f62:	d102      	bne.n	8004f6a <_lseek_r+0x1e>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	b103      	cbz	r3, 8004f6a <_lseek_r+0x1e>
 8004f68:	602b      	str	r3, [r5, #0]
 8004f6a:	bd38      	pop	{r3, r4, r5, pc}
 8004f6c:	20000218 	.word	0x20000218

08004f70 <__swhatbuf_r>:
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	460e      	mov	r6, r1
 8004f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f78:	b096      	sub	sp, #88	; 0x58
 8004f7a:	2900      	cmp	r1, #0
 8004f7c:	4614      	mov	r4, r2
 8004f7e:	461d      	mov	r5, r3
 8004f80:	da07      	bge.n	8004f92 <__swhatbuf_r+0x22>
 8004f82:	2300      	movs	r3, #0
 8004f84:	602b      	str	r3, [r5, #0]
 8004f86:	89b3      	ldrh	r3, [r6, #12]
 8004f88:	061a      	lsls	r2, r3, #24
 8004f8a:	d410      	bmi.n	8004fae <__swhatbuf_r+0x3e>
 8004f8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f90:	e00e      	b.n	8004fb0 <__swhatbuf_r+0x40>
 8004f92:	466a      	mov	r2, sp
 8004f94:	f000 f8be 	bl	8005114 <_fstat_r>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	dbf2      	blt.n	8004f82 <__swhatbuf_r+0x12>
 8004f9c:	9a01      	ldr	r2, [sp, #4]
 8004f9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fa2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fa6:	425a      	negs	r2, r3
 8004fa8:	415a      	adcs	r2, r3
 8004faa:	602a      	str	r2, [r5, #0]
 8004fac:	e7ee      	b.n	8004f8c <__swhatbuf_r+0x1c>
 8004fae:	2340      	movs	r3, #64	; 0x40
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	b016      	add	sp, #88	; 0x58
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}

08004fb8 <__smakebuf_r>:
 8004fb8:	898b      	ldrh	r3, [r1, #12]
 8004fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fbc:	079d      	lsls	r5, r3, #30
 8004fbe:	4606      	mov	r6, r0
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	d507      	bpl.n	8004fd4 <__smakebuf_r+0x1c>
 8004fc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	2301      	movs	r3, #1
 8004fce:	6163      	str	r3, [r4, #20]
 8004fd0:	b002      	add	sp, #8
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}
 8004fd4:	ab01      	add	r3, sp, #4
 8004fd6:	466a      	mov	r2, sp
 8004fd8:	f7ff ffca 	bl	8004f70 <__swhatbuf_r>
 8004fdc:	9900      	ldr	r1, [sp, #0]
 8004fde:	4605      	mov	r5, r0
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	f7ff faad 	bl	8004540 <_malloc_r>
 8004fe6:	b948      	cbnz	r0, 8004ffc <__smakebuf_r+0x44>
 8004fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fec:	059a      	lsls	r2, r3, #22
 8004fee:	d4ef      	bmi.n	8004fd0 <__smakebuf_r+0x18>
 8004ff0:	f023 0303 	bic.w	r3, r3, #3
 8004ff4:	f043 0302 	orr.w	r3, r3, #2
 8004ff8:	81a3      	strh	r3, [r4, #12]
 8004ffa:	e7e3      	b.n	8004fc4 <__smakebuf_r+0xc>
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <__smakebuf_r+0x7c>)
 8004ffe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005000:	89a3      	ldrh	r3, [r4, #12]
 8005002:	6020      	str	r0, [r4, #0]
 8005004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005008:	81a3      	strh	r3, [r4, #12]
 800500a:	9b00      	ldr	r3, [sp, #0]
 800500c:	6120      	str	r0, [r4, #16]
 800500e:	6163      	str	r3, [r4, #20]
 8005010:	9b01      	ldr	r3, [sp, #4]
 8005012:	b15b      	cbz	r3, 800502c <__smakebuf_r+0x74>
 8005014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005018:	4630      	mov	r0, r6
 800501a:	f000 f88d 	bl	8005138 <_isatty_r>
 800501e:	b128      	cbz	r0, 800502c <__smakebuf_r+0x74>
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	f023 0303 	bic.w	r3, r3, #3
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	81a3      	strh	r3, [r4, #12]
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	431d      	orrs	r5, r3
 8005030:	81a5      	strh	r5, [r4, #12]
 8005032:	e7cd      	b.n	8004fd0 <__smakebuf_r+0x18>
 8005034:	080043f5 	.word	0x080043f5

08005038 <memchr>:
 8005038:	b510      	push	{r4, lr}
 800503a:	b2c9      	uxtb	r1, r1
 800503c:	4402      	add	r2, r0
 800503e:	4290      	cmp	r0, r2
 8005040:	4603      	mov	r3, r0
 8005042:	d101      	bne.n	8005048 <memchr+0x10>
 8005044:	2300      	movs	r3, #0
 8005046:	e003      	b.n	8005050 <memchr+0x18>
 8005048:	781c      	ldrb	r4, [r3, #0]
 800504a:	3001      	adds	r0, #1
 800504c:	428c      	cmp	r4, r1
 800504e:	d1f6      	bne.n	800503e <memchr+0x6>
 8005050:	4618      	mov	r0, r3
 8005052:	bd10      	pop	{r4, pc}

08005054 <__malloc_lock>:
 8005054:	4770      	bx	lr

08005056 <__malloc_unlock>:
 8005056:	4770      	bx	lr

08005058 <_free_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4605      	mov	r5, r0
 800505c:	2900      	cmp	r1, #0
 800505e:	d043      	beq.n	80050e8 <_free_r+0x90>
 8005060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005064:	1f0c      	subs	r4, r1, #4
 8005066:	2b00      	cmp	r3, #0
 8005068:	bfb8      	it	lt
 800506a:	18e4      	addlt	r4, r4, r3
 800506c:	f7ff fff2 	bl	8005054 <__malloc_lock>
 8005070:	4a1e      	ldr	r2, [pc, #120]	; (80050ec <_free_r+0x94>)
 8005072:	6813      	ldr	r3, [r2, #0]
 8005074:	4610      	mov	r0, r2
 8005076:	b933      	cbnz	r3, 8005086 <_free_r+0x2e>
 8005078:	6063      	str	r3, [r4, #4]
 800507a:	6014      	str	r4, [r2, #0]
 800507c:	4628      	mov	r0, r5
 800507e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005082:	f7ff bfe8 	b.w	8005056 <__malloc_unlock>
 8005086:	42a3      	cmp	r3, r4
 8005088:	d90b      	bls.n	80050a2 <_free_r+0x4a>
 800508a:	6821      	ldr	r1, [r4, #0]
 800508c:	1862      	adds	r2, r4, r1
 800508e:	4293      	cmp	r3, r2
 8005090:	bf01      	itttt	eq
 8005092:	681a      	ldreq	r2, [r3, #0]
 8005094:	685b      	ldreq	r3, [r3, #4]
 8005096:	1852      	addeq	r2, r2, r1
 8005098:	6022      	streq	r2, [r4, #0]
 800509a:	6063      	str	r3, [r4, #4]
 800509c:	6004      	str	r4, [r0, #0]
 800509e:	e7ed      	b.n	800507c <_free_r+0x24>
 80050a0:	4613      	mov	r3, r2
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	b10a      	cbz	r2, 80050aa <_free_r+0x52>
 80050a6:	42a2      	cmp	r2, r4
 80050a8:	d9fa      	bls.n	80050a0 <_free_r+0x48>
 80050aa:	6819      	ldr	r1, [r3, #0]
 80050ac:	1858      	adds	r0, r3, r1
 80050ae:	42a0      	cmp	r0, r4
 80050b0:	d10b      	bne.n	80050ca <_free_r+0x72>
 80050b2:	6820      	ldr	r0, [r4, #0]
 80050b4:	4401      	add	r1, r0
 80050b6:	1858      	adds	r0, r3, r1
 80050b8:	4282      	cmp	r2, r0
 80050ba:	6019      	str	r1, [r3, #0]
 80050bc:	d1de      	bne.n	800507c <_free_r+0x24>
 80050be:	6810      	ldr	r0, [r2, #0]
 80050c0:	6852      	ldr	r2, [r2, #4]
 80050c2:	4401      	add	r1, r0
 80050c4:	6019      	str	r1, [r3, #0]
 80050c6:	605a      	str	r2, [r3, #4]
 80050c8:	e7d8      	b.n	800507c <_free_r+0x24>
 80050ca:	d902      	bls.n	80050d2 <_free_r+0x7a>
 80050cc:	230c      	movs	r3, #12
 80050ce:	602b      	str	r3, [r5, #0]
 80050d0:	e7d4      	b.n	800507c <_free_r+0x24>
 80050d2:	6820      	ldr	r0, [r4, #0]
 80050d4:	1821      	adds	r1, r4, r0
 80050d6:	428a      	cmp	r2, r1
 80050d8:	bf01      	itttt	eq
 80050da:	6811      	ldreq	r1, [r2, #0]
 80050dc:	6852      	ldreq	r2, [r2, #4]
 80050de:	1809      	addeq	r1, r1, r0
 80050e0:	6021      	streq	r1, [r4, #0]
 80050e2:	6062      	str	r2, [r4, #4]
 80050e4:	605c      	str	r4, [r3, #4]
 80050e6:	e7c9      	b.n	800507c <_free_r+0x24>
 80050e8:	bd38      	pop	{r3, r4, r5, pc}
 80050ea:	bf00      	nop
 80050ec:	20000094 	.word	0x20000094

080050f0 <_read_r>:
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4605      	mov	r5, r0
 80050f4:	4608      	mov	r0, r1
 80050f6:	4611      	mov	r1, r2
 80050f8:	2200      	movs	r2, #0
 80050fa:	4c05      	ldr	r4, [pc, #20]	; (8005110 <_read_r+0x20>)
 80050fc:	6022      	str	r2, [r4, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	f7fb ff58 	bl	8000fb4 <_read>
 8005104:	1c43      	adds	r3, r0, #1
 8005106:	d102      	bne.n	800510e <_read_r+0x1e>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	b103      	cbz	r3, 800510e <_read_r+0x1e>
 800510c:	602b      	str	r3, [r5, #0]
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	20000218 	.word	0x20000218

08005114 <_fstat_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	2300      	movs	r3, #0
 8005118:	4c06      	ldr	r4, [pc, #24]	; (8005134 <_fstat_r+0x20>)
 800511a:	4605      	mov	r5, r0
 800511c:	4608      	mov	r0, r1
 800511e:	4611      	mov	r1, r2
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	f7fb ff8b 	bl	800103c <_fstat>
 8005126:	1c43      	adds	r3, r0, #1
 8005128:	d102      	bne.n	8005130 <_fstat_r+0x1c>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	b103      	cbz	r3, 8005130 <_fstat_r+0x1c>
 800512e:	602b      	str	r3, [r5, #0]
 8005130:	bd38      	pop	{r3, r4, r5, pc}
 8005132:	bf00      	nop
 8005134:	20000218 	.word	0x20000218

08005138 <_isatty_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	2300      	movs	r3, #0
 800513c:	4c05      	ldr	r4, [pc, #20]	; (8005154 <_isatty_r+0x1c>)
 800513e:	4605      	mov	r5, r0
 8005140:	4608      	mov	r0, r1
 8005142:	6023      	str	r3, [r4, #0]
 8005144:	f7fb ff89 	bl	800105a <_isatty>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d102      	bne.n	8005152 <_isatty_r+0x1a>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	b103      	cbz	r3, 8005152 <_isatty_r+0x1a>
 8005150:	602b      	str	r3, [r5, #0]
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	20000218 	.word	0x20000218

08005158 <_init>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	bf00      	nop
 800515c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515e:	bc08      	pop	{r3}
 8005160:	469e      	mov	lr, r3
 8005162:	4770      	bx	lr

08005164 <_fini>:
 8005164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005166:	bf00      	nop
 8005168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516a:	bc08      	pop	{r3}
 800516c:	469e      	mov	lr, r3
 800516e:	4770      	bx	lr
