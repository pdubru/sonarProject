
Pruea_6_Copia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a28  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08006b68  08006b68  00016b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e80  08006e80  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e80  08006e80  00016e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e88  08006e88  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000abc  2000007c  08006f0c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b38  08006f0c  00020b38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001099e  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002183  00000000  00000000  00030a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f68  00000000  00000000  00032bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e88  00000000  00000000  00033b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018244  00000000  00000000  000349b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b9b9  00000000  00000000  0004cbfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096192  00000000  00000000  000585b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee747  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049cc  00000000  00000000  000ee7c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	08006b50 	.word	0x08006b50

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	08006b50 	.word	0x08006b50

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2uiz>:
 800091c:	004a      	lsls	r2, r1, #1
 800091e:	d211      	bcs.n	8000944 <__aeabi_d2uiz+0x28>
 8000920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000924:	d211      	bcs.n	800094a <__aeabi_d2uiz+0x2e>
 8000926:	d50d      	bpl.n	8000944 <__aeabi_d2uiz+0x28>
 8000928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800092c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000930:	d40e      	bmi.n	8000950 <__aeabi_d2uiz+0x34>
 8000932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800093a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093e:	fa23 f002 	lsr.w	r0, r3, r2
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094e:	d102      	bne.n	8000956 <__aeabi_d2uiz+0x3a>
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	4770      	bx	lr
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	4770      	bx	lr

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b974 	b.w	8000c5c <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	468c      	mov	ip, r1
 8000992:	4604      	mov	r4, r0
 8000994:	9e08      	ldr	r6, [sp, #32]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d14b      	bne.n	8000a32 <__udivmoddi4+0xa6>
 800099a:	428a      	cmp	r2, r1
 800099c:	4615      	mov	r5, r2
 800099e:	d967      	bls.n	8000a70 <__udivmoddi4+0xe4>
 80009a0:	fab2 f282 	clz	r2, r2
 80009a4:	b14a      	cbz	r2, 80009ba <__udivmoddi4+0x2e>
 80009a6:	f1c2 0720 	rsb	r7, r2, #32
 80009aa:	fa01 f302 	lsl.w	r3, r1, r2
 80009ae:	fa20 f707 	lsr.w	r7, r0, r7
 80009b2:	4095      	lsls	r5, r2
 80009b4:	ea47 0c03 	orr.w	ip, r7, r3
 80009b8:	4094      	lsls	r4, r2
 80009ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80009be:	fbbc f7fe 	udiv	r7, ip, lr
 80009c2:	fa1f f885 	uxth.w	r8, r5
 80009c6:	fb0e c317 	mls	r3, lr, r7, ip
 80009ca:	fb07 f908 	mul.w	r9, r7, r8
 80009ce:	0c21      	lsrs	r1, r4, #16
 80009d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009d4:	4599      	cmp	r9, r3
 80009d6:	d909      	bls.n	80009ec <__udivmoddi4+0x60>
 80009d8:	18eb      	adds	r3, r5, r3
 80009da:	f107 31ff 	add.w	r1, r7, #4294967295
 80009de:	f080 811c 	bcs.w	8000c1a <__udivmoddi4+0x28e>
 80009e2:	4599      	cmp	r9, r3
 80009e4:	f240 8119 	bls.w	8000c1a <__udivmoddi4+0x28e>
 80009e8:	3f02      	subs	r7, #2
 80009ea:	442b      	add	r3, r5
 80009ec:	eba3 0309 	sub.w	r3, r3, r9
 80009f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80009f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80009f8:	fb00 f108 	mul.w	r1, r0, r8
 80009fc:	b2a4      	uxth	r4, r4
 80009fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a02:	42a1      	cmp	r1, r4
 8000a04:	d909      	bls.n	8000a1a <__udivmoddi4+0x8e>
 8000a06:	192c      	adds	r4, r5, r4
 8000a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a0c:	f080 8107 	bcs.w	8000c1e <__udivmoddi4+0x292>
 8000a10:	42a1      	cmp	r1, r4
 8000a12:	f240 8104 	bls.w	8000c1e <__udivmoddi4+0x292>
 8000a16:	3802      	subs	r0, #2
 8000a18:	442c      	add	r4, r5
 8000a1a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a1e:	2700      	movs	r7, #0
 8000a20:	1a64      	subs	r4, r4, r1
 8000a22:	b11e      	cbz	r6, 8000a2c <__udivmoddi4+0xa0>
 8000a24:	2300      	movs	r3, #0
 8000a26:	40d4      	lsrs	r4, r2
 8000a28:	e9c6 4300 	strd	r4, r3, [r6]
 8000a2c:	4639      	mov	r1, r7
 8000a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d909      	bls.n	8000a4a <__udivmoddi4+0xbe>
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	f000 80ec 	beq.w	8000c14 <__udivmoddi4+0x288>
 8000a3c:	2700      	movs	r7, #0
 8000a3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000a42:	4638      	mov	r0, r7
 8000a44:	4639      	mov	r1, r7
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	fab3 f783 	clz	r7, r3
 8000a4e:	2f00      	cmp	r7, #0
 8000a50:	d148      	bne.n	8000ae4 <__udivmoddi4+0x158>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d302      	bcc.n	8000a5c <__udivmoddi4+0xd0>
 8000a56:	4282      	cmp	r2, r0
 8000a58:	f200 80fb 	bhi.w	8000c52 <__udivmoddi4+0x2c6>
 8000a5c:	1a84      	subs	r4, r0, r2
 8000a5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000a62:	2001      	movs	r0, #1
 8000a64:	469c      	mov	ip, r3
 8000a66:	2e00      	cmp	r6, #0
 8000a68:	d0e0      	beq.n	8000a2c <__udivmoddi4+0xa0>
 8000a6a:	e9c6 4c00 	strd	r4, ip, [r6]
 8000a6e:	e7dd      	b.n	8000a2c <__udivmoddi4+0xa0>
 8000a70:	b902      	cbnz	r2, 8000a74 <__udivmoddi4+0xe8>
 8000a72:	deff      	udf	#255	; 0xff
 8000a74:	fab2 f282 	clz	r2, r2
 8000a78:	2a00      	cmp	r2, #0
 8000a7a:	f040 808f 	bne.w	8000b9c <__udivmoddi4+0x210>
 8000a7e:	2701      	movs	r7, #1
 8000a80:	1b49      	subs	r1, r1, r5
 8000a82:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000a86:	fa1f f985 	uxth.w	r9, r5
 8000a8a:	fbb1 fef8 	udiv	lr, r1, r8
 8000a8e:	fb08 111e 	mls	r1, r8, lr, r1
 8000a92:	fb09 f00e 	mul.w	r0, r9, lr
 8000a96:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000a9a:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000a9e:	4298      	cmp	r0, r3
 8000aa0:	d907      	bls.n	8000ab2 <__udivmoddi4+0x126>
 8000aa2:	18eb      	adds	r3, r5, r3
 8000aa4:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x124>
 8000aaa:	4298      	cmp	r0, r3
 8000aac:	f200 80cd 	bhi.w	8000c4a <__udivmoddi4+0x2be>
 8000ab0:	468e      	mov	lr, r1
 8000ab2:	1a1b      	subs	r3, r3, r0
 8000ab4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab8:	fb08 3310 	mls	r3, r8, r0, r3
 8000abc:	fb09 f900 	mul.w	r9, r9, r0
 8000ac0:	b2a4      	uxth	r4, r4
 8000ac2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac6:	45a1      	cmp	r9, r4
 8000ac8:	d907      	bls.n	8000ada <__udivmoddi4+0x14e>
 8000aca:	192c      	adds	r4, r5, r4
 8000acc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad0:	d202      	bcs.n	8000ad8 <__udivmoddi4+0x14c>
 8000ad2:	45a1      	cmp	r9, r4
 8000ad4:	f200 80b6 	bhi.w	8000c44 <__udivmoddi4+0x2b8>
 8000ad8:	4618      	mov	r0, r3
 8000ada:	eba4 0409 	sub.w	r4, r4, r9
 8000ade:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000ae2:	e79e      	b.n	8000a22 <__udivmoddi4+0x96>
 8000ae4:	f1c7 0520 	rsb	r5, r7, #32
 8000ae8:	40bb      	lsls	r3, r7
 8000aea:	fa22 fc05 	lsr.w	ip, r2, r5
 8000aee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000af2:	fa21 f405 	lsr.w	r4, r1, r5
 8000af6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000afa:	fbb4 f9fe 	udiv	r9, r4, lr
 8000afe:	fa1f f88c 	uxth.w	r8, ip
 8000b02:	fb0e 4419 	mls	r4, lr, r9, r4
 8000b06:	fa20 f305 	lsr.w	r3, r0, r5
 8000b0a:	40b9      	lsls	r1, r7
 8000b0c:	fb09 fa08 	mul.w	sl, r9, r8
 8000b10:	4319      	orrs	r1, r3
 8000b12:	0c0b      	lsrs	r3, r1, #16
 8000b14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b18:	45a2      	cmp	sl, r4
 8000b1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000b1e:	fa00 f307 	lsl.w	r3, r0, r7
 8000b22:	d90b      	bls.n	8000b3c <__udivmoddi4+0x1b0>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b2c:	f080 8088 	bcs.w	8000c40 <__udivmoddi4+0x2b4>
 8000b30:	45a2      	cmp	sl, r4
 8000b32:	f240 8085 	bls.w	8000c40 <__udivmoddi4+0x2b4>
 8000b36:	f1a9 0902 	sub.w	r9, r9, #2
 8000b3a:	4464      	add	r4, ip
 8000b3c:	eba4 040a 	sub.w	r4, r4, sl
 8000b40:	fbb4 f0fe 	udiv	r0, r4, lr
 8000b44:	fb0e 4410 	mls	r4, lr, r0, r4
 8000b48:	fb00 fa08 	mul.w	sl, r0, r8
 8000b4c:	b289      	uxth	r1, r1
 8000b4e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000b52:	45a2      	cmp	sl, r4
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x1dc>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5e:	d26b      	bcs.n	8000c38 <__udivmoddi4+0x2ac>
 8000b60:	45a2      	cmp	sl, r4
 8000b62:	d969      	bls.n	8000c38 <__udivmoddi4+0x2ac>
 8000b64:	3802      	subs	r0, #2
 8000b66:	4464      	add	r4, ip
 8000b68:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b6c:	fba0 8902 	umull	r8, r9, r0, r2
 8000b70:	eba4 040a 	sub.w	r4, r4, sl
 8000b74:	454c      	cmp	r4, r9
 8000b76:	4641      	mov	r1, r8
 8000b78:	46ce      	mov	lr, r9
 8000b7a:	d354      	bcc.n	8000c26 <__udivmoddi4+0x29a>
 8000b7c:	d051      	beq.n	8000c22 <__udivmoddi4+0x296>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d069      	beq.n	8000c56 <__udivmoddi4+0x2ca>
 8000b82:	1a5a      	subs	r2, r3, r1
 8000b84:	eb64 040e 	sbc.w	r4, r4, lr
 8000b88:	fa04 f505 	lsl.w	r5, r4, r5
 8000b8c:	fa22 f307 	lsr.w	r3, r2, r7
 8000b90:	40fc      	lsrs	r4, r7
 8000b92:	431d      	orrs	r5, r3
 8000b94:	e9c6 5400 	strd	r5, r4, [r6]
 8000b98:	2700      	movs	r7, #0
 8000b9a:	e747      	b.n	8000a2c <__udivmoddi4+0xa0>
 8000b9c:	4095      	lsls	r5, r2
 8000b9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ba2:	fa21 f003 	lsr.w	r0, r1, r3
 8000ba6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000baa:	fbb0 f7f8 	udiv	r7, r0, r8
 8000bae:	fa1f f985 	uxth.w	r9, r5
 8000bb2:	fb08 0017 	mls	r0, r8, r7, r0
 8000bb6:	fa24 f303 	lsr.w	r3, r4, r3
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	fb07 fc09 	mul.w	ip, r7, r9
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	0c19      	lsrs	r1, r3, #16
 8000bc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bc8:	458c      	cmp	ip, r1
 8000bca:	fa04 f402 	lsl.w	r4, r4, r2
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x254>
 8000bd0:	1869      	adds	r1, r5, r1
 8000bd2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bd6:	d231      	bcs.n	8000c3c <__udivmoddi4+0x2b0>
 8000bd8:	458c      	cmp	ip, r1
 8000bda:	d92f      	bls.n	8000c3c <__udivmoddi4+0x2b0>
 8000bdc:	3f02      	subs	r7, #2
 8000bde:	4429      	add	r1, r5
 8000be0:	eba1 010c 	sub.w	r1, r1, ip
 8000be4:	fbb1 f0f8 	udiv	r0, r1, r8
 8000be8:	fb08 1c10 	mls	ip, r8, r0, r1
 8000bec:	fb00 fe09 	mul.w	lr, r0, r9
 8000bf0:	b299      	uxth	r1, r3
 8000bf2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bf6:	458e      	cmp	lr, r1
 8000bf8:	d907      	bls.n	8000c0a <__udivmoddi4+0x27e>
 8000bfa:	1869      	adds	r1, r5, r1
 8000bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c00:	d218      	bcs.n	8000c34 <__udivmoddi4+0x2a8>
 8000c02:	458e      	cmp	lr, r1
 8000c04:	d916      	bls.n	8000c34 <__udivmoddi4+0x2a8>
 8000c06:	3802      	subs	r0, #2
 8000c08:	4429      	add	r1, r5
 8000c0a:	eba1 010e 	sub.w	r1, r1, lr
 8000c0e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c12:	e73a      	b.n	8000a8a <__udivmoddi4+0xfe>
 8000c14:	4637      	mov	r7, r6
 8000c16:	4630      	mov	r0, r6
 8000c18:	e708      	b.n	8000a2c <__udivmoddi4+0xa0>
 8000c1a:	460f      	mov	r7, r1
 8000c1c:	e6e6      	b.n	80009ec <__udivmoddi4+0x60>
 8000c1e:	4618      	mov	r0, r3
 8000c20:	e6fb      	b.n	8000a1a <__udivmoddi4+0x8e>
 8000c22:	4543      	cmp	r3, r8
 8000c24:	d2ab      	bcs.n	8000b7e <__udivmoddi4+0x1f2>
 8000c26:	ebb8 0102 	subs.w	r1, r8, r2
 8000c2a:	eb69 020c 	sbc.w	r2, r9, ip
 8000c2e:	3801      	subs	r0, #1
 8000c30:	4696      	mov	lr, r2
 8000c32:	e7a4      	b.n	8000b7e <__udivmoddi4+0x1f2>
 8000c34:	4618      	mov	r0, r3
 8000c36:	e7e8      	b.n	8000c0a <__udivmoddi4+0x27e>
 8000c38:	4608      	mov	r0, r1
 8000c3a:	e795      	b.n	8000b68 <__udivmoddi4+0x1dc>
 8000c3c:	4607      	mov	r7, r0
 8000c3e:	e7cf      	b.n	8000be0 <__udivmoddi4+0x254>
 8000c40:	4681      	mov	r9, r0
 8000c42:	e77b      	b.n	8000b3c <__udivmoddi4+0x1b0>
 8000c44:	3802      	subs	r0, #2
 8000c46:	442c      	add	r4, r5
 8000c48:	e747      	b.n	8000ada <__udivmoddi4+0x14e>
 8000c4a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c4e:	442b      	add	r3, r5
 8000c50:	e72f      	b.n	8000ab2 <__udivmoddi4+0x126>
 8000c52:	4638      	mov	r0, r7
 8000c54:	e707      	b.n	8000a66 <__udivmoddi4+0xda>
 8000c56:	4637      	mov	r7, r6
 8000c58:	e6e8      	b.n	8000a2c <__udivmoddi4+0xa0>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_idiv0>:
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8000c68:	2254      	movs	r2, #84	; 0x54
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <MPU6050_Init+0x1c>)
 8000c6e:	f005 f809 	bl	8005c84 <memcpy>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000098 	.word	0x20000098

08000c80 <I2C_Write8>:
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
}

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	4603      	mov	r3, r0
 8000c88:	460a      	mov	r2, r1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8000c98:	23d0      	movs	r3, #208	; 0xd0
 8000c9a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	b299      	uxth	r1, r3
 8000ca0:	f107 020c 	add.w	r2, r7, #12
 8000ca4:	2364      	movs	r3, #100	; 0x64
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2302      	movs	r3, #2
 8000caa:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <I2C_Write8+0x38>)
 8000cac:	f002 fb78 	bl	80033a0 <HAL_I2C_Master_Transmit>
}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000098 	.word	0x20000098

08000cbc <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	206b      	movs	r0, #107	; 0x6b
 8000ccc:	f7ff ffd8 	bl	8000c80 <I2C_Write8>
	HAL_Delay(100);
 8000cd0:	2064      	movs	r0, #100	; 0x64
 8000cd2:	f001 fadb 	bl	800228c <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	791b      	ldrb	r3, [r3, #4]
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cec:	b25a      	sxtb	r2, r3
 8000cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	206b      	movs	r0, #107	; 0x6b
 8000cfe:	f7ff ffbf 	bl	8000c80 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8000d02:	2064      	movs	r0, #100	; 0x64
 8000d04:	f001 fac2 	bl	800228c <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	78db      	ldrb	r3, [r3, #3]
 8000d10:	f003 0307 	and.w	r3, r3, #7
 8000d14:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	201a      	movs	r0, #26
 8000d1c:	f7ff ffb0 	bl	8000c80 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	785b      	ldrb	r3, [r3, #1]
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	f003 0318 	and.w	r3, r3, #24
 8000d30:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	4619      	mov	r1, r3
 8000d36:	201b      	movs	r0, #27
 8000d38:	f7ff ffa2 	bl	8000c80 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	789b      	ldrb	r3, [r3, #2]
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 0318 	and.w	r3, r3, #24
 8000d4c:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	4619      	mov	r1, r3
 8000d52:	201c      	movs	r0, #28
 8000d54:	f7ff ff94 	bl	8000c80 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8000d58:	2004      	movs	r0, #4
 8000d5a:	f000 f857 	bl	8000e0c <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	789b      	ldrb	r3, [r3, #2]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d81a      	bhi.n	8000d9c <MPU6050_Config+0xe0>
 8000d66:	a201      	add	r2, pc, #4	; (adr r2, 8000d6c <MPU6050_Config+0xb0>)
 8000d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6c:	08000d7d 	.word	0x08000d7d
 8000d70:	08000d85 	.word	0x08000d85
 8000d74:	08000d8d 	.word	0x08000d8d
 8000d78:	08000d95 	.word	0x08000d95
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MPU6050_Config+0x12c>)
 8000d7e:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <MPU6050_Config+0x130>)
 8000d80:	601a      	str	r2, [r3, #0]
			break;
 8000d82:	e00c      	b.n	8000d9e <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MPU6050_Config+0x12c>)
 8000d86:	4a1a      	ldr	r2, [pc, #104]	; (8000df0 <MPU6050_Config+0x134>)
 8000d88:	601a      	str	r2, [r3, #0]
				break;
 8000d8a:	e008      	b.n	8000d9e <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <MPU6050_Config+0x12c>)
 8000d8e:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <MPU6050_Config+0x138>)
 8000d90:	601a      	str	r2, [r3, #0]
			break;
 8000d92:	e004      	b.n	8000d9e <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MPU6050_Config+0x12c>)
 8000d96:	4a18      	ldr	r2, [pc, #96]	; (8000df8 <MPU6050_Config+0x13c>)
 8000d98:	601a      	str	r2, [r3, #0]
			break;
 8000d9a:	e000      	b.n	8000d9e <MPU6050_Config+0xe2>
		
		default:
			break;
 8000d9c:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	785b      	ldrb	r3, [r3, #1]
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d81a      	bhi.n	8000ddc <MPU6050_Config+0x120>
 8000da6:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <MPU6050_Config+0xf0>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000dbd 	.word	0x08000dbd
 8000db0:	08000dc5 	.word	0x08000dc5
 8000db4:	08000dcd 	.word	0x08000dcd
 8000db8:	08000dd5 	.word	0x08000dd5
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MPU6050_Config+0x140>)
 8000dbe:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <MPU6050_Config+0x144>)
 8000dc0:	601a      	str	r2, [r3, #0]
			break;
 8000dc2:	e00c      	b.n	8000dde <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MPU6050_Config+0x140>)
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <MPU6050_Config+0x148>)
 8000dc8:	601a      	str	r2, [r3, #0]
				break;
 8000dca:	e008      	b.n	8000dde <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MPU6050_Config+0x140>)
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <MPU6050_Config+0x14c>)
 8000dd0:	601a      	str	r2, [r3, #0]
			break;
 8000dd2:	e004      	b.n	8000dde <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MPU6050_Config+0x140>)
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <MPU6050_Config+0x130>)
 8000dd8:	601a      	str	r2, [r3, #0]
			break;
 8000dda:	e000      	b.n	8000dde <MPU6050_Config+0x122>
		
		default:
			break;
 8000ddc:	bf00      	nop
	}
	
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000ec 	.word	0x200000ec
 8000dec:	3d7a0000 	.word	0x3d7a0000
 8000df0:	3dfa0000 	.word	0x3dfa0000
 8000df4:	3e7a0000 	.word	0x3e7a0000
 8000df8:	3efa0000 	.word	0x3efa0000
 8000dfc:	200000f0 	.word	0x200000f0
 8000e00:	3bfa0000 	.word	0x3bfa0000
 8000e04:	3c7a0000 	.word	0x3c7a0000
 8000e08:	3cfa0000 	.word	0x3cfa0000

08000e0c <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	2019      	movs	r0, #25
 8000e1c:	f7ff ff30 	bl	8000c80 <I2C_Write8>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <delay>:
RawData_Def myAccelRaw, myGyroRaw;
ScaledData_Def myAccelScaled, myGyroScaled;
uint8_t recorded_values[1000];

//**Funcion para delay ultrasonidos
void delay(uint32_t delay){
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]


			if(delay < 2) delay = 2;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d801      	bhi.n	8000e3a <delay+0x12>
 8000e36:	2302      	movs	r3, #2
 8000e38:	607b      	str	r3, [r7, #4]
			TIM7->ARR = delay - 1;
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <delay+0x50>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM7-> CNT = 0;
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <delay+0x50>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24
			TIM7->CR1 |= 1;
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <delay+0x50>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <delay+0x50>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6013      	str	r3, [r2, #0]
			while((TIM7->SR&0x0001) != 1);
 8000e54:	bf00      	nop
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <delay+0x50>)
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d1f9      	bne.n	8000e56 <delay+0x2e>
			TIM7->SR &= ~(0x0001);
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <delay+0x50>)
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <delay+0x50>)
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	6113      	str	r3, [r2, #16]

		}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	40001400 	.word	0x40001400

08000e7c <readMsg>:

//**Funcion para leer de la terminal

		int readMsg(void)
		{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

		 for( len =0;len<256;len++)
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <readMsg+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	e021      	b.n	8000ecc <readMsg+0x50>
		 {
			while(!(USART2->SR & USART_SR_RXNE));
 8000e88:	bf00      	nop
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <readMsg+0x68>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f9      	beq.n	8000e8a <readMsg+0xe>
		   buff[len]= USART2->DR;
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <readMsg+0x68>)
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <readMsg+0x64>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <readMsg+0x6c>)
 8000ea2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (buff[len]==10 || buff[len]==13) break; //if enter is pressed, providing that it is 10 or 0xA (line feed), or 13 (0xD) (carriage return)
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <readMsg+0x64>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <readMsg+0x6c>)
 8000eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb0:	2b0a      	cmp	r3, #10
 8000eb2:	d00f      	beq.n	8000ed4 <readMsg+0x58>
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <readMsg+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <readMsg+0x6c>)
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	2b0d      	cmp	r3, #13
 8000ec0:	d008      	beq.n	8000ed4 <readMsg+0x58>
		 for( len =0;len<256;len++)
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <readMsg+0x64>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <readMsg+0x64>)
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <readMsg+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2bff      	cmp	r3, #255	; 0xff
 8000ed2:	ddd9      	ble.n	8000e88 <readMsg+0xc>
		 }
		 return len; //just returning number of entered characters, not including line feed nor carriage return (!)
 8000ed4:	4b02      	ldr	r3, [pc, #8]	; (8000ee0 <readMsg+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
		}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	200000f4 	.word	0x200000f4
 8000ee4:	40004400 	.word	0x40004400
 8000ee8:	20000588 	.word	0x20000588

08000eec <__io_putchar>:
		#else
		#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
		#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
		#endif /* __GNUC__ */

		PUTCHAR_PROTOTYPE {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
			/* Place your implementation of fputc here */
			/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
			HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000ef4:	1d39      	adds	r1, r7, #4
 8000ef6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000efa:	2201      	movs	r2, #1
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <__io_putchar+0x20>)
 8000efe:	f004 fc2a 	bl	8005756 <HAL_UART_Transmit>
			return ch;
 8000f02:	687b      	ldr	r3, [r7, #4]
		}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000a30 	.word	0x20000a30

08000f10 <__io_getchar>:
		GETCHAR_PROTOTYPE {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
			/* Place your implementation of fgetc here */
			/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
			char ch;
			HAL_UART_Receive(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000f16:	1df9      	adds	r1, r7, #7
 8000f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4804      	ldr	r0, [pc, #16]	; (8000f30 <__io_getchar+0x20>)
 8000f20:	f004 fcb2 	bl	8005888 <HAL_UART_Receive>
			return ch;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
		}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000a30 	.word	0x20000a30

08000f34 <Correcto_zelda>:

//**Funcion de notas musicales

		void Correcto_zelda(void){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
			  TIM4->PSC = 319-1;
 8000f38:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <Correcto_zelda+0xc0>)
 8000f3a:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <Correcto_zelda+0xc4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2232      	movs	r2, #50	; 0x32
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(200);
 8000f48:	20c8      	movs	r0, #200	; 0xc8
 8000f4a:	f001 f99f 	bl	800228c <HAL_Delay>
			  TIM4->PSC = 338-1;
 8000f4e:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <Correcto_zelda+0xc0>)
 8000f50:	f240 1251 	movw	r2, #337	; 0x151
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <Correcto_zelda+0xc4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2232      	movs	r2, #50	; 0x32
 8000f5c:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(200);
 8000f5e:	20c8      	movs	r0, #200	; 0xc8
 8000f60:	f001 f994 	bl	800228c <HAL_Delay>
			  TIM4->PSC = 402-1;
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <Correcto_zelda+0xc0>)
 8000f66:	f240 1291 	movw	r2, #401	; 0x191
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <Correcto_zelda+0xc4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2232      	movs	r2, #50	; 0x32
 8000f72:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(200);
 8000f74:	20c8      	movs	r0, #200	; 0xc8
 8000f76:	f001 f989 	bl	800228c <HAL_Delay>
			  TIM4->PSC = 801-1;
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <Correcto_zelda+0xc0>)
 8000f7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <Correcto_zelda+0xc4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2232      	movs	r2, #50	; 0x32
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(200);
 8000f8a:	20c8      	movs	r0, #200	; 0xc8
 8000f8c:	f001 f97e 	bl	800228c <HAL_Delay>
			  TIM4->PSC = 603-1;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <Correcto_zelda+0xc0>)
 8000f92:	f240 225a 	movw	r2, #602	; 0x25a
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <Correcto_zelda+0xc4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2232      	movs	r2, #50	; 0x32
 8000f9e:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(200);
 8000fa0:	20c8      	movs	r0, #200	; 0xc8
 8000fa2:	f001 f973 	bl	800228c <HAL_Delay>
			  TIM4->PSC = 380-1;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <Correcto_zelda+0xc0>)
 8000fa8:	f240 127b 	movw	r2, #379	; 0x17b
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <Correcto_zelda+0xc4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2232      	movs	r2, #50	; 0x32
 8000fb4:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(200);
 8000fb6:	20c8      	movs	r0, #200	; 0xc8
 8000fb8:	f001 f968 	bl	800228c <HAL_Delay>
			  TIM4->PSC = 301-1;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <Correcto_zelda+0xc0>)
 8000fbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <Correcto_zelda+0xc4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2232      	movs	r2, #50	; 0x32
 8000fca:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(200);
 8000fcc:	20c8      	movs	r0, #200	; 0xc8
 8000fce:	f001 f95d 	bl	800228c <HAL_Delay>
			  TIM4->PSC = 239-1;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <Correcto_zelda+0xc0>)
 8000fd4:	22ee      	movs	r2, #238	; 0xee
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <Correcto_zelda+0xc4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2232      	movs	r2, #50	; 0x32
 8000fde:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(400);
 8000fe0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000fe4:	f001 f952 	bl	800228c <HAL_Delay>
			  htim4.Instance->CCR1 = 0;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <Correcto_zelda+0xc4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2200      	movs	r2, #0
 8000fee:	635a      	str	r2, [r3, #52]	; 0x34
		}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40000800 	.word	0x40000800
 8000ff8:	200004f4 	.word	0x200004f4

08000ffc <final_notificacion>:

		void final_notificacion(void){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
			  TIM4->PSC = 478-1;
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <final_notificacion+0xec>)
 8001002:	f240 12dd 	movw	r2, #477	; 0x1dd
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 8001008:	4b38      	ldr	r3, [pc, #224]	; (80010ec <final_notificacion+0xf0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2232      	movs	r2, #50	; 0x32
 800100e:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(100);
 8001010:	2064      	movs	r0, #100	; 0x64
 8001012:	f001 f93b 	bl	800228c <HAL_Delay>
			  htim4.Instance->CCR1 = 0;
 8001016:	4b35      	ldr	r3, [pc, #212]	; (80010ec <final_notificacion+0xf0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2200      	movs	r2, #0
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(100);
 800101e:	2064      	movs	r0, #100	; 0x64
 8001020:	f001 f934 	bl	800228c <HAL_Delay>
			  TIM4->PSC = 478-1;
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <final_notificacion+0xec>)
 8001026:	f240 12dd 	movw	r2, #477	; 0x1dd
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <final_notificacion+0xf0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2232      	movs	r2, #50	; 0x32
 8001032:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(200);
 8001034:	20c8      	movs	r0, #200	; 0xc8
 8001036:	f001 f929 	bl	800228c <HAL_Delay>
			  TIM4->PSC = 425-1;
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <final_notificacion+0xec>)
 800103c:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 8001042:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <final_notificacion+0xf0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2232      	movs	r2, #50	; 0x32
 8001048:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(200);
 800104a:	20c8      	movs	r0, #200	; 0xc8
 800104c:	f001 f91e 	bl	800228c <HAL_Delay>
			  htim4.Instance->CCR1 = 0;
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <final_notificacion+0xf0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2200      	movs	r2, #0
 8001056:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(100);
 8001058:	2064      	movs	r0, #100	; 0x64
 800105a:	f001 f917 	bl	800228c <HAL_Delay>
			  TIM4->PSC = 425-1;
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <final_notificacion+0xec>)
 8001060:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <final_notificacion+0xf0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2232      	movs	r2, #50	; 0x32
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f001 f90c 	bl	800228c <HAL_Delay>
			  TIM4->PSC = 379-1;
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <final_notificacion+0xec>)
 8001076:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <final_notificacion+0xf0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2232      	movs	r2, #50	; 0x32
 8001082:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(200);
 8001084:	20c8      	movs	r0, #200	; 0xc8
 8001086:	f001 f901 	bl	800228c <HAL_Delay>
			  htim4.Instance->CCR1 = 0;
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <final_notificacion+0xf0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(100);
 8001092:	2064      	movs	r0, #100	; 0x64
 8001094:	f001 f8fa 	bl	800228c <HAL_Delay>
			  TIM4->PSC = 379-1;
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <final_notificacion+0xec>)
 800109a:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <final_notificacion+0xf0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2232      	movs	r2, #50	; 0x32
 80010a6:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(200);
 80010a8:	20c8      	movs	r0, #200	; 0xc8
 80010aa:	f001 f8ef 	bl	800228c <HAL_Delay>
			  TIM4->PSC = 425-1;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <final_notificacion+0xec>)
 80010b0:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <final_notificacion+0xf0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2232      	movs	r2, #50	; 0x32
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f001 f8e4 	bl	800228c <HAL_Delay>
			  TIM4->PSC = 379-1;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <final_notificacion+0xec>)
 80010c6:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 80010ca:	629a      	str	r2, [r3, #40]	; 0x28
			  htim4.Instance->CCR1 = 50;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <final_notificacion+0xf0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2232      	movs	r2, #50	; 0x32
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(200);
 80010d4:	20c8      	movs	r0, #200	; 0xc8
 80010d6:	f001 f8d9 	bl	800228c <HAL_Delay>
			  htim4.Instance->CCR1 = 0;
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <final_notificacion+0xf0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	635a      	str	r2, [r3, #52]	; 0x34
		}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40000800 	.word	0x40000800
 80010ec:	200004f4 	.word	0x200004f4

080010f0 <gotoSleep>:

//**Codigo para el standby mode

		void gotoSleep(void){
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

			  //Enable the PWR Control Clock
			  RCC->APB1ENR|= (RCC_APB1ENR_PWREN);
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <gotoSleep+0x4c>)
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	4a10      	ldr	r2, [pc, #64]	; (800113c <gotoSleep+0x4c>)
 80010fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fe:	6253      	str	r3, [r2, #36]	; 0x24

			  //Set SLEEDEEP bit of Cortex System Control Register
			  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <gotoSleep+0x50>)
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <gotoSleep+0x50>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6113      	str	r3, [r2, #16]

			  //Select Standby mode
			  PWR->CR |= PWR_CR_PDDS;
 800110c:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <gotoSleep+0x54>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <gotoSleep+0x54>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	6013      	str	r3, [r2, #0]

			  //Clear wake up flag
			  PWR->CR |= PWR_CR_CWUF;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <gotoSleep+0x54>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a09      	ldr	r2, [pc, #36]	; (8001144 <gotoSleep+0x54>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6013      	str	r3, [r2, #0]

			  //enable wakeup pin
			  PWR->CR |= (PWR_CSR_EWUP2);
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <gotoSleep+0x54>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a06      	ldr	r2, [pc, #24]	; (8001144 <gotoSleep+0x54>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112e:	6013      	str	r3, [r2, #0]

			  //Request wait for interrupt
			  __WFI();
 8001130:	bf30      	wfi

		}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	e000ed00 	.word	0xe000ed00
 8001144:	40007000 	.word	0x40007000

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114e:	f001 f82e 	bl	80021ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001152:	f000 fa23 	bl	800159c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001156:	f000 fc8b 	bl	8001a70 <MX_GPIO_Init>
  MX_ADC_Init();
 800115a:	f000 fa6d 	bl	8001638 <MX_ADC_Init>
  MX_TIM2_Init();
 800115e:	f000 faf1 	bl	8001744 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001162:	f000 fb41 	bl	80017e8 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001166:	f000 fc23 	bl	80019b0 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 800116a:	f000 fc57 	bl	8001a1c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800116e:	f000 fbab 	bl	80018c8 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001172:	f000 fab9 	bl	80016e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  //**Codigo para comprobar si ha despertado del modo StandBy
  if(((PWR->CSR)&(PWR_CSR_SBF))){
 8001176:	4bac      	ldr	r3, [pc, #688]	; (8001428 <main+0x2e0>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d012      	beq.n	80011a8 <main+0x60>
	  PWR->CR |= PWR_CR_CWUF;
 8001182:	4ba9      	ldr	r3, [pc, #676]	; (8001428 <main+0x2e0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4aa8      	ldr	r2, [pc, #672]	; (8001428 <main+0x2e0>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6013      	str	r3, [r2, #0]
	  PWR->CR |= PWR_CR_CSBF;
 800118e:	4ba6      	ldr	r3, [pc, #664]	; (8001428 <main+0x2e0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4aa5      	ldr	r2, [pc, #660]	; (8001428 <main+0x2e0>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	6013      	str	r3, [r2, #0]

	  printf("Saliendo del StandBy Mode\n");
 800119a:	48a4      	ldr	r0, [pc, #656]	; (800142c <main+0x2e4>)
 800119c:	f004 fdfa 	bl	8005d94 <puts>
	  HAL_Delay(1500);
 80011a0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80011a4:	f001 f872 	bl	800228c <HAL_Delay>

  }

  //Initialize MPU6050 module and I2C
   MPU6050_Init(&hi2c1);
 80011a8:	48a1      	ldr	r0, [pc, #644]	; (8001430 <main+0x2e8>)
 80011aa:	f7ff fd59 	bl	8000c60 <MPU6050_Init>

   //MPU6050 Config
   myMpuConfig.Accel_Full_Scale = AFS_SEL_2g;
 80011ae:	2300      	movs	r3, #0
 80011b0:	70bb      	strb	r3, [r7, #2]
   myMpuConfig.ClockSource = Internal_8MHz;
 80011b2:	2300      	movs	r3, #0
 80011b4:	703b      	strb	r3, [r7, #0]
   myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 80011b6:	2301      	movs	r3, #1
 80011b8:	70fb      	strb	r3, [r7, #3]
   myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 80011ba:	2301      	movs	r3, #1
 80011bc:	707b      	strb	r3, [r7, #1]
   myMpuConfig.Sleep_Mode_Bit = 1; // 1 = sleep mode, 0= normal mode
 80011be:	2301      	movs	r3, #1
 80011c0:	713b      	strb	r3, [r7, #4]
   MPU6050_Config(&myMpuConfig);
 80011c2:	463b      	mov	r3, r7
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fd79 	bl	8000cbc <MPU6050_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  do{
		  printf("Bienvenido al menu, elija el modo de funcionamiento. Si quieres salir escribir introducir '0':\n");
 80011ca:	489a      	ldr	r0, [pc, #616]	; (8001434 <main+0x2ec>)
 80011cc:	f004 fde2 	bl	8005d94 <puts>
		  printf("Modo 1 - '1'\n");
 80011d0:	4899      	ldr	r0, [pc, #612]	; (8001438 <main+0x2f0>)
 80011d2:	f004 fddf 	bl	8005d94 <puts>
		  printf("Modo 2 - '2'\n");
 80011d6:	4899      	ldr	r0, [pc, #612]	; (800143c <main+0x2f4>)
 80011d8:	f004 fddc 	bl	8005d94 <puts>
		  printf("StanbBy Mode - '3'\n");
 80011dc:	4898      	ldr	r0, [pc, #608]	; (8001440 <main+0x2f8>)
 80011de:	f004 fdd9 	bl	8005d94 <puts>

		  readMsg();
 80011e2:	f7ff fe4b 	bl	8000e7c <readMsg>

		  //MODO 1 MANUAL
		  if(buff[0] == 49){
 80011e6:	4b97      	ldr	r3, [pc, #604]	; (8001444 <main+0x2fc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b31      	cmp	r3, #49	; 0x31
 80011ec:	f040 809d 	bne.w	800132a <main+0x1e2>
			  exit_mode1 = 0;
 80011f0:	4b95      	ldr	r3, [pc, #596]	; (8001448 <main+0x300>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
			  printf("Modo 1 seleccionado\nPorfavor, posicione el sensor en la posición deseada. Una vez posicionado presione el botón usuario");
 80011f6:	4895      	ldr	r0, [pc, #596]	; (800144c <main+0x304>)
 80011f8:	f004 fd58 	bl	8005cac <iprintf>
			  do{

			  		HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 80011fc:	2108      	movs	r1, #8
 80011fe:	4894      	ldr	r0, [pc, #592]	; (8001450 <main+0x308>)
 8001200:	f003 fa12 	bl	8004628 <HAL_TIM_PWM_Start>
			  		HAL_ADC_Start(&hadc);
 8001204:	4893      	ldr	r0, [pc, #588]	; (8001454 <main+0x30c>)
 8001206:	f001 f9a9 	bl	800255c <HAL_ADC_Start>
			  		HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800120a:	f04f 31ff 	mov.w	r1, #4294967295
 800120e:	4891      	ldr	r0, [pc, #580]	; (8001454 <main+0x30c>)
 8001210:	f001 fa30 	bl	8002674 <HAL_ADC_PollForConversion>
			  		valor_adc = HAL_ADC_GetValue(&hadc);
 8001214:	488f      	ldr	r0, [pc, #572]	; (8001454 <main+0x30c>)
 8001216:	f001 fab6 	bl	8002786 <HAL_ADC_GetValue>
 800121a:	4602      	mov	r2, r0
 800121c:	4b8e      	ldr	r3, [pc, #568]	; (8001458 <main+0x310>)
 800121e:	601a      	str	r2, [r3, #0]
			  		HAL_ADC_Stop(&hadc);
 8001220:	488c      	ldr	r0, [pc, #560]	; (8001454 <main+0x30c>)
 8001222:	f001 f9fb 	bl	800261c <HAL_ADC_Stop>

			  		TIM2->CCR3 = ((valor_adc*0.92796)+1200); // MAX CCR3 = 5000, MIN CCR3 = 1200
 8001226:	4b8c      	ldr	r3, [pc, #560]	; (8001458 <main+0x310>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f8ea 	bl	8000404 <__aeabi_ui2d>
 8001230:	a379      	add	r3, pc, #484	; (adr r3, 8001418 <main+0x2d0>)
 8001232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001236:	f7ff f95f 	bl	80004f8 <__aeabi_dmul>
 800123a:	4603      	mov	r3, r0
 800123c:	460c      	mov	r4, r1
 800123e:	4618      	mov	r0, r3
 8001240:	4621      	mov	r1, r4
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	4b85      	ldr	r3, [pc, #532]	; (800145c <main+0x314>)
 8001248:	f7fe ffa0 	bl	800018c <__adddf3>
 800124c:	4603      	mov	r3, r0
 800124e:	460c      	mov	r4, r1
 8001250:	461a      	mov	r2, r3
 8001252:	4623      	mov	r3, r4
 8001254:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fb5e 	bl	800091c <__aeabi_d2uiz>
 8001260:	4603      	mov	r3, r0
 8001262:	63e3      	str	r3, [r4, #60]	; 0x3c
			  		angle = (valor_adc*0.04395);
 8001264:	4b7c      	ldr	r3, [pc, #496]	; (8001458 <main+0x310>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f8cb 	bl	8000404 <__aeabi_ui2d>
 800126e:	a36c      	add	r3, pc, #432	; (adr r3, 8001420 <main+0x2d8>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff f940 	bl	80004f8 <__aeabi_dmul>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fb4c 	bl	800091c <__aeabi_d2uiz>
 8001284:	4602      	mov	r2, r0
 8001286:	4b76      	ldr	r3, [pc, #472]	; (8001460 <main+0x318>)
 8001288:	601a      	str	r2, [r3, #0]

			  	  		if(msg == 1){
 800128a:	4b76      	ldr	r3, [pc, #472]	; (8001464 <main+0x31c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d11b      	bne.n	80012ca <main+0x182>
			  	  			//Enviar el trigger para que mida el ultrasonidos
				  			 msg = 0;
 8001292:	4b74      	ldr	r3, [pc, #464]	; (8001464 <main+0x31c>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
				  			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2120      	movs	r1, #32
 800129c:	4872      	ldr	r0, [pc, #456]	; (8001468 <main+0x320>)
 800129e:	f001 ff2e 	bl	80030fe <HAL_GPIO_WritePin>
				  			 delay(3);
 80012a2:	2003      	movs	r0, #3
 80012a4:	f7ff fdc0 	bl	8000e28 <delay>
				  			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2120      	movs	r1, #32
 80012ac:	486e      	ldr	r0, [pc, #440]	; (8001468 <main+0x320>)
 80012ae:	f001 ff26 	bl	80030fe <HAL_GPIO_WritePin>
				  			 delay(10);
 80012b2:	200a      	movs	r0, #10
 80012b4:	f7ff fdb8 	bl	8000e28 <delay>
				  			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2120      	movs	r1, #32
 80012bc:	486a      	ldr	r0, [pc, #424]	; (8001468 <main+0x320>)
 80012be:	f001 ff1e 	bl	80030fe <HAL_GPIO_WritePin>
				  			 HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80012c2:	2100      	movs	r1, #0
 80012c4:	4869      	ldr	r0, [pc, #420]	; (800146c <main+0x324>)
 80012c6:	f003 facb 	bl	8004860 <HAL_TIM_IC_Start_IT>
			  	  		}

			  	  		if(time_captured){
 80012ca:	4b69      	ldr	r3, [pc, #420]	; (8001470 <main+0x328>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d026      	beq.n	8001320 <main+0x1d8>
			  	  			//Calcular distancia y mostrarla con el angulo
			  	  			distance = (time_elapsed)/58;
 80012d2:	4b68      	ldr	r3, [pc, #416]	; (8001474 <main+0x32c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a68      	ldr	r2, [pc, #416]	; (8001478 <main+0x330>)
 80012d8:	fba2 2303 	umull	r2, r3, r2, r3
 80012dc:	095b      	lsrs	r3, r3, #5
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b66      	ldr	r3, [pc, #408]	; (800147c <main+0x334>)
 80012e2:	701a      	strb	r2, [r3, #0]
			  	  			printf("Distance(cm):%hu\nAngle(degrees):%hu\n", distance, angle);
 80012e4:	4b65      	ldr	r3, [pc, #404]	; (800147c <main+0x334>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4b5d      	ldr	r3, [pc, #372]	; (8001460 <main+0x318>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4863      	ldr	r0, [pc, #396]	; (8001480 <main+0x338>)
 80012f2:	f004 fcdb 	bl	8005cac <iprintf>
			  	  			time_captured = 0;
 80012f6:	4b5e      	ldr	r3, [pc, #376]	; (8001470 <main+0x328>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
			  	  			//Notificacion por sonido
			  	  			HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80012fc:	2100      	movs	r1, #0
 80012fe:	4861      	ldr	r0, [pc, #388]	; (8001484 <main+0x33c>)
 8001300:	f003 f992 	bl	8004628 <HAL_TIM_PWM_Start>
			  	  			final_notificacion();
 8001304:	f7ff fe7a 	bl	8000ffc <final_notificacion>
			  	  			//Preguntar si quiere volver a medir
			  	  			printf("Quiere volver a medir una nueva distancia manualmente? 1 -> Si, 0 -> No\n");
 8001308:	485f      	ldr	r0, [pc, #380]	; (8001488 <main+0x340>)
 800130a:	f004 fd43 	bl	8005d94 <puts>
			  	  			readMsg();
 800130e:	f7ff fdb5 	bl	8000e7c <readMsg>
			  	  			if(buff[0] == 48){
 8001312:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <main+0x2fc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b30      	cmp	r3, #48	; 0x30
 8001318:	d102      	bne.n	8001320 <main+0x1d8>
			  	  				exit_mode1 = 1;
 800131a:	4b4b      	ldr	r3, [pc, #300]	; (8001448 <main+0x300>)
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
			  	  			}
			  	  		}
			  }while(!exit_mode1);
 8001320:	4b49      	ldr	r3, [pc, #292]	; (8001448 <main+0x300>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f43f af69 	beq.w	80011fc <main+0xb4>
		  }

		  HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_3);
 800132a:	2108      	movs	r1, #8
 800132c:	4848      	ldr	r0, [pc, #288]	; (8001450 <main+0x308>)
 800132e:	f003 fa11 	bl	8004754 <HAL_TIM_PWM_Stop>
		  HAL_ADC_Stop(&hadc);
 8001332:	4848      	ldr	r0, [pc, #288]	; (8001454 <main+0x30c>)
 8001334:	f001 f972 	bl	800261c <HAL_ADC_Stop>

		  //MODO 2 AUTOMATICO
		  if(buff[0] == 50){
 8001338:	4b42      	ldr	r3, [pc, #264]	; (8001444 <main+0x2fc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b32      	cmp	r3, #50	; 0x32
 800133e:	f040 80fa 	bne.w	8001536 <main+0x3ee>
			 exit_mode2=0;
 8001342:	4b52      	ldr	r3, [pc, #328]	; (800148c <main+0x344>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
			 //Se despierta el MPU
			 myMpuConfig.Sleep_Mode_Bit = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	713b      	strb	r3, [r7, #4]
		  	 printf("Modo 2 seleccionado\n");
 800134c:	4850      	ldr	r0, [pc, #320]	; (8001490 <main+0x348>)
 800134e:	f004 fd21 	bl	8005d94 <puts>

		  	 do{
		  		 done_measuring = 0;
 8001352:	4b50      	ldr	r3, [pc, #320]	; (8001494 <main+0x34c>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
		  		while(!done_measuring){
 8001358:	e051      	b.n	80013fe <main+0x2b6>
		  			printf("Tomando medidas...\n");
 800135a:	484f      	ldr	r0, [pc, #316]	; (8001498 <main+0x350>)
 800135c:	f004 fd1a 	bl	8005d94 <puts>
		  			HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8001360:	2108      	movs	r1, #8
 8001362:	483b      	ldr	r0, [pc, #236]	; (8001450 <main+0x308>)
 8001364:	f003 f960 	bl	8004628 <HAL_TIM_PWM_Start>
		  			for(int i=0;i<4;i++){
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	e041      	b.n	80013f2 <main+0x2aa>
		  				//Posicionar el motor
		  				TIM2->CCR3=CCR_motor[i];
 800136e:	4a4b      	ldr	r2, [pc, #300]	; (800149c <main+0x354>)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800137a:	63da      	str	r2, [r3, #60]	; 0x3c
//		  					printf("Error");
//		  					break;
//		  				}
//
//		  				apto = 0;
		  				HAL_Delay(1500);
 800137c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001380:	f000 ff84 	bl	800228c <HAL_Delay>
		  				//Enviar señal al trigger
		  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	2120      	movs	r1, #32
 8001388:	4837      	ldr	r0, [pc, #220]	; (8001468 <main+0x320>)
 800138a:	f001 feb8 	bl	80030fe <HAL_GPIO_WritePin>
		  				delay(3);
 800138e:	2003      	movs	r0, #3
 8001390:	f7ff fd4a 	bl	8000e28 <delay>
		  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2120      	movs	r1, #32
 8001398:	4833      	ldr	r0, [pc, #204]	; (8001468 <main+0x320>)
 800139a:	f001 feb0 	bl	80030fe <HAL_GPIO_WritePin>
		  				delay(10);
 800139e:	200a      	movs	r0, #10
 80013a0:	f7ff fd42 	bl	8000e28 <delay>
		  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2120      	movs	r1, #32
 80013a8:	482f      	ldr	r0, [pc, #188]	; (8001468 <main+0x320>)
 80013aa:	f001 fea8 	bl	80030fe <HAL_GPIO_WritePin>
		  				HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80013ae:	2100      	movs	r1, #0
 80013b0:	482e      	ldr	r0, [pc, #184]	; (800146c <main+0x324>)
 80013b2:	f003 fa55 	bl	8004860 <HAL_TIM_IC_Start_IT>
		  				HAL_Delay(500);
 80013b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ba:	f000 ff67 	bl	800228c <HAL_Delay>
		  				//Guardar la medida obtenida
		  				if(time_captured){
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <main+0x328>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d012      	beq.n	80013ec <main+0x2a4>
		  				//Calcular distancia y guardarlax
							distance = (time_elapsed)/58;
 80013c6:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <main+0x32c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a2b      	ldr	r2, [pc, #172]	; (8001478 <main+0x330>)
 80013cc:	fba2 2303 	umull	r2, r3, r2, r3
 80013d0:	095b      	lsrs	r3, r3, #5
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b29      	ldr	r3, [pc, #164]	; (800147c <main+0x334>)
 80013d6:	701a      	strb	r2, [r3, #0]
							distances[i]= distance;
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <main+0x334>)
 80013da:	7819      	ldrb	r1, [r3, #0]
 80013dc:	4a30      	ldr	r2, [pc, #192]	; (80014a0 <main+0x358>)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	460a      	mov	r2, r1
 80013e4:	701a      	strb	r2, [r3, #0]
							time_captured = 0;
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <main+0x328>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
		  			for(int i=0;i<4;i++){
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3301      	adds	r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	ddba      	ble.n	800136e <main+0x226>

		  				}
		  			}
		  			done_measuring = 1;
 80013f8:	4b26      	ldr	r3, [pc, #152]	; (8001494 <main+0x34c>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
		  		while(!done_measuring){
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <main+0x34c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0a9      	beq.n	800135a <main+0x212>
		  		}


		  		largest = distances[0];
 8001406:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <main+0x358>)
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <main+0x35c>)
 800140c:	701a      	strb	r2, [r3, #0]

		  		//Buscar la posicion con mas distancia medida por el ultrasonidos
		  		for(int i=0;i<4;i++){
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	e05e      	b.n	80014d2 <main+0x38a>
 8001414:	f3af 8000 	nop.w
 8001418:	2b7fe08b 	.word	0x2b7fe08b
 800141c:	3fedb1d9 	.word	0x3fedb1d9
 8001420:	495182aa 	.word	0x495182aa
 8001424:	3fa6809d 	.word	0x3fa6809d
 8001428:	40007000 	.word	0x40007000
 800142c:	08006b68 	.word	0x08006b68
 8001430:	20000534 	.word	0x20000534
 8001434:	08006b84 	.word	0x08006b84
 8001438:	08006be4 	.word	0x08006be4
 800143c:	08006bf4 	.word	0x08006bf4
 8001440:	08006c04 	.word	0x08006c04
 8001444:	20000588 	.word	0x20000588
 8001448:	200000f8 	.word	0x200000f8
 800144c:	08006c18 	.word	0x08006c18
 8001450:	200009f0 	.word	0x200009f0
 8001454:	20000a7c 	.word	0x20000a7c
 8001458:	20000b24 	.word	0x20000b24
 800145c:	4092c000 	.word	0x4092c000
 8001460:	200009e0 	.word	0x200009e0
 8001464:	20000990 	.word	0x20000990
 8001468:	40020400 	.word	0x40020400
 800146c:	20000994 	.word	0x20000994
 8001470:	200009e4 	.word	0x200009e4
 8001474:	20000108 	.word	0x20000108
 8001478:	8d3dcb09 	.word	0x8d3dcb09
 800147c:	20000991 	.word	0x20000991
 8001480:	08006c94 	.word	0x08006c94
 8001484:	200004f4 	.word	0x200004f4
 8001488:	08006cbc 	.word	0x08006cbc
 800148c:	200000f9 	.word	0x200000f9
 8001490:	08006d04 	.word	0x08006d04
 8001494:	20000a78 	.word	0x20000a78
 8001498:	08006d18 	.word	0x08006d18
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000a74 	.word	0x20000a74
 80014a4:	20000ad0 	.word	0x20000ad0
		  			if(distances[i]>largest){
 80014a8:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <main+0x420>)
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	4413      	add	r3, r2
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	4b2e      	ldr	r3, [pc, #184]	; (800156c <main+0x424>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d909      	bls.n	80014cc <main+0x384>
		  				largest = distances[i];
 80014b8:	4a2b      	ldr	r2, [pc, #172]	; (8001568 <main+0x420>)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	4413      	add	r3, r2
 80014be:	781a      	ldrb	r2, [r3, #0]
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <main+0x424>)
 80014c2:	701a      	strb	r2, [r3, #0]
		  				largest_position = i;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <main+0x428>)
 80014ca:	701a      	strb	r2, [r3, #0]
		  		for(int i=0;i<4;i++){
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	3301      	adds	r3, #1
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	dde7      	ble.n	80014a8 <main+0x360>
		  			}
		  		}

		  		TIM2->CCR3=CCR_motor[largest_position];
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <main+0x428>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <main+0x42c>)
 80014e0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80014e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e8:	63da      	str	r2, [r3, #60]	; 0x3c
		  		printf("Para volver a escanear, introducir '1'. Para salir al menu, introducir '0'\nDistance: %d\tAngle: %d\n",largest, angles_motor[largest_position]);
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <main+0x424>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <main+0x428>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <main+0x430>)
 80014f8:	5c9b      	ldrb	r3, [r3, r2]
 80014fa:	461a      	mov	r2, r3
 80014fc:	481f      	ldr	r0, [pc, #124]	; (800157c <main+0x434>)
 80014fe:	f004 fbd5 	bl	8005cac <iprintf>
		  		HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001502:	2100      	movs	r1, #0
 8001504:	481e      	ldr	r0, [pc, #120]	; (8001580 <main+0x438>)
 8001506:	f003 f88f 	bl	8004628 <HAL_TIM_PWM_Start>
		  		Correcto_zelda();
 800150a:	f7ff fd13 	bl	8000f34 <Correcto_zelda>
		  		readMsg();
 800150e:	f7ff fcb5 	bl	8000e7c <readMsg>
		  		if(buff[0] == 48){
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <main+0x43c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b30      	cmp	r3, #48	; 0x30
 8001518:	d106      	bne.n	8001528 <main+0x3e0>
		  			exit_mode2 = 1;
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <main+0x440>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
		  			HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_3);
 8001520:	2108      	movs	r1, #8
 8001522:	481a      	ldr	r0, [pc, #104]	; (800158c <main+0x444>)
 8001524:	f003 f916 	bl	8004754 <HAL_TIM_PWM_Stop>
		  		}
		  	}while(!exit_mode2);
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <main+0x440>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	f43f af10 	beq.w	8001352 <main+0x20a>
		  	 //Se duerme el MPU
		  	myMpuConfig.Sleep_Mode_Bit = 1;
 8001532:	2301      	movs	r3, #1
 8001534:	713b      	strb	r3, [r7, #4]
		 }

		  if(buff[0] == 51){
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <main+0x43c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b33      	cmp	r3, #51	; 0x33
 800153c:	d104      	bne.n	8001548 <main+0x400>
			  printf("Entrando StandBy Mode\n");
 800153e:	4814      	ldr	r0, [pc, #80]	; (8001590 <main+0x448>)
 8001540:	f004 fc28 	bl	8005d94 <puts>
			  gotoSleep();
 8001544:	f7ff fdd4 	bl	80010f0 <gotoSleep>
		  }

		  if(buff[0] == 48){
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <main+0x43c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b30      	cmp	r3, #48	; 0x30
 800154e:	d102      	bne.n	8001556 <main+0x40e>
			  program_out = 1;
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <main+0x44c>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
		  }

	  }while(!program_out);
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <main+0x44c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f43f ae35 	beq.w	80011ca <main+0x82>

	  printf("Gracias por usar el sonar");
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <main+0x450>)
 8001562:	f004 fba3 	bl	8005cac <iprintf>
  while (1)
 8001566:	e630      	b.n	80011ca <main+0x82>
 8001568:	20000a74 	.word	0x20000a74
 800156c:	20000ad0 	.word	0x20000ad0
 8001570:	20000a70 	.word	0x20000a70
 8001574:	20000000 	.word	0x20000000
 8001578:	20000008 	.word	0x20000008
 800157c:	08006d2c 	.word	0x08006d2c
 8001580:	200004f4 	.word	0x200004f4
 8001584:	20000588 	.word	0x20000588
 8001588:	200000f9 	.word	0x200000f9
 800158c:	200009f0 	.word	0x200009f0
 8001590:	08006d90 	.word	0x08006d90
 8001594:	20000b20 	.word	0x20000b20
 8001598:	08006da8 	.word	0x08006da8

0800159c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b092      	sub	sp, #72	; 0x48
 80015a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	2234      	movs	r2, #52	; 0x34
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f004 fb75 	bl	8005c9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b0:	463b      	mov	r3, r7
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015be:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <SystemClock_Config+0x98>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80015c6:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <SystemClock_Config+0x98>)
 80015c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015cc:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ce:	2302      	movs	r3, #2
 80015d0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d2:	2301      	movs	r3, #1
 80015d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d6:	2310      	movs	r3, #16
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015da:	2302      	movs	r3, #2
 80015dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015de:	2300      	movs	r3, #0
 80015e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80015e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80015e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80015e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80015ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 f9da 	bl	80039ac <HAL_RCC_OscConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015fe:	f000 faa7 	bl	8001b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001602:	230f      	movs	r3, #15
 8001604:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001606:	2303      	movs	r3, #3
 8001608:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001616:	463b      	mov	r3, r7
 8001618:	2101      	movs	r1, #1
 800161a:	4618      	mov	r0, r3
 800161c:	f002 fcf6 	bl	800400c <HAL_RCC_ClockConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001626:	f000 fa93 	bl	8001b50 <Error_Handler>
  }
}
 800162a:	bf00      	nop
 800162c:	3748      	adds	r7, #72	; 0x48
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40007000 	.word	0x40007000

08001638 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <MX_ADC_Init+0xa8>)
 800164a:	4a26      	ldr	r2, [pc, #152]	; (80016e4 <MX_ADC_Init+0xac>)
 800164c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <MX_ADC_Init+0xa8>)
 8001650:	2200      	movs	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <MX_ADC_Init+0xa8>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <MX_ADC_Init+0xa8>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001660:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <MX_ADC_Init+0xa8>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001666:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <MX_ADC_Init+0xa8>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800166c:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <MX_ADC_Init+0xa8>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <MX_ADC_Init+0xa8>)
 8001674:	2200      	movs	r2, #0
 8001676:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <MX_ADC_Init+0xa8>)
 800167a:	2200      	movs	r2, #0
 800167c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <MX_ADC_Init+0xa8>)
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_ADC_Init+0xa8>)
 8001688:	2201      	movs	r2, #1
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_ADC_Init+0xa8>)
 800168e:	2200      	movs	r2, #0
 8001690:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_ADC_Init+0xa8>)
 8001696:	2210      	movs	r2, #16
 8001698:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_ADC_Init+0xa8>)
 800169c:	2200      	movs	r2, #0
 800169e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_ADC_Init+0xa8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80016a8:	480d      	ldr	r0, [pc, #52]	; (80016e0 <MX_ADC_Init+0xa8>)
 80016aa:	f000 fe11 	bl	80022d0 <HAL_ADC_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80016b4:	f000 fa4c 	bl	8001b50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016bc:	2301      	movs	r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_ADC_Init+0xa8>)
 80016ca:	f001 f869 	bl	80027a0 <HAL_ADC_ConfigChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80016d4:	f000 fa3c 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000a7c 	.word	0x20000a7c
 80016e4:	40012400 	.word	0x40012400

080016e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <MX_I2C1_Init+0x50>)
 80016ee:	4a13      	ldr	r2, [pc, #76]	; (800173c <MX_I2C1_Init+0x54>)
 80016f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_I2C1_Init+0x50>)
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <MX_I2C1_Init+0x58>)
 80016f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_I2C1_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_I2C1_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_I2C1_Init+0x50>)
 8001706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800170a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <MX_I2C1_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_I2C1_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <MX_I2C1_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_I2C1_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001724:	4804      	ldr	r0, [pc, #16]	; (8001738 <MX_I2C1_Init+0x50>)
 8001726:	f001 fd03 	bl	8003130 <HAL_I2C_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001730:	f000 fa0e 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000534 	.word	0x20000534
 800173c:	40005400 	.word	0x40005400
 8001740:	000186a0 	.word	0x000186a0

08001744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001754:	463b      	mov	r3, r7
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001760:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <MX_TIM2_Init+0xa0>)
 8001762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <MX_TIM2_Init+0xa0>)
 800176a:	220f      	movs	r2, #15
 800176c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <MX_TIM2_Init+0xa0>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <MX_TIM2_Init+0xa0>)
 8001776:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800177a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <MX_TIM2_Init+0xa0>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MX_TIM2_Init+0xa0>)
 8001784:	2200      	movs	r2, #0
 8001786:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001788:	4816      	ldr	r0, [pc, #88]	; (80017e4 <MX_TIM2_Init+0xa0>)
 800178a:	f002 ff0e 	bl	80045aa <HAL_TIM_PWM_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001794:	f000 f9dc 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	4619      	mov	r1, r3
 80017a6:	480f      	ldr	r0, [pc, #60]	; (80017e4 <MX_TIM2_Init+0xa0>)
 80017a8:	f003 ff2a 	bl	8005600 <HAL_TIMEx_MasterConfigSynchronization>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017b2:	f000 f9cd 	bl	8001b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b6:	2360      	movs	r3, #96	; 0x60
 80017b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017c6:	463b      	mov	r3, r7
 80017c8:	2208      	movs	r2, #8
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_TIM2_Init+0xa0>)
 80017ce:	f003 fa29 	bl	8004c24 <HAL_TIM_PWM_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80017d8:	f000 f9ba 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	200009f0 	.word	0x200009f0

080017e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ee:	f107 0318 	add.w	r3, r7, #24
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001812:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <MX_TIM3_Init+0xd8>)
 8001814:	4a2b      	ldr	r2, [pc, #172]	; (80018c4 <MX_TIM3_Init+0xdc>)
 8001816:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8001818:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <MX_TIM3_Init+0xd8>)
 800181a:	221f      	movs	r2, #31
 800181c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <MX_TIM3_Init+0xd8>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001824:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <MX_TIM3_Init+0xd8>)
 8001826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <MX_TIM3_Init+0xd8>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <MX_TIM3_Init+0xd8>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001838:	4821      	ldr	r0, [pc, #132]	; (80018c0 <MX_TIM3_Init+0xd8>)
 800183a:	f002 fe77 	bl	800452c <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001844:	f000 f984 	bl	8001b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800184e:	f107 0318 	add.w	r3, r7, #24
 8001852:	4619      	mov	r1, r3
 8001854:	481a      	ldr	r0, [pc, #104]	; (80018c0 <MX_TIM3_Init+0xd8>)
 8001856:	f003 faa3 	bl	8004da0 <HAL_TIM_ConfigClockSource>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001860:	f000 f976 	bl	8001b50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001864:	4816      	ldr	r0, [pc, #88]	; (80018c0 <MX_TIM3_Init+0xd8>)
 8001866:	f002 ffb2 	bl	80047ce <HAL_TIM_IC_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001870:	f000 f96e 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	4619      	mov	r1, r3
 8001882:	480f      	ldr	r0, [pc, #60]	; (80018c0 <MX_TIM3_Init+0xd8>)
 8001884:	f003 febc 	bl	8005600 <HAL_TIMEx_MasterConfigSynchronization>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800188e:	f000 f95f 	bl	8001b50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001892:	230a      	movs	r3, #10
 8001894:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001896:	2301      	movs	r3, #1
 8001898:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018a2:	463b      	mov	r3, r7
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_TIM3_Init+0xd8>)
 80018aa:	f003 f927 	bl	8004afc <HAL_TIM_IC_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80018b4:	f000 f94c 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3728      	adds	r7, #40	; 0x28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000994 	.word	0x20000994
 80018c4:	40000400 	.word	0x40000400

080018c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0318 	add.w	r3, r7, #24
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e6:	463b      	mov	r3, r7
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018f2:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <MX_TIM4_Init+0xe0>)
 80018f4:	4a2d      	ldr	r2, [pc, #180]	; (80019ac <MX_TIM4_Init+0xe4>)
 80018f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 492-1;
 80018f8:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <MX_TIM4_Init+0xe0>)
 80018fa:	f240 12eb 	movw	r2, #491	; 0x1eb
 80018fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001900:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <MX_TIM4_Init+0xe0>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <MX_TIM4_Init+0xe0>)
 8001908:	22fe      	movs	r2, #254	; 0xfe
 800190a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190c:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <MX_TIM4_Init+0xe0>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <MX_TIM4_Init+0xe0>)
 8001914:	2200      	movs	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001918:	4823      	ldr	r0, [pc, #140]	; (80019a8 <MX_TIM4_Init+0xe0>)
 800191a:	f002 fe07 	bl	800452c <HAL_TIM_Base_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001924:	f000 f914 	bl	8001b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800192e:	f107 0318 	add.w	r3, r7, #24
 8001932:	4619      	mov	r1, r3
 8001934:	481c      	ldr	r0, [pc, #112]	; (80019a8 <MX_TIM4_Init+0xe0>)
 8001936:	f003 fa33 	bl	8004da0 <HAL_TIM_ConfigClockSource>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001940:	f000 f906 	bl	8001b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001944:	4818      	ldr	r0, [pc, #96]	; (80019a8 <MX_TIM4_Init+0xe0>)
 8001946:	f002 fe30 	bl	80045aa <HAL_TIM_PWM_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001950:	f000 f8fe 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	4619      	mov	r1, r3
 8001962:	4811      	ldr	r0, [pc, #68]	; (80019a8 <MX_TIM4_Init+0xe0>)
 8001964:	f003 fe4c 	bl	8005600 <HAL_TIMEx_MasterConfigSynchronization>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800196e:	f000 f8ef 	bl	8001b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001972:	2360      	movs	r3, #96	; 0x60
 8001974:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001982:	463b      	mov	r3, r7
 8001984:	2200      	movs	r2, #0
 8001986:	4619      	mov	r1, r3
 8001988:	4807      	ldr	r0, [pc, #28]	; (80019a8 <MX_TIM4_Init+0xe0>)
 800198a:	f003 f94b 	bl	8004c24 <HAL_TIM_PWM_ConfigChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001994:	f000 f8dc 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <MX_TIM4_Init+0xe0>)
 800199a:	f000 fa45 	bl	8001e28 <HAL_TIM_MspPostInit>

}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200004f4 	.word	0x200004f4
 80019ac:	40000800 	.word	0x40000800

080019b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b6:	463b      	mov	r3, r7
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019c0:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <MX_TIM7_Init+0x68>)
 80019c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 31;
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019c6:	221f      	movs	r2, #31
 80019c8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80019d0:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019de:	480d      	ldr	r0, [pc, #52]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019e0:	f002 fda4 	bl	800452c <HAL_TIM_Base_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80019ea:	f000 f8b1 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019f6:	463b      	mov	r3, r7
 80019f8:	4619      	mov	r1, r3
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019fc:	f003 fe00 	bl	8005600 <HAL_TIMEx_MasterConfigSynchronization>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a06:	f000 f8a3 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000ad4 	.word	0x20000ad4
 8001a18:	40001400 	.word	0x40001400

08001a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <MX_USART2_UART_Init+0x50>)
 8001a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a42:	220c      	movs	r2, #12
 8001a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a54:	f003 fe32 	bl	80056bc <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a5e:	f000 f877 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000a30 	.word	0x20000a30
 8001a6c:	40004400 	.word	0x40004400

08001a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a86:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <MX_GPIO_Init+0xd0>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4a2d      	ldr	r2, [pc, #180]	; (8001b40 <MX_GPIO_Init+0xd0>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	61d3      	str	r3, [r2, #28]
 8001a92:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <MX_GPIO_Init+0xd0>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a9e:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <MX_GPIO_Init+0xd0>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	4a27      	ldr	r2, [pc, #156]	; (8001b40 <MX_GPIO_Init+0xd0>)
 8001aa4:	f043 0320 	orr.w	r3, r3, #32
 8001aa8:	61d3      	str	r3, [r2, #28]
 8001aaa:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <MX_GPIO_Init+0xd0>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 0320 	and.w	r3, r3, #32
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <MX_GPIO_Init+0xd0>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a21      	ldr	r2, [pc, #132]	; (8001b40 <MX_GPIO_Init+0xd0>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <MX_GPIO_Init+0xd0>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <MX_GPIO_Init+0xd0>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <MX_GPIO_Init+0xd0>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	61d3      	str	r3, [r2, #28]
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <MX_GPIO_Init+0xd0>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pin_Trigger_GPIO_Port, Pin_Trigger_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2120      	movs	r1, #32
 8001aea:	4816      	ldr	r0, [pc, #88]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001aec:	f001 fb07 	bl	80030fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Boton_Usuari_Pin */
  GPIO_InitStruct.Pin = Boton_Usuari_Pin;
 8001af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <MX_GPIO_Init+0xd8>)
 8001af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boton_Usuari_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	4811      	ldr	r0, [pc, #68]	; (8001b4c <MX_GPIO_Init+0xdc>)
 8001b06:	f001 f955 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Trigger_Pin */
  GPIO_InitStruct.Pin = Pin_Trigger_Pin;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Pin_Trigger_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4808      	ldr	r0, [pc, #32]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001b22:	f001 f947 	bl	8002db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2028      	movs	r0, #40	; 0x28
 8001b2c:	f001 f90b 	bl	8002d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b30:	2028      	movs	r0, #40	; 0x28
 8001b32:	f001 f924 	bl	8002d7e <HAL_NVIC_EnableIRQ>

}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020400 	.word	0x40020400
 8001b48:	10110000 	.word	0x10110000
 8001b4c:	40020800 	.word	0x40020800

08001b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b54:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <Error_Handler+0x6>

08001b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_MspInit+0x58>)
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <HAL_MspInit+0x58>)
 8001b64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b68:	6253      	str	r3, [r2, #36]	; 0x24
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_MspInit+0x58>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_MspInit+0x58>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <HAL_MspInit+0x58>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6213      	str	r3, [r2, #32]
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_MspInit+0x58>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_MspInit+0x58>)
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <HAL_MspInit+0x58>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6253      	str	r3, [r2, #36]	; 0x24
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_MspInit+0x58>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a15      	ldr	r2, [pc, #84]	; (8001c28 <HAL_ADC_MspInit+0x74>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d123      	bne.n	8001c1e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_ADC_MspInit+0x78>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <HAL_ADC_MspInit+0x78>)
 8001bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be0:	6213      	str	r3, [r2, #32]
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_ADC_MspInit+0x78>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <HAL_ADC_MspInit+0x78>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <HAL_ADC_MspInit+0x78>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	61d3      	str	r3, [r2, #28]
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <HAL_ADC_MspInit+0x78>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c06:	2301      	movs	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <HAL_ADC_MspInit+0x7c>)
 8001c1a:	f001 f8cb 	bl	8002db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40012400 	.word	0x40012400
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020000 	.word	0x40020000

08001c34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <HAL_I2C_MspInit+0x7c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d128      	bne.n	8001ca8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_I2C_MspInit+0x80>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4a16      	ldr	r2, [pc, #88]	; (8001cb4 <HAL_I2C_MspInit+0x80>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	61d3      	str	r3, [r2, #28]
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_I2C_MspInit+0x80>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c74:	2312      	movs	r3, #18
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c80:	2304      	movs	r3, #4
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <HAL_I2C_MspInit+0x84>)
 8001c8c:	f001 f892 	bl	8002db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_I2C_MspInit+0x80>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_I2C_MspInit+0x80>)
 8001c96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c9a:	6253      	str	r3, [r2, #36]	; 0x24
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_I2C_MspInit+0x80>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ca8:	bf00      	nop
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020400 	.word	0x40020400

08001cbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cdc:	d128      	bne.n	8001d30 <HAL_TIM_PWM_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_TIM_PWM_MspInit+0x7c>)
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	4a15      	ldr	r2, [pc, #84]	; (8001d38 <HAL_TIM_PWM_MspInit+0x7c>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6253      	str	r3, [r2, #36]	; 0x24
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <HAL_TIM_PWM_MspInit+0x7c>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_TIM_PWM_MspInit+0x7c>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_TIM_PWM_MspInit+0x7c>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	61d3      	str	r3, [r2, #28]
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_TIM_PWM_MspInit+0x7c>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Timer_PWM_Pin;
 8001d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d20:	2301      	movs	r3, #1
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Timer_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4804      	ldr	r0, [pc, #16]	; (8001d3c <HAL_TIM_PWM_MspInit+0x80>)
 8001d2c:	f001 f842 	bl	8002db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40020400 	.word	0x40020400

08001d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08c      	sub	sp, #48	; 0x30
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a2d      	ldr	r2, [pc, #180]	; (8001e14 <HAL_TIM_Base_MspInit+0xd4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d130      	bne.n	8001dc4 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d62:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <HAL_TIM_Base_MspInit+0xd8>)
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	4a2c      	ldr	r2, [pc, #176]	; (8001e18 <HAL_TIM_Base_MspInit+0xd8>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6253      	str	r3, [r2, #36]	; 0x24
 8001d6e:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <HAL_TIM_Base_MspInit+0xd8>)
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7a:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <HAL_TIM_Base_MspInit+0xd8>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a26      	ldr	r2, [pc, #152]	; (8001e18 <HAL_TIM_Base_MspInit+0xd8>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <HAL_TIM_Base_MspInit+0xd8>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Timer_Ultrasonidos_Pin;
 8001d92:	2310      	movs	r3, #16
 8001d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001da2:	2302      	movs	r3, #2
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Timer_Ultrasonidos_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	4619      	mov	r1, r3
 8001dac:	481b      	ldr	r0, [pc, #108]	; (8001e1c <HAL_TIM_Base_MspInit+0xdc>)
 8001dae:	f001 f801 	bl	8002db4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2100      	movs	r1, #0
 8001db6:	201d      	movs	r0, #29
 8001db8:	f000 ffc5 	bl	8002d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dbc:	201d      	movs	r0, #29
 8001dbe:	f000 ffde 	bl	8002d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001dc2:	e022      	b.n	8001e0a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <HAL_TIM_Base_MspInit+0xe0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10c      	bne.n	8001de8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_TIM_Base_MspInit+0xd8>)
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	4a11      	ldr	r2, [pc, #68]	; (8001e18 <HAL_TIM_Base_MspInit+0xd8>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6253      	str	r3, [r2, #36]	; 0x24
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <HAL_TIM_Base_MspInit+0xd8>)
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
}
 8001de6:	e010      	b.n	8001e0a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM7)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <HAL_TIM_Base_MspInit+0xe4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10b      	bne.n	8001e0a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_TIM_Base_MspInit+0xd8>)
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	4a08      	ldr	r2, [pc, #32]	; (8001e18 <HAL_TIM_Base_MspInit+0xd8>)
 8001df8:	f043 0320 	orr.w	r3, r3, #32
 8001dfc:	6253      	str	r3, [r2, #36]	; 0x24
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_TIM_Base_MspInit+0xd8>)
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	f003 0320 	and.w	r3, r3, #32
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
}
 8001e0a:	bf00      	nop
 8001e0c:	3730      	adds	r7, #48	; 0x30
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40000400 	.word	0x40000400
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40000800 	.word	0x40000800
 8001e24:	40001400 	.word	0x40001400

08001e28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <HAL_TIM_MspPostInit+0x64>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d11b      	bne.n	8001e82 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_TIM_MspPostInit+0x68>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4a10      	ldr	r2, [pc, #64]	; (8001e90 <HAL_TIM_MspPostInit+0x68>)
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	61d3      	str	r3, [r2, #28]
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_TIM_MspPostInit+0x68>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e62:	2340      	movs	r3, #64	; 0x40
 8001e64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	; (8001e94 <HAL_TIM_MspPostInit+0x6c>)
 8001e7e:	f000 ff99 	bl	8002db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e82:	bf00      	nop
 8001e84:	3720      	adds	r7, #32
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40000800 	.word	0x40000800
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020400 	.word	0x40020400

08001e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <HAL_UART_MspInit+0x7c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d127      	bne.n	8001f0a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_UART_MspInit+0x80>)
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	4a16      	ldr	r2, [pc, #88]	; (8001f18 <HAL_UART_MspInit+0x80>)
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	6253      	str	r3, [r2, #36]	; 0x24
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <HAL_UART_MspInit+0x80>)
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_UART_MspInit+0x80>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a10      	ldr	r2, [pc, #64]	; (8001f18 <HAL_UART_MspInit+0x80>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	61d3      	str	r3, [r2, #28]
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_UART_MspInit+0x80>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eea:	230c      	movs	r3, #12
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001efa:	2307      	movs	r3, #7
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <HAL_UART_MspInit+0x84>)
 8001f06:	f000 ff55 	bl	8002db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40004400 	.word	0x40004400
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <NMI_Handler+0x4>

08001f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <MemManage_Handler+0x4>

08001f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <BusFault_Handler+0x4>

08001f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <UsageFault_Handler+0x4>

08001f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f66:	f000 f975 	bl	8002254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(TIM3 -> SR & TIM_SR_CC1IF){
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <TIM3_IRQHandler+0x54>)
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01e      	beq.n	8001fbe <TIM3_IRQHandler+0x4e>

		TIM3 -> SR &= ~TIM_SR_CC1IF;
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <TIM3_IRQHandler+0x54>)
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <TIM3_IRQHandler+0x54>)
 8001f86:	f023 0302 	bic.w	r3, r3, #2
 8001f8a:	6113      	str	r3, [r2, #16]

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8001f8c:	2110      	movs	r1, #16
 8001f8e:	480e      	ldr	r0, [pc, #56]	; (8001fc8 <TIM3_IRQHandler+0x58>)
 8001f90:	f001 f89e 	bl	80030d0 <HAL_GPIO_ReadPin>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <TIM3_IRQHandler+0x32>
			TIM3->CNT=0;
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <TIM3_IRQHandler+0x54>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fa0:	e00d      	b.n	8001fbe <TIM3_IRQHandler+0x4e>
			HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4809      	ldr	r0, [pc, #36]	; (8001fcc <TIM3_IRQHandler+0x5c>)
 8001fa6:	f002 fd25 	bl	80049f4 <HAL_TIM_IC_Stop_IT>
			time_elapsed = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8001faa:	2100      	movs	r1, #0
 8001fac:	4807      	ldr	r0, [pc, #28]	; (8001fcc <TIM3_IRQHandler+0x5c>)
 8001fae:	f002 ffaf 	bl	8004f10 <HAL_TIM_ReadCapturedValue>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <TIM3_IRQHandler+0x60>)
 8001fb6:	601a      	str	r2, [r3, #0]
			time_captured = 1;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <TIM3_IRQHandler+0x64>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	40020400 	.word	0x40020400
 8001fcc:	20000994 	.word	0x20000994
 8001fd0:	20000108 	.word	0x20000108
 8001fd4:	200009e4 	.word	0x200009e4

08001fd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if((EXTI -> PR & (1<<13))>>13){
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <EXTI15_10_IRQHandler+0x2c>)
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <EXTI15_10_IRQHandler+0x22>
			msg = 1;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <EXTI15_10_IRQHandler+0x30>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
			EXTI -> PR |= 1<<13;
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <EXTI15_10_IRQHandler+0x2c>)
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <EXTI15_10_IRQHandler+0x2c>)
 8001ff4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ff8:	6153      	str	r3, [r2, #20]

  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40010400 	.word	0x40010400
 8002008:	20000990 	.word	0x20000990

0800200c <_read>:
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	e00a      	b.n	8002034 <_read+0x28>
 800201e:	f7fe ff77 	bl	8000f10 <__io_getchar>
 8002022:	4601      	mov	r1, r0
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	60ba      	str	r2, [r7, #8]
 800202a:	b2ca      	uxtb	r2, r1
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3301      	adds	r3, #1
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	429a      	cmp	r2, r3
 800203a:	dbf0      	blt.n	800201e <_read+0x12>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <_write>:
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e009      	b.n	800206c <_write+0x26>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	60ba      	str	r2, [r7, #8]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe ff43 	bl	8000eec <__io_putchar>
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3301      	adds	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	429a      	cmp	r2, r3
 8002072:	dbf1      	blt.n	8002058 <_write+0x12>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <_close>:
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <_fstat>:
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	2300      	movs	r3, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <_isatty>:
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	2301      	movs	r3, #1
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <_lseek>:
 80020c6:	b480      	push	{r7}
 80020c8:	b085      	sub	sp, #20
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	2300      	movs	r3, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
	...

080020e0 <_sbrk>:
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	4a14      	ldr	r2, [pc, #80]	; (800213c <_sbrk+0x5c>)
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <_sbrk+0x60>)
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <_sbrk+0x22>
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <_sbrk+0x64>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <_sbrk+0x68>)
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	429a      	cmp	r2, r3
 800210e:	d207      	bcs.n	8002120 <_sbrk+0x40>
 8002110:	f003 fd8e 	bl	8005c30 <__errno>
 8002114:	4602      	mov	r2, r0
 8002116:	230c      	movs	r3, #12
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
 800211e:	e009      	b.n	8002134 <_sbrk+0x54>
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <_sbrk+0x64>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <_sbrk+0x64>)
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20014000 	.word	0x20014000
 8002140:	00000400 	.word	0x00000400
 8002144:	200000fc 	.word	0x200000fc
 8002148:	20000b38 	.word	0x20000b38

0800214c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <SystemInit+0x14>)
 8002152:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002156:	609a      	str	r2, [r3, #8]
#endif
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002164:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002166:	e003      	b.n	8002170 <LoopCopyDataInit>

08002168 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800216a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800216c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800216e:	3104      	adds	r1, #4

08002170 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002170:	480a      	ldr	r0, [pc, #40]	; (800219c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002174:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002176:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002178:	d3f6      	bcc.n	8002168 <CopyDataInit>
  ldr r2, =_sbss
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800217c:	e002      	b.n	8002184 <LoopFillZerobss>

0800217e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002180:	f842 3b04 	str.w	r3, [r2], #4

08002184 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002186:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002188:	d3f9      	bcc.n	800217e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800218a:	f7ff ffdf 	bl	800214c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800218e:	f003 fd55 	bl	8005c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002192:	f7fe ffd9 	bl	8001148 <main>
  bx lr
 8002196:	4770      	bx	lr
  ldr r3, =_sidata
 8002198:	08006e90 	.word	0x08006e90
  ldr r0, =_sdata
 800219c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80021a0:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 80021a4:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 80021a8:	20000b38 	.word	0x20000b38

080021ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021ac:	e7fe      	b.n	80021ac <ADC1_IRQHandler>

080021ae <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f000 fdb9 	bl	8002d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021be:	2000      	movs	r0, #0
 80021c0:	f000 f80e 	bl	80021e0 <HAL_InitTick>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	71fb      	strb	r3, [r7, #7]
 80021ce:	e001      	b.n	80021d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021d0:	f7ff fcc2 	bl	8001b58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021d4:	79fb      	ldrb	r3, [r7, #7]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021ec:	4b16      	ldr	r3, [pc, #88]	; (8002248 <HAL_InitTick+0x68>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d022      	beq.n	800223a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021f4:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_InitTick+0x6c>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <HAL_InitTick+0x68>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002200:	fbb1 f3f3 	udiv	r3, r1, r3
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	4618      	mov	r0, r3
 800220a:	f000 fdc6 	bl	8002d9a <HAL_SYSTICK_Config>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10f      	bne.n	8002234 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b0f      	cmp	r3, #15
 8002218:	d809      	bhi.n	800222e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221a:	2200      	movs	r2, #0
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	f04f 30ff 	mov.w	r0, #4294967295
 8002222:	f000 fd90 	bl	8002d46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_InitTick+0x70>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	e007      	b.n	800223e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	e004      	b.n	800223e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
 8002238:	e001      	b.n	800223e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000014 	.word	0x20000014
 800224c:	2000000c 	.word	0x2000000c
 8002250:	20000010 	.word	0x20000010

08002254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_IncTick+0x1c>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_IncTick+0x20>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4413      	add	r3, r2
 8002262:	4a03      	ldr	r2, [pc, #12]	; (8002270 <HAL_IncTick+0x1c>)
 8002264:	6013      	str	r3, [r2, #0]
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000b30 	.word	0x20000b30
 8002274:	20000014 	.word	0x20000014

08002278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;
 800227c:	4b02      	ldr	r3, [pc, #8]	; (8002288 <HAL_GetTick+0x10>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	20000b30 	.word	0x20000b30

0800228c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff fff0 	bl	8002278 <HAL_GetTick>
 8002298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d004      	beq.n	80022b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_Delay+0x40>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4413      	add	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022b0:	bf00      	nop
 80022b2:	f7ff ffe1 	bl	8002278 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d8f7      	bhi.n	80022b2 <HAL_Delay+0x26>
  {
  }
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000014 	.word	0x20000014

080022d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08e      	sub	sp, #56	; 0x38
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e127      	b.n	8002540 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d115      	bne.n	800232a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230c:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_ADC_Init+0x278>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a8d      	ldr	r2, [pc, #564]	; (8002548 <HAL_ADC_Init+0x278>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	4b8b      	ldr	r3, [pc, #556]	; (8002548 <HAL_ADC_Init+0x278>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff fc45 	bl	8001bb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 80ff 	bne.w	8002536 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002340:	f023 0302 	bic.w	r3, r3, #2
 8002344:	f043 0202 	orr.w	r2, r3, #2
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800234c:	4b7f      	ldr	r3, [pc, #508]	; (800254c <HAL_ADC_Init+0x27c>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	497c      	ldr	r1, [pc, #496]	; (800254c <HAL_ADC_Init+0x27c>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002366:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236e:	4619      	mov	r1, r3
 8002370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002374:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800238a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002390:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002398:	4619      	mov	r1, r3
 800239a:	2302      	movs	r3, #2
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80023b2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80023b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023b6:	4313      	orrs	r3, r2
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023be:	2b10      	cmp	r3, #16
 80023c0:	d007      	beq.n	80023d2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80023ca:	4313      	orrs	r3, r2
 80023cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ce:	4313      	orrs	r3, r2
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	d04f      	beq.n	8002480 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e6:	4313      	orrs	r3, r2
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80023f2:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6912      	ldr	r2, [r2, #16]
 80023f8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80023fc:	d003      	beq.n	8002406 <HAL_ADC_Init+0x136>
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6912      	ldr	r2, [r2, #16]
 8002402:	2a01      	cmp	r2, #1
 8002404:	d102      	bne.n	800240c <HAL_ADC_Init+0x13c>
 8002406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800240a:	e000      	b.n	800240e <HAL_ADC_Init+0x13e>
 800240c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800240e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002412:	4313      	orrs	r3, r2
 8002414:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800241c:	2b01      	cmp	r3, #1
 800241e:	d125      	bne.n	800246c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002426:	2b00      	cmp	r3, #0
 8002428:	d114      	bne.n	8002454 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	3b01      	subs	r3, #1
 8002430:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002434:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	fa92 f2a2 	rbit	r2, r2
 800243c:	617a      	str	r2, [r7, #20]
  return result;
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	fab2 f282 	clz	r2, r2
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	4093      	lsls	r3, r2
 8002448:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800244c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800244e:	4313      	orrs	r3, r2
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
 8002452:	e00b      	b.n	800246c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002464:	f043 0201 	orr.w	r2, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	4b37      	ldr	r3, [pc, #220]	; (8002550 <HAL_ADC_Init+0x280>)
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800247c:	430b      	orrs	r3, r1
 800247e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	4b33      	ldr	r3, [pc, #204]	; (8002554 <HAL_ADC_Init+0x284>)
 8002488:	4013      	ands	r3, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002490:	430b      	orrs	r3, r1
 8002492:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800249c:	d003      	beq.n	80024a6 <HAL_ADC_Init+0x1d6>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d119      	bne.n	80024da <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	3b01      	subs	r3, #1
 80024b6:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80024ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	fa92 f2a2 	rbit	r2, r2
 80024c2:	60fa      	str	r2, [r7, #12]
  return result;
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	fab2 f282 	clz	r2, r2
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	fa03 f202 	lsl.w	r2, r3, r2
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
 80024d8:	e007      	b.n	80024ea <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_ADC_Init+0x288>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d10b      	bne.n	8002512 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002504:	f023 0303 	bic.w	r3, r3, #3
 8002508:	f043 0201 	orr.w	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002510:	e014      	b.n	800253c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002516:	f023 0312 	bic.w	r3, r3, #18
 800251a:	f043 0210 	orr.w	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002534:	e002      	b.n	800253c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800253c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002540:	4618      	mov	r0, r3
 8002542:	3738      	adds	r7, #56	; 0x38
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40023800 	.word	0x40023800
 800254c:	40012700 	.word	0x40012700
 8002550:	fcfc16ff 	.word	0xfcfc16ff
 8002554:	c0fff189 	.word	0xc0fff189
 8002558:	bf80fffe 	.word	0xbf80fffe

0800255c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_ADC_Start+0x1a>
 8002572:	2302      	movs	r3, #2
 8002574:	e04e      	b.n	8002614 <HAL_ADC_Start+0xb8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fa7a 	bl	8002a78 <ADC_Enable>
 8002584:	4603      	mov	r3, r0
 8002586:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d141      	bne.n	8002612 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025cc:	d106      	bne.n	80025dc <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d2:	f023 0206 	bic.w	r2, r3, #6
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	651a      	str	r2, [r3, #80]	; 0x50
 80025da:	e002      	b.n	80025e2 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025f2:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d107      	bne.n	8002612 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002610:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002612:	7bfb      	ldrb	r3, [r7, #15]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_ADC_Stop+0x1a>
 8002632:	2302      	movs	r3, #2
 8002634:	e01a      	b.n	800266c <HAL_ADC_Stop+0x50>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa70 	bl	8002b24 <ADC_ConversionStop_Disable>
 8002644:	4603      	mov	r3, r0
 8002646:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800266a:	7bfb      	ldrb	r3, [r7, #15]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002690:	d113      	bne.n	80026ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800269c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a0:	d10b      	bne.n	80026ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a6:	f043 0220 	orr.w	r2, r3, #32
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e061      	b.n	800277e <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80026ba:	f7ff fddd 	bl	8002278 <HAL_GetTick>
 80026be:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026c0:	e01a      	b.n	80026f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d016      	beq.n	80026f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <HAL_ADC_PollForConversion+0x6c>
 80026d0:	f7ff fdd2 	bl	8002278 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d20b      	bcs.n	80026f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e4:	f043 0204 	orr.w	r2, r3, #4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e042      	b.n	800277e <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0dd      	beq.n	80026c2 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f06f 0212 	mvn.w	r2, #18
 8002716:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d124      	bne.n	800277c <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002738:	2b00      	cmp	r3, #0
 800273a:	d11f      	bne.n	800277c <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002754:	2b00      	cmp	r3, #0
 8002756:	d111      	bne.n	800277c <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x20>
 80027bc:	2302      	movs	r3, #2
 80027be:	e14f      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x2c0>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d81c      	bhi.n	800280a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3b05      	subs	r3, #5
 80027e2:	221f      	movs	r2, #31
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	4019      	ands	r1, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	3b05      	subs	r3, #5
 80027fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
 8002808:	e07e      	b.n	8002908 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d81c      	bhi.n	800284c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b23      	subs	r3, #35	; 0x23
 8002824:	221f      	movs	r2, #31
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	4019      	ands	r1, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	3b23      	subs	r3, #35	; 0x23
 800283e:	fa00 f203 	lsl.w	r2, r0, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	63da      	str	r2, [r3, #60]	; 0x3c
 800284a:	e05d      	b.n	8002908 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b12      	cmp	r3, #18
 8002852:	d81c      	bhi.n	800288e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	3b41      	subs	r3, #65	; 0x41
 8002866:	221f      	movs	r2, #31
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	4019      	ands	r1, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	3b41      	subs	r3, #65	; 0x41
 8002880:	fa00 f203 	lsl.w	r2, r0, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	639a      	str	r2, [r3, #56]	; 0x38
 800288c:	e03c      	b.n	8002908 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b18      	cmp	r3, #24
 8002894:	d81c      	bhi.n	80028d0 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	3b5f      	subs	r3, #95	; 0x5f
 80028a8:	221f      	movs	r2, #31
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	4019      	ands	r1, r3
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	3b5f      	subs	r3, #95	; 0x5f
 80028c2:	fa00 f203 	lsl.w	r2, r0, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	635a      	str	r2, [r3, #52]	; 0x34
 80028ce:	e01b      	b.n	8002908 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	3b7d      	subs	r3, #125	; 0x7d
 80028e2:	221f      	movs	r2, #31
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	4019      	ands	r1, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	3b7d      	subs	r3, #125	; 0x7d
 80028fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b09      	cmp	r3, #9
 800290e:	d81a      	bhi.n	8002946 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6959      	ldr	r1, [r3, #20]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	2207      	movs	r2, #7
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	4019      	ands	r1, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6898      	ldr	r0, [r3, #8]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	fa00 f203 	lsl.w	r2, r0, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	615a      	str	r2, [r3, #20]
 8002944:	e05d      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b13      	cmp	r3, #19
 800294c:	d81c      	bhi.n	8002988 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6919      	ldr	r1, [r3, #16]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	3b1e      	subs	r3, #30
 8002960:	2207      	movs	r2, #7
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	4019      	ands	r1, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6898      	ldr	r0, [r3, #8]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	3b1e      	subs	r3, #30
 800297a:	fa00 f203 	lsl.w	r2, r0, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	611a      	str	r2, [r3, #16]
 8002986:	e03c      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b1d      	cmp	r3, #29
 800298e:	d81c      	bhi.n	80029ca <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68d9      	ldr	r1, [r3, #12]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	3b3c      	subs	r3, #60	; 0x3c
 80029a2:	2207      	movs	r2, #7
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	4019      	ands	r1, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6898      	ldr	r0, [r3, #8]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	3b3c      	subs	r3, #60	; 0x3c
 80029bc:	fa00 f203 	lsl.w	r2, r0, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	60da      	str	r2, [r3, #12]
 80029c8:	e01b      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	3b5a      	subs	r3, #90	; 0x5a
 80029dc:	2207      	movs	r2, #7
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	4019      	ands	r1, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6898      	ldr	r0, [r3, #8]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4613      	mov	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	3b5a      	subs	r3, #90	; 0x5a
 80029f6:	fa00 f203 	lsl.w	r2, r0, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d003      	beq.n	8002a12 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a0e:	2b11      	cmp	r3, #17
 8002a10:	d121      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002a12:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <HAL_ADC_ConfigChannel+0x2cc>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d11b      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002a1e:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <HAL_ADC_ConfigChannel+0x2cc>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <HAL_ADC_ConfigChannel+0x2cc>)
 8002a24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a28:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d111      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a32:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <HAL_ADC_ConfigChannel+0x2d0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a0f      	ldr	r2, [pc, #60]	; (8002a74 <HAL_ADC_ConfigChannel+0x2d4>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	0c9a      	lsrs	r2, r3, #18
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002a48:	e002      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f9      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40012700 	.word	0x40012700
 8002a70:	2000000c 	.word	0x2000000c
 8002a74:	431bde83 	.word	0x431bde83

08002a78 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a92:	2b40      	cmp	r3, #64	; 0x40
 8002a94:	d03c      	beq.n	8002b10 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <ADC_Enable+0xa4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <ADC_Enable+0xa8>)
 8002aac:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab0:	0c9a      	lsrs	r2, r3, #18
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002aba:	e002      	b.n	8002ac2 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f9      	bne.n	8002abc <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002ac8:	f7ff fbd6 	bl	8002278 <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ace:	e018      	b.n	8002b02 <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002ad0:	f7ff fbd2 	bl	8002278 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d911      	bls.n	8002b02 <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae2:	f043 0210 	orr.w	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e007      	b.n	8002b12 <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0c:	2b40      	cmp	r3, #64	; 0x40
 8002b0e:	d1df      	bne.n	8002ad0 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	2000000c 	.word	0x2000000c
 8002b20:	431bde83 	.word	0x431bde83

08002b24 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b40      	cmp	r3, #64	; 0x40
 8002b3c:	d127      	bne.n	8002b8e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b4e:	f7ff fb93 	bl	8002278 <HAL_GetTick>
 8002b52:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b54:	e014      	b.n	8002b80 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002b56:	f7ff fb8f 	bl	8002278 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d90d      	bls.n	8002b80 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b68:	f043 0210 	orr.w	r2, r3, #16
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	651a      	str	r2, [r3, #80]	; 0x50
        
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e007      	b.n	8002b90 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d0e3      	beq.n	8002b56 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <__NVIC_SetPriorityGrouping+0x44>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bca:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <__NVIC_SetPriorityGrouping+0x44>)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	60d3      	str	r3, [r2, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	0a1b      	lsrs	r3, r3, #8
 8002bea:	f003 0307 	and.w	r3, r3, #7
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	db0b      	blt.n	8002c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	f003 021f 	and.w	r2, r3, #31
 8002c14:	4906      	ldr	r1, [pc, #24]	; (8002c30 <__NVIC_EnableIRQ+0x34>)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	e000e100 	.word	0xe000e100

08002c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	db0a      	blt.n	8002c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	490c      	ldr	r1, [pc, #48]	; (8002c80 <__NVIC_SetPriority+0x4c>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	440b      	add	r3, r1
 8002c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c5c:	e00a      	b.n	8002c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4908      	ldr	r1, [pc, #32]	; (8002c84 <__NVIC_SetPriority+0x50>)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	3b04      	subs	r3, #4
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	440b      	add	r3, r1
 8002c72:	761a      	strb	r2, [r3, #24]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000e100 	.word	0xe000e100
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	bf28      	it	cs
 8002ca6:	2304      	movcs	r3, #4
 8002ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d902      	bls.n	8002cb8 <NVIC_EncodePriority+0x30>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3b03      	subs	r3, #3
 8002cb6:	e000      	b.n	8002cba <NVIC_EncodePriority+0x32>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	401a      	ands	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	43d9      	mvns	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	4313      	orrs	r3, r2
         );
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3724      	adds	r7, #36	; 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cfc:	d301      	bcc.n	8002d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e00f      	b.n	8002d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d02:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <SysTick_Config+0x40>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d0a:	210f      	movs	r1, #15
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d10:	f7ff ff90 	bl	8002c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <SysTick_Config+0x40>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d1a:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <SysTick_Config+0x40>)
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	e000e010 	.word	0xe000e010

08002d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ff2d 	bl	8002b98 <__NVIC_SetPriorityGrouping>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d58:	f7ff ff42 	bl	8002be0 <__NVIC_GetPriorityGrouping>
 8002d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	6978      	ldr	r0, [r7, #20]
 8002d64:	f7ff ff90 	bl	8002c88 <NVIC_EncodePriority>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff5f 	bl	8002c34 <__NVIC_SetPriority>
}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	4603      	mov	r3, r0
 8002d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff35 	bl	8002bfc <__NVIC_EnableIRQ>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ffa2 	bl	8002cec <SysTick_Config>
 8002da8:	4603      	mov	r3, r0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002dca:	e160      	b.n	800308e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8152 	beq.w	8003088 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d00b      	beq.n	8002e04 <HAL_GPIO_Init+0x50>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d007      	beq.n	8002e04 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002df8:	2b11      	cmp	r3, #17
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b12      	cmp	r3, #18
 8002e02:	d130      	bne.n	8002e66 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	2203      	movs	r2, #3
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4013      	ands	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	091b      	lsrs	r3, r3, #4
 8002e50:	f003 0201 	and.w	r2, r3, #1
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2203      	movs	r2, #3
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0xf2>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b12      	cmp	r3, #18
 8002ea4:	d123      	bne.n	8002eee <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3208      	adds	r2, #8
 8002eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	08da      	lsrs	r2, r3, #3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3208      	adds	r2, #8
 8002ee8:	6939      	ldr	r1, [r7, #16]
 8002eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	2203      	movs	r2, #3
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0203 	and.w	r2, r3, #3
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80ac 	beq.w	8003088 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f30:	4b5d      	ldr	r3, [pc, #372]	; (80030a8 <HAL_GPIO_Init+0x2f4>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4a5c      	ldr	r2, [pc, #368]	; (80030a8 <HAL_GPIO_Init+0x2f4>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6213      	str	r3, [r2, #32]
 8002f3c:	4b5a      	ldr	r3, [pc, #360]	; (80030a8 <HAL_GPIO_Init+0x2f4>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f48:	4a58      	ldr	r2, [pc, #352]	; (80030ac <HAL_GPIO_Init+0x2f8>)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	3302      	adds	r3, #2
 8002f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	220f      	movs	r2, #15
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a50      	ldr	r2, [pc, #320]	; (80030b0 <HAL_GPIO_Init+0x2fc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d025      	beq.n	8002fc0 <HAL_GPIO_Init+0x20c>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a4f      	ldr	r2, [pc, #316]	; (80030b4 <HAL_GPIO_Init+0x300>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d01f      	beq.n	8002fbc <HAL_GPIO_Init+0x208>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a4e      	ldr	r2, [pc, #312]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d019      	beq.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a4d      	ldr	r2, [pc, #308]	; (80030bc <HAL_GPIO_Init+0x308>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d013      	beq.n	8002fb4 <HAL_GPIO_Init+0x200>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a4c      	ldr	r2, [pc, #304]	; (80030c0 <HAL_GPIO_Init+0x30c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d00d      	beq.n	8002fb0 <HAL_GPIO_Init+0x1fc>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a4b      	ldr	r2, [pc, #300]	; (80030c4 <HAL_GPIO_Init+0x310>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d007      	beq.n	8002fac <HAL_GPIO_Init+0x1f8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a4a      	ldr	r2, [pc, #296]	; (80030c8 <HAL_GPIO_Init+0x314>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d101      	bne.n	8002fa8 <HAL_GPIO_Init+0x1f4>
 8002fa4:	2306      	movs	r3, #6
 8002fa6:	e00c      	b.n	8002fc2 <HAL_GPIO_Init+0x20e>
 8002fa8:	2307      	movs	r3, #7
 8002faa:	e00a      	b.n	8002fc2 <HAL_GPIO_Init+0x20e>
 8002fac:	2305      	movs	r3, #5
 8002fae:	e008      	b.n	8002fc2 <HAL_GPIO_Init+0x20e>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	e006      	b.n	8002fc2 <HAL_GPIO_Init+0x20e>
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e004      	b.n	8002fc2 <HAL_GPIO_Init+0x20e>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e002      	b.n	8002fc2 <HAL_GPIO_Init+0x20e>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <HAL_GPIO_Init+0x20e>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	f002 0203 	and.w	r2, r2, #3
 8002fc8:	0092      	lsls	r2, r2, #2
 8002fca:	4093      	lsls	r3, r2
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fd2:	4936      	ldr	r1, [pc, #216]	; (80030ac <HAL_GPIO_Init+0x2f8>)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	3302      	adds	r3, #2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe0:	4b3a      	ldr	r3, [pc, #232]	; (80030cc <HAL_GPIO_Init+0x318>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003004:	4a31      	ldr	r2, [pc, #196]	; (80030cc <HAL_GPIO_Init+0x318>)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800300a:	4b30      	ldr	r3, [pc, #192]	; (80030cc <HAL_GPIO_Init+0x318>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	43db      	mvns	r3, r3
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4013      	ands	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800302e:	4a27      	ldr	r2, [pc, #156]	; (80030cc <HAL_GPIO_Init+0x318>)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003034:	4b25      	ldr	r3, [pc, #148]	; (80030cc <HAL_GPIO_Init+0x318>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	43db      	mvns	r3, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003058:	4a1c      	ldr	r2, [pc, #112]	; (80030cc <HAL_GPIO_Init+0x318>)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800305e:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_GPIO_Init+0x318>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	43db      	mvns	r3, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003082:	4a12      	ldr	r2, [pc, #72]	; (80030cc <HAL_GPIO_Init+0x318>)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	3301      	adds	r3, #1
 800308c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	f47f ae97 	bne.w	8002dcc <HAL_GPIO_Init+0x18>
  }
}
 800309e:	bf00      	nop
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40010000 	.word	0x40010000
 80030b0:	40020000 	.word	0x40020000
 80030b4:	40020400 	.word	0x40020400
 80030b8:	40020800 	.word	0x40020800
 80030bc:	40020c00 	.word	0x40020c00
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40021400 	.word	0x40021400
 80030c8:	40021800 	.word	0x40021800
 80030cc:	40010400 	.word	0x40010400

080030d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	887b      	ldrh	r3, [r7, #2]
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	e001      	b.n	80030f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr

080030fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	807b      	strh	r3, [r7, #2]
 800310a:	4613      	mov	r3, r2
 800310c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800310e:	787b      	ldrb	r3, [r7, #1]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003114:	887a      	ldrh	r2, [r7, #2]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800311a:	e003      	b.n	8003124 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	041a      	lsls	r2, r3, #16
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	619a      	str	r2, [r3, #24]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
	...

08003130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e11f      	b.n	8003382 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe fd6c 	bl	8001c34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2224      	movs	r2, #36	; 0x24
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0201 	bic.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003192:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003194:	f001 f942 	bl	800441c <HAL_RCC_GetPCLK1Freq>
 8003198:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4a7b      	ldr	r2, [pc, #492]	; (800338c <HAL_I2C_Init+0x25c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d807      	bhi.n	80031b4 <HAL_I2C_Init+0x84>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4a7a      	ldr	r2, [pc, #488]	; (8003390 <HAL_I2C_Init+0x260>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	bf94      	ite	ls
 80031ac:	2301      	movls	r3, #1
 80031ae:	2300      	movhi	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	e006      	b.n	80031c2 <HAL_I2C_Init+0x92>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4a77      	ldr	r2, [pc, #476]	; (8003394 <HAL_I2C_Init+0x264>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	bf94      	ite	ls
 80031bc:	2301      	movls	r3, #1
 80031be:	2300      	movhi	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0db      	b.n	8003382 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4a72      	ldr	r2, [pc, #456]	; (8003398 <HAL_I2C_Init+0x268>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0c9b      	lsrs	r3, r3, #18
 80031d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4a64      	ldr	r2, [pc, #400]	; (800338c <HAL_I2C_Init+0x25c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d802      	bhi.n	8003204 <HAL_I2C_Init+0xd4>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	3301      	adds	r3, #1
 8003202:	e009      	b.n	8003218 <HAL_I2C_Init+0xe8>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	4a63      	ldr	r2, [pc, #396]	; (800339c <HAL_I2C_Init+0x26c>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	3301      	adds	r3, #1
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	430b      	orrs	r3, r1
 800321e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800322a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4956      	ldr	r1, [pc, #344]	; (800338c <HAL_I2C_Init+0x25c>)
 8003234:	428b      	cmp	r3, r1
 8003236:	d80d      	bhi.n	8003254 <HAL_I2C_Init+0x124>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e59      	subs	r1, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	fbb1 f3f3 	udiv	r3, r1, r3
 8003246:	3301      	adds	r3, #1
 8003248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324c:	2b04      	cmp	r3, #4
 800324e:	bf38      	it	cc
 8003250:	2304      	movcc	r3, #4
 8003252:	e04f      	b.n	80032f4 <HAL_I2C_Init+0x1c4>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d111      	bne.n	8003280 <HAL_I2C_Init+0x150>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1e58      	subs	r0, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	440b      	add	r3, r1
 800326a:	fbb0 f3f3 	udiv	r3, r0, r3
 800326e:	3301      	adds	r3, #1
 8003270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003274:	2b00      	cmp	r3, #0
 8003276:	bf0c      	ite	eq
 8003278:	2301      	moveq	r3, #1
 800327a:	2300      	movne	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	e012      	b.n	80032a6 <HAL_I2C_Init+0x176>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1e58      	subs	r0, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	0099      	lsls	r1, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	fbb0 f3f3 	udiv	r3, r0, r3
 8003296:	3301      	adds	r3, #1
 8003298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329c:	2b00      	cmp	r3, #0
 800329e:	bf0c      	ite	eq
 80032a0:	2301      	moveq	r3, #1
 80032a2:	2300      	movne	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_I2C_Init+0x17e>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e022      	b.n	80032f4 <HAL_I2C_Init+0x1c4>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10e      	bne.n	80032d4 <HAL_I2C_Init+0x1a4>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1e58      	subs	r0, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	440b      	add	r3, r1
 80032c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c8:	3301      	adds	r3, #1
 80032ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d2:	e00f      	b.n	80032f4 <HAL_I2C_Init+0x1c4>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1e58      	subs	r0, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	0099      	lsls	r1, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ea:	3301      	adds	r3, #1
 80032ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	6809      	ldr	r1, [r1, #0]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003322:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6911      	ldr	r1, [r2, #16]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68d2      	ldr	r2, [r2, #12]
 800332e:	4311      	orrs	r1, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	430b      	orrs	r3, r1
 8003336:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	000186a0 	.word	0x000186a0
 8003390:	001e847f 	.word	0x001e847f
 8003394:	003d08ff 	.word	0x003d08ff
 8003398:	431bde83 	.word	0x431bde83
 800339c:	10624dd3 	.word	0x10624dd3

080033a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	461a      	mov	r2, r3
 80033ac:	460b      	mov	r3, r1
 80033ae:	817b      	strh	r3, [r7, #10]
 80033b0:	4613      	mov	r3, r2
 80033b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033b4:	f7fe ff60 	bl	8002278 <HAL_GetTick>
 80033b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	f040 80e0 	bne.w	8003588 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	2319      	movs	r3, #25
 80033ce:	2201      	movs	r2, #1
 80033d0:	4970      	ldr	r1, [pc, #448]	; (8003594 <HAL_I2C_Master_Transmit+0x1f4>)
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f964 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
 80033e0:	e0d3      	b.n	800358a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_I2C_Master_Transmit+0x50>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e0cc      	b.n	800358a <HAL_I2C_Master_Transmit+0x1ea>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	d007      	beq.n	8003416 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0201 	orr.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003424:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2221      	movs	r2, #33	; 0x21
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2210      	movs	r2, #16
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	893a      	ldrh	r2, [r7, #8]
 8003446:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a50      	ldr	r2, [pc, #320]	; (8003598 <HAL_I2C_Master_Transmit+0x1f8>)
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003458:	8979      	ldrh	r1, [r7, #10]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	6a3a      	ldr	r2, [r7, #32]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f89c 	bl	800359c <I2C_MasterRequestWrite>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e08d      	b.n	800358a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003484:	e066      	b.n	8003554 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	6a39      	ldr	r1, [r7, #32]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f9de 	bl	800384c <I2C_WaitOnTXEFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00d      	beq.n	80034b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2b04      	cmp	r3, #4
 800349c:	d107      	bne.n	80034ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e06b      	b.n	800358a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	781a      	ldrb	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d11b      	bne.n	8003528 <HAL_I2C_Master_Transmit+0x188>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d017      	beq.n	8003528 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	6a39      	ldr	r1, [r7, #32]
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f9ce 	bl	80038ce <I2C_WaitOnBTFFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00d      	beq.n	8003554 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	2b04      	cmp	r3, #4
 800353e:	d107      	bne.n	8003550 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e01a      	b.n	800358a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	2b00      	cmp	r3, #0
 800355a:	d194      	bne.n	8003486 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	e000      	b.n	800358a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003588:	2302      	movs	r3, #2
  }
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	00100002 	.word	0x00100002
 8003598:	ffff0000 	.word	0xffff0000

0800359c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	460b      	mov	r3, r1
 80035aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d006      	beq.n	80035c6 <I2C_MasterRequestWrite+0x2a>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d003      	beq.n	80035c6 <I2C_MasterRequestWrite+0x2a>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035c4:	d108      	bne.n	80035d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	e00b      	b.n	80035f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	2b12      	cmp	r3, #18
 80035de:	d107      	bne.n	80035f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f84f 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00d      	beq.n	8003624 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003616:	d103      	bne.n	8003620 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e035      	b.n	8003690 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800362c:	d108      	bne.n	8003640 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800363c:	611a      	str	r2, [r3, #16]
 800363e:	e01b      	b.n	8003678 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003640:	897b      	ldrh	r3, [r7, #10]
 8003642:	11db      	asrs	r3, r3, #7
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f003 0306 	and.w	r3, r3, #6
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f063 030f 	orn	r3, r3, #15
 8003650:	b2da      	uxtb	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	490e      	ldr	r1, [pc, #56]	; (8003698 <I2C_MasterRequestWrite+0xfc>)
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f875 	bl	800374e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e010      	b.n	8003690 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800366e:	897b      	ldrh	r3, [r7, #10]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4907      	ldr	r1, [pc, #28]	; (800369c <I2C_MasterRequestWrite+0x100>)
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f865 	bl	800374e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	00010008 	.word	0x00010008
 800369c:	00010002 	.word	0x00010002

080036a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	4613      	mov	r3, r2
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b0:	e025      	b.n	80036fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d021      	beq.n	80036fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ba:	f7fe fddd 	bl	8002278 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d302      	bcc.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d116      	bne.n	80036fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f043 0220 	orr.w	r2, r3, #32
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e023      	b.n	8003746 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	0c1b      	lsrs	r3, r3, #16
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d10d      	bne.n	8003724 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	43da      	mvns	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4013      	ands	r3, r2
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	bf0c      	ite	eq
 800371a:	2301      	moveq	r3, #1
 800371c:	2300      	movne	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	e00c      	b.n	800373e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	bf0c      	ite	eq
 8003736:	2301      	moveq	r3, #1
 8003738:	2300      	movne	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	429a      	cmp	r2, r3
 8003742:	d0b6      	beq.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800375c:	e051      	b.n	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376c:	d123      	bne.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003786:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f043 0204 	orr.w	r2, r3, #4
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e046      	b.n	8003844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d021      	beq.n	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037be:	f7fe fd5b 	bl	8002278 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d302      	bcc.n	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d116      	bne.n	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f043 0220 	orr.w	r2, r3, #32
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e020      	b.n	8003844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d10c      	bne.n	8003826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	43da      	mvns	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4013      	ands	r3, r2
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	bf14      	ite	ne
 800381e:	2301      	movne	r3, #1
 8003820:	2300      	moveq	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	e00b      	b.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	43da      	mvns	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	4013      	ands	r3, r2
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf14      	ite	ne
 8003838:	2301      	movne	r3, #1
 800383a:	2300      	moveq	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d18d      	bne.n	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003858:	e02d      	b.n	80038b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f878 	bl	8003950 <I2C_IsAcknowledgeFailed>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e02d      	b.n	80038c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d021      	beq.n	80038b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003872:	f7fe fd01 	bl	8002278 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	d302      	bcc.n	8003888 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d116      	bne.n	80038b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f043 0220 	orr.w	r2, r3, #32
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e007      	b.n	80038c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c0:	2b80      	cmp	r3, #128	; 0x80
 80038c2:	d1ca      	bne.n	800385a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038da:	e02d      	b.n	8003938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f837 	bl	8003950 <I2C_IsAcknowledgeFailed>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e02d      	b.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	d021      	beq.n	8003938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f4:	f7fe fcc0 	bl	8002278 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	429a      	cmp	r2, r3
 8003902:	d302      	bcc.n	800390a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d116      	bne.n	8003938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	f043 0220 	orr.w	r2, r3, #32
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e007      	b.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b04      	cmp	r3, #4
 8003944:	d1ca      	bne.n	80038dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003966:	d11b      	bne.n	80039a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003970:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	f043 0204 	orr.w	r2, r3, #4
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e31d      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039be:	4b94      	ldr	r3, [pc, #592]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c8:	4b91      	ldr	r3, [pc, #580]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d07b      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d006      	beq.n	80039f2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2b0c      	cmp	r3, #12
 80039e8:	d10f      	bne.n	8003a0a <HAL_RCC_OscConfig+0x5e>
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f0:	d10b      	bne.n	8003a0a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f2:	4b87      	ldr	r3, [pc, #540]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d06a      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x128>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d166      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e2f7      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d106      	bne.n	8003a20 <HAL_RCC_OscConfig+0x74>
 8003a12:	4b7f      	ldr	r3, [pc, #508]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a7e      	ldr	r2, [pc, #504]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e02d      	b.n	8003a7c <HAL_RCC_OscConfig+0xd0>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10c      	bne.n	8003a42 <HAL_RCC_OscConfig+0x96>
 8003a28:	4b79      	ldr	r3, [pc, #484]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a78      	ldr	r2, [pc, #480]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	4b76      	ldr	r3, [pc, #472]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a75      	ldr	r2, [pc, #468]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	e01c      	b.n	8003a7c <HAL_RCC_OscConfig+0xd0>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0xb8>
 8003a4a:	4b71      	ldr	r3, [pc, #452]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a70      	ldr	r2, [pc, #448]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b6e      	ldr	r3, [pc, #440]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6d      	ldr	r2, [pc, #436]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e00b      	b.n	8003a7c <HAL_RCC_OscConfig+0xd0>
 8003a64:	4b6a      	ldr	r3, [pc, #424]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a69      	ldr	r2, [pc, #420]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	4b67      	ldr	r3, [pc, #412]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a66      	ldr	r2, [pc, #408]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d013      	beq.n	8003aac <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fe fbf8 	bl	8002278 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7fe fbf4 	bl	8002278 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	; 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e2ad      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a9e:	4b5c      	ldr	r3, [pc, #368]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0xe0>
 8003aaa:	e014      	b.n	8003ad6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fe fbe4 	bl	8002278 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab4:	f7fe fbe0 	bl	8002278 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e299      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ac6:	4b52      	ldr	r3, [pc, #328]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x108>
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d05a      	beq.n	8003b98 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d119      	bne.n	8003b22 <HAL_RCC_OscConfig+0x176>
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d116      	bne.n	8003b22 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af4:	4b46      	ldr	r3, [pc, #280]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_OscConfig+0x160>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e276      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0c:	4b40      	ldr	r3, [pc, #256]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	493d      	ldr	r1, [pc, #244]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b20:	e03a      	b.n	8003b98 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d020      	beq.n	8003b6c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b2a:	4b3a      	ldr	r3, [pc, #232]	; (8003c14 <HAL_RCC_OscConfig+0x268>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7fe fba2 	bl	8002278 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b38:	f7fe fb9e 	bl	8002278 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e257      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b4a:	4b31      	ldr	r3, [pc, #196]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b56:	4b2e      	ldr	r3, [pc, #184]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	021b      	lsls	r3, r3, #8
 8003b64:	492a      	ldr	r1, [pc, #168]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	604b      	str	r3, [r1, #4]
 8003b6a:	e015      	b.n	8003b98 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6c:	4b29      	ldr	r3, [pc, #164]	; (8003c14 <HAL_RCC_OscConfig+0x268>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b72:	f7fe fb81 	bl	8002278 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b7a:	f7fe fb7d 	bl	8002278 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e236      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b8c:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80b8 	beq.w	8003d16 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d170      	bne.n	8003c8e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bac:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x218>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e21a      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d921      	bls.n	8003c18 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fc47 	bl	800446c <RCC_SetFlashLatencyFromMSIRange>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e208      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003be8:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4906      	ldr	r1, [pc, #24]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	061b      	lsls	r3, r3, #24
 8003c08:	4901      	ldr	r1, [pc, #4]	; (8003c10 <HAL_RCC_OscConfig+0x264>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]
 8003c0e:	e020      	b.n	8003c52 <HAL_RCC_OscConfig+0x2a6>
 8003c10:	40023800 	.word	0x40023800
 8003c14:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c18:	4ba4      	ldr	r3, [pc, #656]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	49a1      	ldr	r1, [pc, #644]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c2a:	4ba0      	ldr	r3, [pc, #640]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	061b      	lsls	r3, r3, #24
 8003c38:	499c      	ldr	r1, [pc, #624]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fc12 	bl	800446c <RCC_SetFlashLatencyFromMSIRange>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e1d3      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	0b5b      	lsrs	r3, r3, #13
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c62:	4a92      	ldr	r2, [pc, #584]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003c64:	6892      	ldr	r2, [r2, #8]
 8003c66:	0912      	lsrs	r2, r2, #4
 8003c68:	f002 020f 	and.w	r2, r2, #15
 8003c6c:	4990      	ldr	r1, [pc, #576]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003c6e:	5c8a      	ldrb	r2, [r1, r2]
 8003c70:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c72:	4a90      	ldr	r2, [pc, #576]	; (8003eb4 <HAL_RCC_OscConfig+0x508>)
 8003c74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c76:	4b90      	ldr	r3, [pc, #576]	; (8003eb8 <HAL_RCC_OscConfig+0x50c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe fab0 	bl	80021e0 <HAL_InitTick>
 8003c80:	4603      	mov	r3, r0
 8003c82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d045      	beq.n	8003d16 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	e1b5      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d029      	beq.n	8003cea <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c96:	4b89      	ldr	r3, [pc, #548]	; (8003ebc <HAL_RCC_OscConfig+0x510>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9c:	f7fe faec 	bl	8002278 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ca4:	f7fe fae8 	bl	8002278 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e1a1      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cb6:	4b7d      	ldr	r3, [pc, #500]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cc2:	4b7a      	ldr	r3, [pc, #488]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	4977      	ldr	r1, [pc, #476]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cd4:	4b75      	ldr	r3, [pc, #468]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	061b      	lsls	r3, r3, #24
 8003ce2:	4972      	ldr	r1, [pc, #456]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	604b      	str	r3, [r1, #4]
 8003ce8:	e015      	b.n	8003d16 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cea:	4b74      	ldr	r3, [pc, #464]	; (8003ebc <HAL_RCC_OscConfig+0x510>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fe fac2 	bl	8002278 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cf8:	f7fe fabe 	bl	8002278 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e177      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d0a:	4b68      	ldr	r3, [pc, #416]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d030      	beq.n	8003d84 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d016      	beq.n	8003d58 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2a:	4b65      	ldr	r3, [pc, #404]	; (8003ec0 <HAL_RCC_OscConfig+0x514>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d30:	f7fe faa2 	bl	8002278 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d38:	f7fe fa9e 	bl	8002278 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e157      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d4a:	4b58      	ldr	r3, [pc, #352]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCC_OscConfig+0x38c>
 8003d56:	e015      	b.n	8003d84 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d58:	4b59      	ldr	r3, [pc, #356]	; (8003ec0 <HAL_RCC_OscConfig+0x514>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5e:	f7fe fa8b 	bl	8002278 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d66:	f7fe fa87 	bl	8002278 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e140      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d78:	4b4c      	ldr	r3, [pc, #304]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1f0      	bne.n	8003d66 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80b5 	beq.w	8003efc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d92:	2300      	movs	r3, #0
 8003d94:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d96:	4b45      	ldr	r3, [pc, #276]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10d      	bne.n	8003dbe <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da2:	4b42      	ldr	r3, [pc, #264]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	4a41      	ldr	r2, [pc, #260]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dac:	6253      	str	r3, [r2, #36]	; 0x24
 8003dae:	4b3f      	ldr	r3, [pc, #252]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbe:	4b41      	ldr	r3, [pc, #260]	; (8003ec4 <HAL_RCC_OscConfig+0x518>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d118      	bne.n	8003dfc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dca:	4b3e      	ldr	r3, [pc, #248]	; (8003ec4 <HAL_RCC_OscConfig+0x518>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a3d      	ldr	r2, [pc, #244]	; (8003ec4 <HAL_RCC_OscConfig+0x518>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd6:	f7fe fa4f 	bl	8002278 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dde:	f7fe fa4b 	bl	8002278 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b64      	cmp	r3, #100	; 0x64
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e104      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	4b34      	ldr	r3, [pc, #208]	; (8003ec4 <HAL_RCC_OscConfig+0x518>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d106      	bne.n	8003e12 <HAL_RCC_OscConfig+0x466>
 8003e04:	4b29      	ldr	r3, [pc, #164]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e08:	4a28      	ldr	r2, [pc, #160]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0e:	6353      	str	r3, [r2, #52]	; 0x34
 8003e10:	e02d      	b.n	8003e6e <HAL_RCC_OscConfig+0x4c2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x488>
 8003e1a:	4b24      	ldr	r3, [pc, #144]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1e:	4a23      	ldr	r2, [pc, #140]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e24:	6353      	str	r3, [r2, #52]	; 0x34
 8003e26:	4b21      	ldr	r3, [pc, #132]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	4a20      	ldr	r2, [pc, #128]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e30:	6353      	str	r3, [r2, #52]	; 0x34
 8003e32:	e01c      	b.n	8003e6e <HAL_RCC_OscConfig+0x4c2>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b05      	cmp	r3, #5
 8003e3a:	d10c      	bne.n	8003e56 <HAL_RCC_OscConfig+0x4aa>
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e40:	4a1a      	ldr	r2, [pc, #104]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e46:	6353      	str	r3, [r2, #52]	; 0x34
 8003e48:	4b18      	ldr	r3, [pc, #96]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4c:	4a17      	ldr	r2, [pc, #92]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e52:	6353      	str	r3, [r2, #52]	; 0x34
 8003e54:	e00b      	b.n	8003e6e <HAL_RCC_OscConfig+0x4c2>
 8003e56:	4b15      	ldr	r3, [pc, #84]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5a:	4a14      	ldr	r2, [pc, #80]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e60:	6353      	str	r3, [r2, #52]	; 0x34
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	4a11      	ldr	r2, [pc, #68]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003e68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e6c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d015      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e76:	f7fe f9ff 	bl	8002278 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e7c:	e00a      	b.n	8003e94 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fe f9fb 	bl	8002278 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e0b2      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <HAL_RCC_OscConfig+0x500>)
 8003e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0ee      	beq.n	8003e7e <HAL_RCC_OscConfig+0x4d2>
 8003ea0:	e023      	b.n	8003eea <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea2:	f7fe f9e9 	bl	8002278 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ea8:	e019      	b.n	8003ede <HAL_RCC_OscConfig+0x532>
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	08006dd0 	.word	0x08006dd0
 8003eb4:	2000000c 	.word	0x2000000c
 8003eb8:	20000010 	.word	0x20000010
 8003ebc:	42470020 	.word	0x42470020
 8003ec0:	42470680 	.word	0x42470680
 8003ec4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fe f9d6 	bl	8002278 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e08d      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ede:	4b49      	ldr	r3, [pc, #292]	; (8004004 <HAL_RCC_OscConfig+0x658>)
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1ee      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003eea:	7ffb      	ldrb	r3, [r7, #31]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d105      	bne.n	8003efc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef0:	4b44      	ldr	r3, [pc, #272]	; (8004004 <HAL_RCC_OscConfig+0x658>)
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	4a43      	ldr	r2, [pc, #268]	; (8004004 <HAL_RCC_OscConfig+0x658>)
 8003ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efa:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d079      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d056      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d13b      	bne.n	8003f8a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f12:	4b3d      	ldr	r3, [pc, #244]	; (8004008 <HAL_RCC_OscConfig+0x65c>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fe f9ae 	bl	8002278 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fe f9aa 	bl	8002278 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e063      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f32:	4b34      	ldr	r3, [pc, #208]	; (8004004 <HAL_RCC_OscConfig+0x658>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f3e:	4b31      	ldr	r3, [pc, #196]	; (8004004 <HAL_RCC_OscConfig+0x658>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	4319      	orrs	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	430b      	orrs	r3, r1
 8003f56:	492b      	ldr	r1, [pc, #172]	; (8004004 <HAL_RCC_OscConfig+0x658>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f5c:	4b2a      	ldr	r3, [pc, #168]	; (8004008 <HAL_RCC_OscConfig+0x65c>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f62:	f7fe f989 	bl	8002278 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fe f985 	bl	8002278 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e03e      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f7c:	4b21      	ldr	r3, [pc, #132]	; (8004004 <HAL_RCC_OscConfig+0x658>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x5be>
 8003f88:	e036      	b.n	8003ff8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4b1f      	ldr	r3, [pc, #124]	; (8004008 <HAL_RCC_OscConfig+0x65c>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fe f972 	bl	8002278 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fe f96e 	bl	8002278 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e027      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003faa:	4b16      	ldr	r3, [pc, #88]	; (8004004 <HAL_RCC_OscConfig+0x658>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x5ec>
 8003fb6:	e01f      	b.n	8003ff8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e01a      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <HAL_RCC_OscConfig+0x658>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d10d      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800
 8004008:	42470060 	.word	0x42470060

0800400c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e11a      	b.n	8004256 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004020:	4b8f      	ldr	r3, [pc, #572]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d919      	bls.n	8004062 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d105      	bne.n	8004040 <HAL_RCC_ClockConfig+0x34>
 8004034:	4b8a      	ldr	r3, [pc, #552]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a89      	ldr	r2, [pc, #548]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 800403a:	f043 0304 	orr.w	r3, r3, #4
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	4b87      	ldr	r3, [pc, #540]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f023 0201 	bic.w	r2, r3, #1
 8004048:	4985      	ldr	r1, [pc, #532]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	4313      	orrs	r3, r2
 800404e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004050:	4b83      	ldr	r3, [pc, #524]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d001      	beq.n	8004062 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e0f9      	b.n	8004256 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d008      	beq.n	8004080 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800406e:	4b7d      	ldr	r3, [pc, #500]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	497a      	ldr	r1, [pc, #488]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 800407c:	4313      	orrs	r3, r2
 800407e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 808e 	beq.w	80041aa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d107      	bne.n	80040a6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004096:	4b73      	ldr	r3, [pc, #460]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d121      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e0d7      	b.n	8004256 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d107      	bne.n	80040be <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040ae:	4b6d      	ldr	r3, [pc, #436]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d115      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e0cb      	b.n	8004256 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040c6:	4b67      	ldr	r3, [pc, #412]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e0bf      	b.n	8004256 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040d6:	4b63      	ldr	r3, [pc, #396]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e0b7      	b.n	8004256 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040e6:	4b5f      	ldr	r3, [pc, #380]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f023 0203 	bic.w	r2, r3, #3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	495c      	ldr	r1, [pc, #368]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040f8:	f7fe f8be 	bl	8002278 <HAL_GetTick>
 80040fc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d112      	bne.n	800412c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004106:	e00a      	b.n	800411e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004108:	f7fe f8b6 	bl	8002278 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	; 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e09b      	b.n	8004256 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800411e:	4b51      	ldr	r3, [pc, #324]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
 8004126:	2b08      	cmp	r3, #8
 8004128:	d1ee      	bne.n	8004108 <HAL_RCC_ClockConfig+0xfc>
 800412a:	e03e      	b.n	80041aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b03      	cmp	r3, #3
 8004132:	d112      	bne.n	800415a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004134:	e00a      	b.n	800414c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004136:	f7fe f89f 	bl	8002278 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e084      	b.n	8004256 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800414c:	4b45      	ldr	r3, [pc, #276]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 030c 	and.w	r3, r3, #12
 8004154:	2b0c      	cmp	r3, #12
 8004156:	d1ee      	bne.n	8004136 <HAL_RCC_ClockConfig+0x12a>
 8004158:	e027      	b.n	80041aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d11d      	bne.n	800419e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004162:	e00a      	b.n	800417a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004164:	f7fe f888 	bl	8002278 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e06d      	b.n	8004256 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800417a:	4b3a      	ldr	r3, [pc, #232]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b04      	cmp	r3, #4
 8004184:	d1ee      	bne.n	8004164 <HAL_RCC_ClockConfig+0x158>
 8004186:	e010      	b.n	80041aa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004188:	f7fe f876 	bl	8002278 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e05b      	b.n	8004256 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800419e:	4b31      	ldr	r3, [pc, #196]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1ee      	bne.n	8004188 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041aa:	4b2d      	ldr	r3, [pc, #180]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d219      	bcs.n	80041ec <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d105      	bne.n	80041ca <HAL_RCC_ClockConfig+0x1be>
 80041be:	4b28      	ldr	r3, [pc, #160]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a27      	ldr	r2, [pc, #156]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 80041c4:	f043 0304 	orr.w	r3, r3, #4
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b25      	ldr	r3, [pc, #148]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 0201 	bic.w	r2, r3, #1
 80041d2:	4923      	ldr	r1, [pc, #140]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041da:	4b21      	ldr	r3, [pc, #132]	; (8004260 <HAL_RCC_ClockConfig+0x254>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e034      	b.n	8004256 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f8:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4917      	ldr	r1, [pc, #92]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d009      	beq.n	800422a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004216:	4b13      	ldr	r3, [pc, #76]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	490f      	ldr	r1, [pc, #60]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800422a:	f000 f823 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 800422e:	4601      	mov	r1, r0
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <HAL_RCC_ClockConfig+0x258>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	4a0b      	ldr	r2, [pc, #44]	; (8004268 <HAL_RCC_ClockConfig+0x25c>)
 800423c:	5cd3      	ldrb	r3, [r2, r3]
 800423e:	fa21 f303 	lsr.w	r3, r1, r3
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <HAL_RCC_ClockConfig+0x260>)
 8004244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004246:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <HAL_RCC_ClockConfig+0x264>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7fd ffc8 	bl	80021e0 <HAL_InitTick>
 8004250:	4603      	mov	r3, r0
 8004252:	72fb      	strb	r3, [r7, #11]

  return status;
 8004254:	7afb      	ldrb	r3, [r7, #11]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40023c00 	.word	0x40023c00
 8004264:	40023800 	.word	0x40023800
 8004268:	08006dd0 	.word	0x08006dd0
 800426c:	2000000c 	.word	0x2000000c
 8004270:	20000010 	.word	0x20000010

08004274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800427a:	4b5f      	ldr	r3, [pc, #380]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x184>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b08      	cmp	r3, #8
 8004288:	d007      	beq.n	800429a <HAL_RCC_GetSysClockFreq+0x26>
 800428a:	2b0c      	cmp	r3, #12
 800428c:	d008      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x2c>
 800428e:	2b04      	cmp	r3, #4
 8004290:	f040 809f 	bne.w	80043d2 <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004294:	4b59      	ldr	r3, [pc, #356]	; (80043fc <HAL_RCC_GetSysClockFreq+0x188>)
 8004296:	613b      	str	r3, [r7, #16]
      break;
 8004298:	e0a9      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800429a:	4b59      	ldr	r3, [pc, #356]	; (8004400 <HAL_RCC_GetSysClockFreq+0x18c>)
 800429c:	613b      	str	r3, [r7, #16]
      break;
 800429e:	e0a6      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	0c9b      	lsrs	r3, r3, #18
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	4a56      	ldr	r2, [pc, #344]	; (8004404 <HAL_RCC_GetSysClockFreq+0x190>)
 80042aa:	5cd3      	ldrb	r3, [r2, r3]
 80042ac:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	0d9b      	lsrs	r3, r3, #22
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	3301      	adds	r3, #1
 80042b8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ba:	4b4f      	ldr	r3, [pc, #316]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d041      	beq.n	800434a <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	461d      	mov	r5, r3
 80042ca:	f04f 0600 	mov.w	r6, #0
 80042ce:	4629      	mov	r1, r5
 80042d0:	4632      	mov	r2, r6
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	f04f 0400 	mov.w	r4, #0
 80042da:	0154      	lsls	r4, r2, #5
 80042dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042e0:	014b      	lsls	r3, r1, #5
 80042e2:	4619      	mov	r1, r3
 80042e4:	4622      	mov	r2, r4
 80042e6:	1b49      	subs	r1, r1, r5
 80042e8:	eb62 0206 	sbc.w	r2, r2, r6
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	f04f 0400 	mov.w	r4, #0
 80042f4:	0194      	lsls	r4, r2, #6
 80042f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042fa:	018b      	lsls	r3, r1, #6
 80042fc:	1a5b      	subs	r3, r3, r1
 80042fe:	eb64 0402 	sbc.w	r4, r4, r2
 8004302:	f04f 0100 	mov.w	r1, #0
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	00e2      	lsls	r2, r4, #3
 800430c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004310:	00d9      	lsls	r1, r3, #3
 8004312:	460b      	mov	r3, r1
 8004314:	4614      	mov	r4, r2
 8004316:	195b      	adds	r3, r3, r5
 8004318:	eb44 0406 	adc.w	r4, r4, r6
 800431c:	f04f 0100 	mov.w	r1, #0
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	0262      	lsls	r2, r4, #9
 8004326:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800432a:	0259      	lsls	r1, r3, #9
 800432c:	460b      	mov	r3, r1
 800432e:	4614      	mov	r4, r2
 8004330:	4618      	mov	r0, r3
 8004332:	4621      	mov	r1, r4
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f04f 0400 	mov.w	r4, #0
 800433a:	461a      	mov	r2, r3
 800433c:	4623      	mov	r3, r4
 800433e:	f7fc fb0d 	bl	800095c <__aeabi_uldivmod>
 8004342:	4603      	mov	r3, r0
 8004344:	460c      	mov	r4, r1
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e040      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	461d      	mov	r5, r3
 800434e:	f04f 0600 	mov.w	r6, #0
 8004352:	4629      	mov	r1, r5
 8004354:	4632      	mov	r2, r6
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	f04f 0400 	mov.w	r4, #0
 800435e:	0154      	lsls	r4, r2, #5
 8004360:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004364:	014b      	lsls	r3, r1, #5
 8004366:	4619      	mov	r1, r3
 8004368:	4622      	mov	r2, r4
 800436a:	1b49      	subs	r1, r1, r5
 800436c:	eb62 0206 	sbc.w	r2, r2, r6
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	f04f 0400 	mov.w	r4, #0
 8004378:	0194      	lsls	r4, r2, #6
 800437a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800437e:	018b      	lsls	r3, r1, #6
 8004380:	1a5b      	subs	r3, r3, r1
 8004382:	eb64 0402 	sbc.w	r4, r4, r2
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	00e2      	lsls	r2, r4, #3
 8004390:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004394:	00d9      	lsls	r1, r3, #3
 8004396:	460b      	mov	r3, r1
 8004398:	4614      	mov	r4, r2
 800439a:	195b      	adds	r3, r3, r5
 800439c:	eb44 0406 	adc.w	r4, r4, r6
 80043a0:	f04f 0100 	mov.w	r1, #0
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	02a2      	lsls	r2, r4, #10
 80043aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043ae:	0299      	lsls	r1, r3, #10
 80043b0:	460b      	mov	r3, r1
 80043b2:	4614      	mov	r4, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	4621      	mov	r1, r4
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f04f 0400 	mov.w	r4, #0
 80043be:	461a      	mov	r2, r3
 80043c0:	4623      	mov	r3, r4
 80043c2:	f7fc facb 	bl	800095c <__aeabi_uldivmod>
 80043c6:	4603      	mov	r3, r0
 80043c8:	460c      	mov	r4, r1
 80043ca:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	613b      	str	r3, [r7, #16]
      break;
 80043d0:	e00d      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80043d2:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	0b5b      	lsrs	r3, r3, #13
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	3301      	adds	r3, #1
 80043e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	613b      	str	r3, [r7, #16]
      break;
 80043ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ee:	693b      	ldr	r3, [r7, #16]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f8:	40023800 	.word	0x40023800
 80043fc:	00f42400 	.word	0x00f42400
 8004400:	007a1200 	.word	0x007a1200
 8004404:	08006dc4 	.word	0x08006dc4

08004408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800440c:	4b02      	ldr	r3, [pc, #8]	; (8004418 <HAL_RCC_GetHCLKFreq+0x10>)
 800440e:	681b      	ldr	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr
 8004418:	2000000c 	.word	0x2000000c

0800441c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004420:	f7ff fff2 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004424:	4601      	mov	r1, r0
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	4a03      	ldr	r2, [pc, #12]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004432:	5cd3      	ldrb	r3, [r2, r3]
 8004434:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004438:	4618      	mov	r0, r3
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40023800 	.word	0x40023800
 8004440:	08006de0 	.word	0x08006de0

08004444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004448:	f7ff ffde 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 800444c:	4601      	mov	r1, r0
 800444e:	4b05      	ldr	r3, [pc, #20]	; (8004464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	0adb      	lsrs	r3, r3, #11
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	4a03      	ldr	r2, [pc, #12]	; (8004468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800445a:	5cd3      	ldrb	r3, [r2, r3]
 800445c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004460:	4618      	mov	r0, r3
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40023800 	.word	0x40023800
 8004468:	08006de0 	.word	0x08006de0

0800446c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004474:	2300      	movs	r3, #0
 8004476:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004478:	4b29      	ldr	r3, [pc, #164]	; (8004520 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d12c      	bne.n	80044de <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004484:	4b26      	ldr	r3, [pc, #152]	; (8004520 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004490:	4b24      	ldr	r3, [pc, #144]	; (8004524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	e016      	b.n	80044ca <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800449c:	4b20      	ldr	r3, [pc, #128]	; (8004520 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80044a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a6:	6253      	str	r3, [r2, #36]	; 0x24
 80044a8:	4b1d      	ldr	r3, [pc, #116]	; (8004520 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80044b4:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80044bc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80044be:	4b18      	ldr	r3, [pc, #96]	; (8004520 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	4a17      	ldr	r2, [pc, #92]	; (8004520 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80044c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80044d0:	d105      	bne.n	80044de <RCC_SetFlashLatencyFromMSIRange+0x72>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044d8:	d101      	bne.n	80044de <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80044da:	2301      	movs	r3, #1
 80044dc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d105      	bne.n	80044f0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80044e4:	4b10      	ldr	r3, [pc, #64]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a0f      	ldr	r2, [pc, #60]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ea:	f043 0304 	orr.w	r3, r3, #4
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f023 0201 	bic.w	r2, r3, #1
 80044f8:	490b      	ldr	r1, [pc, #44]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004500:	4b09      	ldr	r3, [pc, #36]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	429a      	cmp	r2, r3
 800450c:	d001      	beq.n	8004512 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800
 8004524:	40007000 	.word	0x40007000
 8004528:	40023c00 	.word	0x40023c00

0800452c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e031      	b.n	80045a2 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fd fbf4 	bl	8001d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3304      	adds	r3, #4
 8004568:	4619      	mov	r1, r3
 800456a:	4610      	mov	r0, r2
 800456c:	f000 fd14 	bl	8004f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e031      	b.n	8004620 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d106      	bne.n	80045d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7fd fb73 	bl	8001cbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2202      	movs	r2, #2
 80045da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4619      	mov	r1, r3
 80045e8:	4610      	mov	r0, r2
 80045ea:	f000 fcd5 	bl	8004f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <HAL_TIM_PWM_Start+0x24>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e022      	b.n	8004692 <HAL_TIM_PWM_Start+0x6a>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b04      	cmp	r3, #4
 8004650:	d109      	bne.n	8004666 <HAL_TIM_PWM_Start+0x3e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	bf14      	ite	ne
 800465e:	2301      	movne	r3, #1
 8004660:	2300      	moveq	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	e015      	b.n	8004692 <HAL_TIM_PWM_Start+0x6a>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d109      	bne.n	8004680 <HAL_TIM_PWM_Start+0x58>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	e008      	b.n	8004692 <HAL_TIM_PWM_Start+0x6a>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	bf14      	ite	ne
 800468c:	2301      	movne	r3, #1
 800468e:	2300      	moveq	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e051      	b.n	800473e <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d104      	bne.n	80046aa <HAL_TIM_PWM_Start+0x82>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80046a8:	e013      	b.n	80046d2 <HAL_TIM_PWM_Start+0xaa>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d104      	bne.n	80046ba <HAL_TIM_PWM_Start+0x92>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80046b8:	e00b      	b.n	80046d2 <HAL_TIM_PWM_Start+0xaa>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d104      	bne.n	80046ca <HAL_TIM_PWM_Start+0xa2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80046c8:	e003      	b.n	80046d2 <HAL_TIM_PWM_Start+0xaa>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2201      	movs	r2, #1
 80046d8:	6839      	ldr	r1, [r7, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 ff6b 	bl	80055b6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e8:	d00e      	beq.n	8004708 <HAL_TIM_PWM_Start+0xe0>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a16      	ldr	r2, [pc, #88]	; (8004748 <HAL_TIM_PWM_Start+0x120>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d009      	beq.n	8004708 <HAL_TIM_PWM_Start+0xe0>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a14      	ldr	r2, [pc, #80]	; (800474c <HAL_TIM_PWM_Start+0x124>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <HAL_TIM_PWM_Start+0xe0>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a13      	ldr	r2, [pc, #76]	; (8004750 <HAL_TIM_PWM_Start+0x128>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d111      	bne.n	800472c <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b06      	cmp	r3, #6
 8004718:	d010      	beq.n	800473c <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0201 	orr.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800472a:	e007      	b.n	800473c <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40010800 	.word	0x40010800

08004754 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2200      	movs	r2, #0
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 ff25 	bl	80055b6 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6a1a      	ldr	r2, [r3, #32]
 8004772:	f241 1311 	movw	r3, #4369	; 0x1111
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d107      	bne.n	800478c <HAL_TIM_PWM_Stop+0x38>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0201 	bic.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d104      	bne.n	800479c <HAL_TIM_PWM_Stop+0x48>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800479a:	e013      	b.n	80047c4 <HAL_TIM_PWM_Stop+0x70>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d104      	bne.n	80047ac <HAL_TIM_PWM_Stop+0x58>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80047aa:	e00b      	b.n	80047c4 <HAL_TIM_PWM_Stop+0x70>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d104      	bne.n	80047bc <HAL_TIM_PWM_Stop+0x68>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047ba:	e003      	b.n	80047c4 <HAL_TIM_PWM_Stop+0x70>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e031      	b.n	8004844 <HAL_TIM_IC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d106      	bne.n	80047fa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f829 	bl	800484c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2202      	movs	r2, #2
 80047fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3304      	adds	r3, #4
 800480a:	4619      	mov	r1, r3
 800480c:	4610      	mov	r0, r2
 800480e:	f000 fbc3 	bl	8004f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr
	...

08004860 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d104      	bne.n	800487a <HAL_TIM_IC_Start_IT+0x1a>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004876:	b2db      	uxtb	r3, r3
 8004878:	e013      	b.n	80048a2 <HAL_TIM_IC_Start_IT+0x42>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b04      	cmp	r3, #4
 800487e:	d104      	bne.n	800488a <HAL_TIM_IC_Start_IT+0x2a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004886:	b2db      	uxtb	r3, r3
 8004888:	e00b      	b.n	80048a2 <HAL_TIM_IC_Start_IT+0x42>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b08      	cmp	r3, #8
 800488e:	d104      	bne.n	800489a <HAL_TIM_IC_Start_IT+0x3a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004896:	b2db      	uxtb	r3, r3
 8004898:	e003      	b.n	80048a2 <HAL_TIM_IC_Start_IT+0x42>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d001      	beq.n	80048ae <HAL_TIM_IC_Start_IT+0x4e>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e097      	b.n	80049de <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d104      	bne.n	80048be <HAL_TIM_IC_Start_IT+0x5e>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80048bc:	e013      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x86>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_IC_Start_IT+0x6e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80048cc:	e00b      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x86>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d104      	bne.n	80048de <HAL_TIM_IC_Start_IT+0x7e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80048dc:	e003      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x86>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d841      	bhi.n	8004970 <HAL_TIM_IC_Start_IT+0x110>
 80048ec:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <HAL_TIM_IC_Start_IT+0x94>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004929 	.word	0x08004929
 80048f8:	08004971 	.word	0x08004971
 80048fc:	08004971 	.word	0x08004971
 8004900:	08004971 	.word	0x08004971
 8004904:	0800493b 	.word	0x0800493b
 8004908:	08004971 	.word	0x08004971
 800490c:	08004971 	.word	0x08004971
 8004910:	08004971 	.word	0x08004971
 8004914:	0800494d 	.word	0x0800494d
 8004918:	08004971 	.word	0x08004971
 800491c:	08004971 	.word	0x08004971
 8004920:	08004971 	.word	0x08004971
 8004924:	0800495f 	.word	0x0800495f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0202 	orr.w	r2, r2, #2
 8004936:	60da      	str	r2, [r3, #12]
      break;
 8004938:	e01b      	b.n	8004972 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0204 	orr.w	r2, r2, #4
 8004948:	60da      	str	r2, [r3, #12]
      break;
 800494a:	e012      	b.n	8004972 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0208 	orr.w	r2, r2, #8
 800495a:	60da      	str	r2, [r3, #12]
      break;
 800495c:	e009      	b.n	8004972 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f042 0210 	orr.w	r2, r2, #16
 800496c:	60da      	str	r2, [r3, #12]
      break;
 800496e:	e000      	b.n	8004972 <HAL_TIM_IC_Start_IT+0x112>
    }

    default:
      break;
 8004970:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2201      	movs	r2, #1
 8004978:	6839      	ldr	r1, [r7, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fe1b 	bl	80055b6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004988:	d00e      	beq.n	80049a8 <HAL_TIM_IC_Start_IT+0x148>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a16      	ldr	r2, [pc, #88]	; (80049e8 <HAL_TIM_IC_Start_IT+0x188>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d009      	beq.n	80049a8 <HAL_TIM_IC_Start_IT+0x148>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a14      	ldr	r2, [pc, #80]	; (80049ec <HAL_TIM_IC_Start_IT+0x18c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_TIM_IC_Start_IT+0x148>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a13      	ldr	r2, [pc, #76]	; (80049f0 <HAL_TIM_IC_Start_IT+0x190>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d111      	bne.n	80049cc <HAL_TIM_IC_Start_IT+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b06      	cmp	r3, #6
 80049b8:	d010      	beq.n	80049dc <HAL_TIM_IC_Start_IT+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0201 	orr.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ca:	e007      	b.n	80049dc <HAL_TIM_IC_Start_IT+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800
 80049f0:	40010800 	.word	0x40010800

080049f4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	d841      	bhi.n	8004a88 <HAL_TIM_IC_Stop_IT+0x94>
 8004a04:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <HAL_TIM_IC_Stop_IT+0x18>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004a41 	.word	0x08004a41
 8004a10:	08004a89 	.word	0x08004a89
 8004a14:	08004a89 	.word	0x08004a89
 8004a18:	08004a89 	.word	0x08004a89
 8004a1c:	08004a53 	.word	0x08004a53
 8004a20:	08004a89 	.word	0x08004a89
 8004a24:	08004a89 	.word	0x08004a89
 8004a28:	08004a89 	.word	0x08004a89
 8004a2c:	08004a65 	.word	0x08004a65
 8004a30:	08004a89 	.word	0x08004a89
 8004a34:	08004a89 	.word	0x08004a89
 8004a38:	08004a89 	.word	0x08004a89
 8004a3c:	08004a77 	.word	0x08004a77
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0202 	bic.w	r2, r2, #2
 8004a4e:	60da      	str	r2, [r3, #12]
      break;
 8004a50:	e01b      	b.n	8004a8a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0204 	bic.w	r2, r2, #4
 8004a60:	60da      	str	r2, [r3, #12]
      break;
 8004a62:	e012      	b.n	8004a8a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0208 	bic.w	r2, r2, #8
 8004a72:	60da      	str	r2, [r3, #12]
      break;
 8004a74:	e009      	b.n	8004a8a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0210 	bic.w	r2, r2, #16
 8004a84:	60da      	str	r2, [r3, #12]
      break;
 8004a86:	e000      	b.n	8004a8a <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8004a88:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	6839      	ldr	r1, [r7, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fd8f 	bl	80055b6 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6a1a      	ldr	r2, [r3, #32]
 8004a9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d107      	bne.n	8004ab8 <HAL_TIM_IC_Stop_IT+0xc4>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0201 	bic.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d104      	bne.n	8004ac8 <HAL_TIM_IC_Stop_IT+0xd4>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004ac6:	e013      	b.n	8004af0 <HAL_TIM_IC_Stop_IT+0xfc>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d104      	bne.n	8004ad8 <HAL_TIM_IC_Stop_IT+0xe4>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004ad6:	e00b      	b.n	8004af0 <HAL_TIM_IC_Stop_IT+0xfc>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d104      	bne.n	8004ae8 <HAL_TIM_IC_Stop_IT+0xf4>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ae6:	e003      	b.n	8004af0 <HAL_TIM_IC_Stop_IT+0xfc>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop

08004afc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e082      	b.n	8004c1c <HAL_TIM_IC_ConfigChannel+0x120>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (Channel == TIM_CHANNEL_1)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d11b      	bne.n	8004b5c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	6819      	ldr	r1, [r3, #0]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f000 fb96 	bl	8005264 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 020c 	bic.w	r2, r2, #12
 8004b46:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6999      	ldr	r1, [r3, #24]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	619a      	str	r2, [r3, #24]
 8004b5a:	e05a      	b.n	8004c12 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d11c      	bne.n	8004b9c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6818      	ldr	r0, [r3, #0]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	6819      	ldr	r1, [r3, #0]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f000 fc05 	bl	8005380 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699a      	ldr	r2, [r3, #24]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b84:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6999      	ldr	r1, [r3, #24]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	021a      	lsls	r2, r3, #8
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	619a      	str	r2, [r3, #24]
 8004b9a:	e03a      	b.n	8004c12 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d11b      	bne.n	8004bda <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	6819      	ldr	r1, [r3, #0]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f000 fc50 	bl	8005456 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 020c 	bic.w	r2, r2, #12
 8004bc4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69d9      	ldr	r1, [r3, #28]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	61da      	str	r2, [r3, #28]
 8004bd8:	e01b      	b.n	8004c12 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	6819      	ldr	r1, [r3, #0]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f000 fc6f 	bl	80054cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004bfc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69d9      	ldr	r1, [r3, #28]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	021a      	lsls	r2, r3, #8
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e0ac      	b.n	8004d98 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b0c      	cmp	r3, #12
 8004c4a:	f200 809f 	bhi.w	8004d8c <HAL_TIM_PWM_ConfigChannel+0x168>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c89 	.word	0x08004c89
 8004c58:	08004d8d 	.word	0x08004d8d
 8004c5c:	08004d8d 	.word	0x08004d8d
 8004c60:	08004d8d 	.word	0x08004d8d
 8004c64:	08004cc9 	.word	0x08004cc9
 8004c68:	08004d8d 	.word	0x08004d8d
 8004c6c:	08004d8d 	.word	0x08004d8d
 8004c70:	08004d8d 	.word	0x08004d8d
 8004c74:	08004d0b 	.word	0x08004d0b
 8004c78:	08004d8d 	.word	0x08004d8d
 8004c7c:	08004d8d 	.word	0x08004d8d
 8004c80:	08004d8d 	.word	0x08004d8d
 8004c84:	08004d4b 	.word	0x08004d4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 f9f2 	bl	8005078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0208 	orr.w	r2, r2, #8
 8004ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699a      	ldr	r2, [r3, #24]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0204 	bic.w	r2, r2, #4
 8004cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6999      	ldr	r1, [r3, #24]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	619a      	str	r2, [r3, #24]
      break;
 8004cc6:	e062      	b.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fa0e 	bl	80050f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6999      	ldr	r1, [r3, #24]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	021a      	lsls	r2, r3, #8
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	619a      	str	r2, [r3, #24]
      break;
 8004d08:	e041      	b.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68b9      	ldr	r1, [r7, #8]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fa2b 	bl	800516c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0208 	orr.w	r2, r2, #8
 8004d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0204 	bic.w	r2, r2, #4
 8004d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69d9      	ldr	r1, [r3, #28]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	61da      	str	r2, [r3, #28]
      break;
 8004d48:	e021      	b.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fa48 	bl	80051e6 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69da      	ldr	r2, [r3, #28]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69d9      	ldr	r1, [r3, #28]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	021a      	lsls	r2, r3, #8
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	61da      	str	r2, [r3, #28]
      break;
 8004d8a:	e000      	b.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004d8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_TIM_ConfigClockSource+0x18>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e0a6      	b.n	8004f06 <HAL_TIM_ConfigClockSource+0x166>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d067      	beq.n	8004ec0 <HAL_TIM_ConfigClockSource+0x120>
 8004df0:	2b40      	cmp	r3, #64	; 0x40
 8004df2:	d80b      	bhi.n	8004e0c <HAL_TIM_ConfigClockSource+0x6c>
 8004df4:	2b10      	cmp	r3, #16
 8004df6:	d073      	beq.n	8004ee0 <HAL_TIM_ConfigClockSource+0x140>
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d802      	bhi.n	8004e02 <HAL_TIM_ConfigClockSource+0x62>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d06f      	beq.n	8004ee0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e00:	e078      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d06c      	beq.n	8004ee0 <HAL_TIM_ConfigClockSource+0x140>
 8004e06:	2b30      	cmp	r3, #48	; 0x30
 8004e08:	d06a      	beq.n	8004ee0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004e0a:	e073      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e0c:	2b70      	cmp	r3, #112	; 0x70
 8004e0e:	d00d      	beq.n	8004e2c <HAL_TIM_ConfigClockSource+0x8c>
 8004e10:	2b70      	cmp	r3, #112	; 0x70
 8004e12:	d804      	bhi.n	8004e1e <HAL_TIM_ConfigClockSource+0x7e>
 8004e14:	2b50      	cmp	r3, #80	; 0x50
 8004e16:	d033      	beq.n	8004e80 <HAL_TIM_ConfigClockSource+0xe0>
 8004e18:	2b60      	cmp	r3, #96	; 0x60
 8004e1a:	d041      	beq.n	8004ea0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004e1c:	e06a      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e22:	d066      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x152>
 8004e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e28:	d017      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e2a:	e063      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6818      	ldr	r0, [r3, #0]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	6899      	ldr	r1, [r3, #8]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f000 fb9c 	bl	8005578 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	609a      	str	r2, [r3, #8]
      break;
 8004e58:	e04c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6899      	ldr	r1, [r3, #8]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f000 fb85 	bl	8005578 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e7c:	609a      	str	r2, [r3, #8]
      break;
 8004e7e:	e039      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	6859      	ldr	r1, [r3, #4]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f000 fa49 	bl	8005324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2150      	movs	r1, #80	; 0x50
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fb53 	bl	8005544 <TIM_ITRx_SetConfig>
      break;
 8004e9e:	e029      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6818      	ldr	r0, [r3, #0]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	6859      	ldr	r1, [r3, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	461a      	mov	r2, r3
 8004eae:	f000 faa3 	bl	80053f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2160      	movs	r1, #96	; 0x60
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fb43 	bl	8005544 <TIM_ITRx_SetConfig>
      break;
 8004ebe:	e019      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	6859      	ldr	r1, [r3, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	f000 fa29 	bl	8005324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2140      	movs	r1, #64	; 0x40
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fb33 	bl	8005544 <TIM_ITRx_SetConfig>
      break;
 8004ede:	e009      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f000 fb2a 	bl	8005544 <TIM_ITRx_SetConfig>
        break;
 8004ef0:	e000      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b0c      	cmp	r3, #12
 8004f22:	d831      	bhi.n	8004f88 <HAL_TIM_ReadCapturedValue+0x78>
 8004f24:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2a:	bf00      	nop
 8004f2c:	08004f61 	.word	0x08004f61
 8004f30:	08004f89 	.word	0x08004f89
 8004f34:	08004f89 	.word	0x08004f89
 8004f38:	08004f89 	.word	0x08004f89
 8004f3c:	08004f6b 	.word	0x08004f6b
 8004f40:	08004f89 	.word	0x08004f89
 8004f44:	08004f89 	.word	0x08004f89
 8004f48:	08004f89 	.word	0x08004f89
 8004f4c:	08004f75 	.word	0x08004f75
 8004f50:	08004f89 	.word	0x08004f89
 8004f54:	08004f89 	.word	0x08004f89
 8004f58:	08004f89 	.word	0x08004f89
 8004f5c:	08004f7f 	.word	0x08004f7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f66:	60fb      	str	r3, [r7, #12]

      break;
 8004f68:	e00f      	b.n	8004f8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	60fb      	str	r3, [r7, #12]

      break;
 8004f72:	e00a      	b.n	8004f8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7a:	60fb      	str	r3, [r7, #12]

      break;
 8004f7c:	e005      	b.n	8004f8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	60fb      	str	r3, [r7, #12]

      break;
 8004f86:	e000      	b.n	8004f8a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004f88:	bf00      	nop
  }

  return tmpreg;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop

08004f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fae:	d00f      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a2b      	ldr	r2, [pc, #172]	; (8005060 <TIM_Base_SetConfig+0xc8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d00b      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a2a      	ldr	r2, [pc, #168]	; (8005064 <TIM_Base_SetConfig+0xcc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d007      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a29      	ldr	r2, [pc, #164]	; (8005068 <TIM_Base_SetConfig+0xd0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d003      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a28      	ldr	r2, [pc, #160]	; (800506c <TIM_Base_SetConfig+0xd4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d108      	bne.n	8004fe2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe8:	d017      	beq.n	800501a <TIM_Base_SetConfig+0x82>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a1c      	ldr	r2, [pc, #112]	; (8005060 <TIM_Base_SetConfig+0xc8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <TIM_Base_SetConfig+0x82>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a1b      	ldr	r2, [pc, #108]	; (8005064 <TIM_Base_SetConfig+0xcc>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00f      	beq.n	800501a <TIM_Base_SetConfig+0x82>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a1a      	ldr	r2, [pc, #104]	; (8005068 <TIM_Base_SetConfig+0xd0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00b      	beq.n	800501a <TIM_Base_SetConfig+0x82>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a19      	ldr	r2, [pc, #100]	; (800506c <TIM_Base_SetConfig+0xd4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d007      	beq.n	800501a <TIM_Base_SetConfig+0x82>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a18      	ldr	r2, [pc, #96]	; (8005070 <TIM_Base_SetConfig+0xd8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_Base_SetConfig+0x82>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a17      	ldr	r2, [pc, #92]	; (8005074 <TIM_Base_SetConfig+0xdc>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d108      	bne.n	800502c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	615a      	str	r2, [r3, #20]
}
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr
 8005060:	40000400 	.word	0x40000400
 8005064:	40000800 	.word	0x40000800
 8005068:	40000c00 	.word	0x40000c00
 800506c:	40010800 	.word	0x40010800
 8005070:	40010c00 	.word	0x40010c00
 8005074:	40011000 	.word	0x40011000

08005078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f023 0201 	bic.w	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f023 0302 	bic.w	r3, r3, #2
 80050c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr

080050f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f023 0210 	bic.w	r2, r3, #16
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f023 0320 	bic.w	r3, r3, #32
 800513a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr

0800516c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0303 	bic.w	r3, r3, #3
 80051a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	621a      	str	r2, [r3, #32]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bc80      	pop	{r7}
 80051e4:	4770      	bx	lr

080051e6 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b087      	sub	sp, #28
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005214:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	031b      	lsls	r3, r3, #12
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	621a      	str	r2, [r3, #32]
}
 8005258:	bf00      	nop
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr
	...

08005264 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f023 0201 	bic.w	r2, r3, #1
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005290:	d00f      	beq.n	80052b2 <TIM_TI1_SetConfig+0x4e>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4a1f      	ldr	r2, [pc, #124]	; (8005314 <TIM_TI1_SetConfig+0xb0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00b      	beq.n	80052b2 <TIM_TI1_SetConfig+0x4e>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <TIM_TI1_SetConfig+0xb4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d007      	beq.n	80052b2 <TIM_TI1_SetConfig+0x4e>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4a1d      	ldr	r2, [pc, #116]	; (800531c <TIM_TI1_SetConfig+0xb8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <TIM_TI1_SetConfig+0x4e>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4a1c      	ldr	r2, [pc, #112]	; (8005320 <TIM_TI1_SetConfig+0xbc>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d101      	bne.n	80052b6 <TIM_TI1_SetConfig+0x52>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <TIM_TI1_SetConfig+0x54>
 80052b6:	2300      	movs	r3, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0303 	bic.w	r3, r3, #3
 80052c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	e003      	b.n	80052d6 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f043 0301 	orr.w	r3, r3, #1
 80052d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f023 030a 	bic.w	r3, r3, #10
 80052f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f003 030a 	and.w	r3, r3, #10
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr
 8005314:	40000400 	.word	0x40000400
 8005318:	40000800 	.word	0x40000800
 800531c:	40000c00 	.word	0x40000c00
 8005320:	40010800 	.word	0x40010800

08005324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f023 0201 	bic.w	r2, r3, #1
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800534e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f023 030a 	bic.w	r3, r3, #10
 8005360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	621a      	str	r2, [r3, #32]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f023 0210 	bic.w	r2, r3, #16
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	031b      	lsls	r3, r3, #12
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr

080053f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	f023 0210 	bic.w	r2, r3, #16
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005422:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	031b      	lsls	r3, r3, #12
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005434:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	621a      	str	r2, [r3, #32]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr

08005456 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005456:	b480      	push	{r7}
 8005458:	b087      	sub	sp, #28
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	607a      	str	r2, [r7, #4]
 8005462:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f023 0303 	bic.w	r3, r3, #3
 8005482:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005492:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	b2db      	uxtb	r3, r3
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80054a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	021b      	lsls	r3, r3, #8
 80054ac:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	621a      	str	r2, [r3, #32]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800550a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	031b      	lsls	r3, r3, #12
 8005510:	b29b      	uxth	r3, r3
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800551e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	031b      	lsls	r3, r3, #12
 8005524:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr

08005544 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4313      	orrs	r3, r2
 8005562:	f043 0307 	orr.w	r3, r3, #7
 8005566:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	609a      	str	r2, [r3, #8]
}
 800556e:	bf00      	nop
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr

08005578 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005592:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	021a      	lsls	r2, r3, #8
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	431a      	orrs	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4313      	orrs	r3, r2
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	609a      	str	r2, [r3, #8]
}
 80055ac:	bf00      	nop
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr

080055b6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b087      	sub	sp, #28
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f003 031f 	and.w	r3, r3, #31
 80055c8:	2201      	movs	r2, #1
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1a      	ldr	r2, [r3, #32]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	43db      	mvns	r3, r3
 80055d8:	401a      	ands	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a1a      	ldr	r2, [r3, #32]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f003 031f 	and.w	r3, r3, #31
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	431a      	orrs	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	621a      	str	r2, [r3, #32]
}
 80055f4:	bf00      	nop
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bc80      	pop	{r7}
 80055fc:	4770      	bx	lr
	...

08005600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005614:	2302      	movs	r3, #2
 8005616:	e046      	b.n	80056a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565a:	d00e      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a13      	ldr	r2, [pc, #76]	; (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d009      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a12      	ldr	r2, [pc, #72]	; (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d004      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a10      	ldr	r2, [pc, #64]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d10c      	bne.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	4313      	orrs	r3, r2
 800568a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr
 80056b0:	40000400 	.word	0x40000400
 80056b4:	40000800 	.word	0x40000800
 80056b8:	40010800 	.word	0x40010800

080056bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e03f      	b.n	800574e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fc fbd8 	bl	8001e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2224      	movs	r2, #36	; 0x24
 80056ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f9b1 	bl	8005a68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005714:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695a      	ldr	r2, [r3, #20]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005724:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005734:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2220      	movs	r2, #32
 8005740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b088      	sub	sp, #32
 800575a:	af02      	add	r7, sp, #8
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	4613      	mov	r3, r2
 8005764:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b20      	cmp	r3, #32
 8005774:	f040 8083 	bne.w	800587e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_UART_Transmit+0x2e>
 800577e:	88fb      	ldrh	r3, [r7, #6]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e07b      	b.n	8005880 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_UART_Transmit+0x40>
 8005792:	2302      	movs	r3, #2
 8005794:	e074      	b.n	8005880 <HAL_UART_Transmit+0x12a>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2221      	movs	r2, #33	; 0x21
 80057a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80057ac:	f7fc fd64 	bl	8002278 <HAL_GetTick>
 80057b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	88fa      	ldrh	r2, [r7, #6]
 80057b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80057c6:	e042      	b.n	800584e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057de:	d122      	bne.n	8005826 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2200      	movs	r2, #0
 80057e8:	2180      	movs	r1, #128	; 0x80
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 f8f2 	bl	80059d4 <UART_WaitOnFlagUntilTimeout>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e042      	b.n	8005880 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800580c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d103      	bne.n	800581e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	3302      	adds	r3, #2
 800581a:	60bb      	str	r3, [r7, #8]
 800581c:	e017      	b.n	800584e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	3301      	adds	r3, #1
 8005822:	60bb      	str	r3, [r7, #8]
 8005824:	e013      	b.n	800584e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2200      	movs	r2, #0
 800582e:	2180      	movs	r1, #128	; 0x80
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 f8cf 	bl	80059d4 <UART_WaitOnFlagUntilTimeout>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e01f      	b.n	8005880 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	60ba      	str	r2, [r7, #8]
 8005846:	781a      	ldrb	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1b7      	bne.n	80057c8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2200      	movs	r2, #0
 8005860:	2140      	movs	r1, #64	; 0x40
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f8b6 	bl	80059d4 <UART_WaitOnFlagUntilTimeout>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e006      	b.n	8005880 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	e000      	b.n	8005880 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800587e:	2302      	movs	r3, #2
  }
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b088      	sub	sp, #32
 800588c:	af02      	add	r7, sp, #8
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	4613      	mov	r3, r2
 8005896:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	f040 8090 	bne.w	80059ca <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <HAL_UART_Receive+0x2e>
 80058b0:	88fb      	ldrh	r3, [r7, #6]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e088      	b.n	80059cc <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_UART_Receive+0x40>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e081      	b.n	80059cc <HAL_UART_Receive+0x144>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2222      	movs	r2, #34	; 0x22
 80058da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80058de:	f7fc fccb 	bl	8002278 <HAL_GetTick>
 80058e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	88fa      	ldrh	r2, [r7, #6]
 80058e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	88fa      	ldrh	r2, [r7, #6]
 80058ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80058f8:	e05c      	b.n	80059b4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005910:	d12b      	bne.n	800596a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2200      	movs	r2, #0
 800591a:	2120      	movs	r1, #32
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f859 	bl	80059d4 <UART_WaitOnFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e04f      	b.n	80059cc <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10c      	bne.n	8005952 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	b29b      	uxth	r3, r3
 8005940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005944:	b29a      	uxth	r2, r3
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	3302      	adds	r3, #2
 800594e:	60bb      	str	r3, [r7, #8]
 8005950:	e030      	b.n	80059b4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	b29b      	uxth	r3, r3
 800595a:	b2db      	uxtb	r3, r3
 800595c:	b29a      	uxth	r2, r3
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	3301      	adds	r3, #1
 8005966:	60bb      	str	r3, [r7, #8]
 8005968:	e024      	b.n	80059b4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2200      	movs	r2, #0
 8005972:	2120      	movs	r1, #32
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f82d 	bl	80059d4 <UART_WaitOnFlagUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e023      	b.n	80059cc <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d108      	bne.n	800599e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6859      	ldr	r1, [r3, #4]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	60ba      	str	r2, [r7, #8]
 8005998:	b2ca      	uxtb	r2, r1
 800599a:	701a      	strb	r2, [r3, #0]
 800599c:	e00a      	b.n	80059b4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	1c59      	adds	r1, r3, #1
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d19d      	bne.n	80058fa <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e000      	b.n	80059cc <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80059ca:	2302      	movs	r3, #2
  }
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	4613      	mov	r3, r2
 80059e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e4:	e02c      	b.n	8005a40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d028      	beq.n	8005a40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x30>
 80059f4:	f7fc fc40 	bl	8002278 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d21d      	bcs.n	8005a40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695a      	ldr	r2, [r3, #20]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0201 	bic.w	r2, r2, #1
 8005a22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e00f      	b.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d0c3      	beq.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005aa8:	f023 030c 	bic.w	r3, r3, #12
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6812      	ldr	r2, [r2, #0]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	699a      	ldr	r2, [r3, #24]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a55      	ldr	r2, [pc, #340]	; (8005c28 <UART_SetConfig+0x1c0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d103      	bne.n	8005ade <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ad6:	f7fe fcb5 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	e002      	b.n	8005ae4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ade:	f7fe fc9d 	bl	800441c <HAL_RCC_GetPCLK1Freq>
 8005ae2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aec:	d14c      	bne.n	8005b88 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	009a      	lsls	r2, r3, #2
 8005af8:	441a      	add	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b04:	4a49      	ldr	r2, [pc, #292]	; (8005c2c <UART_SetConfig+0x1c4>)
 8005b06:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	0119      	lsls	r1, r3, #4
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	009a      	lsls	r2, r3, #2
 8005b18:	441a      	add	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b24:	4b41      	ldr	r3, [pc, #260]	; (8005c2c <UART_SetConfig+0x1c4>)
 8005b26:	fba3 0302 	umull	r0, r3, r3, r2
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	2064      	movs	r0, #100	; 0x64
 8005b2e:	fb00 f303 	mul.w	r3, r0, r3
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	3332      	adds	r3, #50	; 0x32
 8005b38:	4a3c      	ldr	r2, [pc, #240]	; (8005c2c <UART_SetConfig+0x1c4>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b46:	4419      	add	r1, r3
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009a      	lsls	r2, r3, #2
 8005b52:	441a      	add	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b5e:	4b33      	ldr	r3, [pc, #204]	; (8005c2c <UART_SetConfig+0x1c4>)
 8005b60:	fba3 0302 	umull	r0, r3, r3, r2
 8005b64:	095b      	lsrs	r3, r3, #5
 8005b66:	2064      	movs	r0, #100	; 0x64
 8005b68:	fb00 f303 	mul.w	r3, r0, r3
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	3332      	adds	r3, #50	; 0x32
 8005b72:	4a2e      	ldr	r2, [pc, #184]	; (8005c2c <UART_SetConfig+0x1c4>)
 8005b74:	fba2 2303 	umull	r2, r3, r2, r3
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	f003 0207 	and.w	r2, r3, #7
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	440a      	add	r2, r1
 8005b84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b86:	e04a      	b.n	8005c1e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	009a      	lsls	r2, r3, #2
 8005b92:	441a      	add	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	4a23      	ldr	r2, [pc, #140]	; (8005c2c <UART_SetConfig+0x1c4>)
 8005ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	0119      	lsls	r1, r3, #4
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009a      	lsls	r2, r3, #2
 8005bb2:	441a      	add	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bbe:	4b1b      	ldr	r3, [pc, #108]	; (8005c2c <UART_SetConfig+0x1c4>)
 8005bc0:	fba3 0302 	umull	r0, r3, r3, r2
 8005bc4:	095b      	lsrs	r3, r3, #5
 8005bc6:	2064      	movs	r0, #100	; 0x64
 8005bc8:	fb00 f303 	mul.w	r3, r0, r3
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	3332      	adds	r3, #50	; 0x32
 8005bd2:	4a16      	ldr	r2, [pc, #88]	; (8005c2c <UART_SetConfig+0x1c4>)
 8005bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bde:	4419      	add	r1, r3
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	009a      	lsls	r2, r3, #2
 8005bea:	441a      	add	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <UART_SetConfig+0x1c4>)
 8005bf8:	fba3 0302 	umull	r0, r3, r3, r2
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	2064      	movs	r0, #100	; 0x64
 8005c00:	fb00 f303 	mul.w	r3, r0, r3
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	3332      	adds	r3, #50	; 0x32
 8005c0a:	4a08      	ldr	r2, [pc, #32]	; (8005c2c <UART_SetConfig+0x1c4>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	f003 020f 	and.w	r2, r3, #15
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	609a      	str	r2, [r3, #8]
}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40013800 	.word	0x40013800
 8005c2c:	51eb851f 	.word	0x51eb851f

08005c30 <__errno>:
 8005c30:	4b01      	ldr	r3, [pc, #4]	; (8005c38 <__errno+0x8>)
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	20000018 	.word	0x20000018

08005c3c <__libc_init_array>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	2500      	movs	r5, #0
 8005c40:	4e0c      	ldr	r6, [pc, #48]	; (8005c74 <__libc_init_array+0x38>)
 8005c42:	4c0d      	ldr	r4, [pc, #52]	; (8005c78 <__libc_init_array+0x3c>)
 8005c44:	1ba4      	subs	r4, r4, r6
 8005c46:	10a4      	asrs	r4, r4, #2
 8005c48:	42a5      	cmp	r5, r4
 8005c4a:	d109      	bne.n	8005c60 <__libc_init_array+0x24>
 8005c4c:	f000 ff80 	bl	8006b50 <_init>
 8005c50:	2500      	movs	r5, #0
 8005c52:	4e0a      	ldr	r6, [pc, #40]	; (8005c7c <__libc_init_array+0x40>)
 8005c54:	4c0a      	ldr	r4, [pc, #40]	; (8005c80 <__libc_init_array+0x44>)
 8005c56:	1ba4      	subs	r4, r4, r6
 8005c58:	10a4      	asrs	r4, r4, #2
 8005c5a:	42a5      	cmp	r5, r4
 8005c5c:	d105      	bne.n	8005c6a <__libc_init_array+0x2e>
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}
 8005c60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c64:	4798      	blx	r3
 8005c66:	3501      	adds	r5, #1
 8005c68:	e7ee      	b.n	8005c48 <__libc_init_array+0xc>
 8005c6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c6e:	4798      	blx	r3
 8005c70:	3501      	adds	r5, #1
 8005c72:	e7f2      	b.n	8005c5a <__libc_init_array+0x1e>
 8005c74:	08006e88 	.word	0x08006e88
 8005c78:	08006e88 	.word	0x08006e88
 8005c7c:	08006e88 	.word	0x08006e88
 8005c80:	08006e8c 	.word	0x08006e8c

08005c84 <memcpy>:
 8005c84:	b510      	push	{r4, lr}
 8005c86:	1e43      	subs	r3, r0, #1
 8005c88:	440a      	add	r2, r1
 8005c8a:	4291      	cmp	r1, r2
 8005c8c:	d100      	bne.n	8005c90 <memcpy+0xc>
 8005c8e:	bd10      	pop	{r4, pc}
 8005c90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c98:	e7f7      	b.n	8005c8a <memcpy+0x6>

08005c9a <memset>:
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	4402      	add	r2, r0
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d100      	bne.n	8005ca4 <memset+0xa>
 8005ca2:	4770      	bx	lr
 8005ca4:	f803 1b01 	strb.w	r1, [r3], #1
 8005ca8:	e7f9      	b.n	8005c9e <memset+0x4>
	...

08005cac <iprintf>:
 8005cac:	b40f      	push	{r0, r1, r2, r3}
 8005cae:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <iprintf+0x2c>)
 8005cb0:	b513      	push	{r0, r1, r4, lr}
 8005cb2:	681c      	ldr	r4, [r3, #0]
 8005cb4:	b124      	cbz	r4, 8005cc0 <iprintf+0x14>
 8005cb6:	69a3      	ldr	r3, [r4, #24]
 8005cb8:	b913      	cbnz	r3, 8005cc0 <iprintf+0x14>
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 fa22 	bl	8006104 <__sinit>
 8005cc0:	ab05      	add	r3, sp, #20
 8005cc2:	9a04      	ldr	r2, [sp, #16]
 8005cc4:	68a1      	ldr	r1, [r4, #8]
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	f000 fbd7 	bl	800647c <_vfiprintf_r>
 8005cce:	b002      	add	sp, #8
 8005cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cd4:	b004      	add	sp, #16
 8005cd6:	4770      	bx	lr
 8005cd8:	20000018 	.word	0x20000018

08005cdc <_puts_r>:
 8005cdc:	b570      	push	{r4, r5, r6, lr}
 8005cde:	460e      	mov	r6, r1
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	b118      	cbz	r0, 8005cec <_puts_r+0x10>
 8005ce4:	6983      	ldr	r3, [r0, #24]
 8005ce6:	b90b      	cbnz	r3, 8005cec <_puts_r+0x10>
 8005ce8:	f000 fa0c 	bl	8006104 <__sinit>
 8005cec:	69ab      	ldr	r3, [r5, #24]
 8005cee:	68ac      	ldr	r4, [r5, #8]
 8005cf0:	b913      	cbnz	r3, 8005cf8 <_puts_r+0x1c>
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f000 fa06 	bl	8006104 <__sinit>
 8005cf8:	4b23      	ldr	r3, [pc, #140]	; (8005d88 <_puts_r+0xac>)
 8005cfa:	429c      	cmp	r4, r3
 8005cfc:	d117      	bne.n	8005d2e <_puts_r+0x52>
 8005cfe:	686c      	ldr	r4, [r5, #4]
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	071b      	lsls	r3, r3, #28
 8005d04:	d51d      	bpl.n	8005d42 <_puts_r+0x66>
 8005d06:	6923      	ldr	r3, [r4, #16]
 8005d08:	b1db      	cbz	r3, 8005d42 <_puts_r+0x66>
 8005d0a:	3e01      	subs	r6, #1
 8005d0c:	68a3      	ldr	r3, [r4, #8]
 8005d0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d12:	3b01      	subs	r3, #1
 8005d14:	60a3      	str	r3, [r4, #8]
 8005d16:	b9e9      	cbnz	r1, 8005d54 <_puts_r+0x78>
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	da2e      	bge.n	8005d7a <_puts_r+0x9e>
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	210a      	movs	r1, #10
 8005d20:	4628      	mov	r0, r5
 8005d22:	f000 f83f 	bl	8005da4 <__swbuf_r>
 8005d26:	3001      	adds	r0, #1
 8005d28:	d011      	beq.n	8005d4e <_puts_r+0x72>
 8005d2a:	200a      	movs	r0, #10
 8005d2c:	e011      	b.n	8005d52 <_puts_r+0x76>
 8005d2e:	4b17      	ldr	r3, [pc, #92]	; (8005d8c <_puts_r+0xb0>)
 8005d30:	429c      	cmp	r4, r3
 8005d32:	d101      	bne.n	8005d38 <_puts_r+0x5c>
 8005d34:	68ac      	ldr	r4, [r5, #8]
 8005d36:	e7e3      	b.n	8005d00 <_puts_r+0x24>
 8005d38:	4b15      	ldr	r3, [pc, #84]	; (8005d90 <_puts_r+0xb4>)
 8005d3a:	429c      	cmp	r4, r3
 8005d3c:	bf08      	it	eq
 8005d3e:	68ec      	ldreq	r4, [r5, #12]
 8005d40:	e7de      	b.n	8005d00 <_puts_r+0x24>
 8005d42:	4621      	mov	r1, r4
 8005d44:	4628      	mov	r0, r5
 8005d46:	f000 f87f 	bl	8005e48 <__swsetup_r>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d0dd      	beq.n	8005d0a <_puts_r+0x2e>
 8005d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d52:	bd70      	pop	{r4, r5, r6, pc}
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	da04      	bge.n	8005d62 <_puts_r+0x86>
 8005d58:	69a2      	ldr	r2, [r4, #24]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	dc06      	bgt.n	8005d6c <_puts_r+0x90>
 8005d5e:	290a      	cmp	r1, #10
 8005d60:	d004      	beq.n	8005d6c <_puts_r+0x90>
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	6022      	str	r2, [r4, #0]
 8005d68:	7019      	strb	r1, [r3, #0]
 8005d6a:	e7cf      	b.n	8005d0c <_puts_r+0x30>
 8005d6c:	4622      	mov	r2, r4
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f000 f818 	bl	8005da4 <__swbuf_r>
 8005d74:	3001      	adds	r0, #1
 8005d76:	d1c9      	bne.n	8005d0c <_puts_r+0x30>
 8005d78:	e7e9      	b.n	8005d4e <_puts_r+0x72>
 8005d7a:	200a      	movs	r0, #10
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	6022      	str	r2, [r4, #0]
 8005d82:	7018      	strb	r0, [r3, #0]
 8005d84:	e7e5      	b.n	8005d52 <_puts_r+0x76>
 8005d86:	bf00      	nop
 8005d88:	08006e0c 	.word	0x08006e0c
 8005d8c:	08006e2c 	.word	0x08006e2c
 8005d90:	08006dec 	.word	0x08006dec

08005d94 <puts>:
 8005d94:	4b02      	ldr	r3, [pc, #8]	; (8005da0 <puts+0xc>)
 8005d96:	4601      	mov	r1, r0
 8005d98:	6818      	ldr	r0, [r3, #0]
 8005d9a:	f7ff bf9f 	b.w	8005cdc <_puts_r>
 8005d9e:	bf00      	nop
 8005da0:	20000018 	.word	0x20000018

08005da4 <__swbuf_r>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	460e      	mov	r6, r1
 8005da8:	4614      	mov	r4, r2
 8005daa:	4605      	mov	r5, r0
 8005dac:	b118      	cbz	r0, 8005db6 <__swbuf_r+0x12>
 8005dae:	6983      	ldr	r3, [r0, #24]
 8005db0:	b90b      	cbnz	r3, 8005db6 <__swbuf_r+0x12>
 8005db2:	f000 f9a7 	bl	8006104 <__sinit>
 8005db6:	4b21      	ldr	r3, [pc, #132]	; (8005e3c <__swbuf_r+0x98>)
 8005db8:	429c      	cmp	r4, r3
 8005dba:	d12a      	bne.n	8005e12 <__swbuf_r+0x6e>
 8005dbc:	686c      	ldr	r4, [r5, #4]
 8005dbe:	69a3      	ldr	r3, [r4, #24]
 8005dc0:	60a3      	str	r3, [r4, #8]
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	071a      	lsls	r2, r3, #28
 8005dc6:	d52e      	bpl.n	8005e26 <__swbuf_r+0x82>
 8005dc8:	6923      	ldr	r3, [r4, #16]
 8005dca:	b363      	cbz	r3, 8005e26 <__swbuf_r+0x82>
 8005dcc:	6923      	ldr	r3, [r4, #16]
 8005dce:	6820      	ldr	r0, [r4, #0]
 8005dd0:	b2f6      	uxtb	r6, r6
 8005dd2:	1ac0      	subs	r0, r0, r3
 8005dd4:	6963      	ldr	r3, [r4, #20]
 8005dd6:	4637      	mov	r7, r6
 8005dd8:	4283      	cmp	r3, r0
 8005dda:	dc04      	bgt.n	8005de6 <__swbuf_r+0x42>
 8005ddc:	4621      	mov	r1, r4
 8005dde:	4628      	mov	r0, r5
 8005de0:	f000 f926 	bl	8006030 <_fflush_r>
 8005de4:	bb28      	cbnz	r0, 8005e32 <__swbuf_r+0x8e>
 8005de6:	68a3      	ldr	r3, [r4, #8]
 8005de8:	3001      	adds	r0, #1
 8005dea:	3b01      	subs	r3, #1
 8005dec:	60a3      	str	r3, [r4, #8]
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	6022      	str	r2, [r4, #0]
 8005df4:	701e      	strb	r6, [r3, #0]
 8005df6:	6963      	ldr	r3, [r4, #20]
 8005df8:	4283      	cmp	r3, r0
 8005dfa:	d004      	beq.n	8005e06 <__swbuf_r+0x62>
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	07db      	lsls	r3, r3, #31
 8005e00:	d519      	bpl.n	8005e36 <__swbuf_r+0x92>
 8005e02:	2e0a      	cmp	r6, #10
 8005e04:	d117      	bne.n	8005e36 <__swbuf_r+0x92>
 8005e06:	4621      	mov	r1, r4
 8005e08:	4628      	mov	r0, r5
 8005e0a:	f000 f911 	bl	8006030 <_fflush_r>
 8005e0e:	b190      	cbz	r0, 8005e36 <__swbuf_r+0x92>
 8005e10:	e00f      	b.n	8005e32 <__swbuf_r+0x8e>
 8005e12:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <__swbuf_r+0x9c>)
 8005e14:	429c      	cmp	r4, r3
 8005e16:	d101      	bne.n	8005e1c <__swbuf_r+0x78>
 8005e18:	68ac      	ldr	r4, [r5, #8]
 8005e1a:	e7d0      	b.n	8005dbe <__swbuf_r+0x1a>
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <__swbuf_r+0xa0>)
 8005e1e:	429c      	cmp	r4, r3
 8005e20:	bf08      	it	eq
 8005e22:	68ec      	ldreq	r4, [r5, #12]
 8005e24:	e7cb      	b.n	8005dbe <__swbuf_r+0x1a>
 8005e26:	4621      	mov	r1, r4
 8005e28:	4628      	mov	r0, r5
 8005e2a:	f000 f80d 	bl	8005e48 <__swsetup_r>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d0cc      	beq.n	8005dcc <__swbuf_r+0x28>
 8005e32:	f04f 37ff 	mov.w	r7, #4294967295
 8005e36:	4638      	mov	r0, r7
 8005e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	08006e0c 	.word	0x08006e0c
 8005e40:	08006e2c 	.word	0x08006e2c
 8005e44:	08006dec 	.word	0x08006dec

08005e48 <__swsetup_r>:
 8005e48:	4b32      	ldr	r3, [pc, #200]	; (8005f14 <__swsetup_r+0xcc>)
 8005e4a:	b570      	push	{r4, r5, r6, lr}
 8005e4c:	681d      	ldr	r5, [r3, #0]
 8005e4e:	4606      	mov	r6, r0
 8005e50:	460c      	mov	r4, r1
 8005e52:	b125      	cbz	r5, 8005e5e <__swsetup_r+0x16>
 8005e54:	69ab      	ldr	r3, [r5, #24]
 8005e56:	b913      	cbnz	r3, 8005e5e <__swsetup_r+0x16>
 8005e58:	4628      	mov	r0, r5
 8005e5a:	f000 f953 	bl	8006104 <__sinit>
 8005e5e:	4b2e      	ldr	r3, [pc, #184]	; (8005f18 <__swsetup_r+0xd0>)
 8005e60:	429c      	cmp	r4, r3
 8005e62:	d10f      	bne.n	8005e84 <__swsetup_r+0x3c>
 8005e64:	686c      	ldr	r4, [r5, #4]
 8005e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	0715      	lsls	r5, r2, #28
 8005e6e:	d42c      	bmi.n	8005eca <__swsetup_r+0x82>
 8005e70:	06d0      	lsls	r0, r2, #27
 8005e72:	d411      	bmi.n	8005e98 <__swsetup_r+0x50>
 8005e74:	2209      	movs	r2, #9
 8005e76:	6032      	str	r2, [r6, #0]
 8005e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e7c:	81a3      	strh	r3, [r4, #12]
 8005e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e82:	e03e      	b.n	8005f02 <__swsetup_r+0xba>
 8005e84:	4b25      	ldr	r3, [pc, #148]	; (8005f1c <__swsetup_r+0xd4>)
 8005e86:	429c      	cmp	r4, r3
 8005e88:	d101      	bne.n	8005e8e <__swsetup_r+0x46>
 8005e8a:	68ac      	ldr	r4, [r5, #8]
 8005e8c:	e7eb      	b.n	8005e66 <__swsetup_r+0x1e>
 8005e8e:	4b24      	ldr	r3, [pc, #144]	; (8005f20 <__swsetup_r+0xd8>)
 8005e90:	429c      	cmp	r4, r3
 8005e92:	bf08      	it	eq
 8005e94:	68ec      	ldreq	r4, [r5, #12]
 8005e96:	e7e6      	b.n	8005e66 <__swsetup_r+0x1e>
 8005e98:	0751      	lsls	r1, r2, #29
 8005e9a:	d512      	bpl.n	8005ec2 <__swsetup_r+0x7a>
 8005e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e9e:	b141      	cbz	r1, 8005eb2 <__swsetup_r+0x6a>
 8005ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ea4:	4299      	cmp	r1, r3
 8005ea6:	d002      	beq.n	8005eae <__swsetup_r+0x66>
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f000 fa19 	bl	80062e0 <_free_r>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	6363      	str	r3, [r4, #52]	; 0x34
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005eb8:	81a3      	strh	r3, [r4, #12]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	6063      	str	r3, [r4, #4]
 8005ebe:	6923      	ldr	r3, [r4, #16]
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	f043 0308 	orr.w	r3, r3, #8
 8005ec8:	81a3      	strh	r3, [r4, #12]
 8005eca:	6923      	ldr	r3, [r4, #16]
 8005ecc:	b94b      	cbnz	r3, 8005ee2 <__swsetup_r+0x9a>
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed8:	d003      	beq.n	8005ee2 <__swsetup_r+0x9a>
 8005eda:	4621      	mov	r1, r4
 8005edc:	4630      	mov	r0, r6
 8005ede:	f000 f9bf 	bl	8006260 <__smakebuf_r>
 8005ee2:	89a2      	ldrh	r2, [r4, #12]
 8005ee4:	f012 0301 	ands.w	r3, r2, #1
 8005ee8:	d00c      	beq.n	8005f04 <__swsetup_r+0xbc>
 8005eea:	2300      	movs	r3, #0
 8005eec:	60a3      	str	r3, [r4, #8]
 8005eee:	6963      	ldr	r3, [r4, #20]
 8005ef0:	425b      	negs	r3, r3
 8005ef2:	61a3      	str	r3, [r4, #24]
 8005ef4:	6923      	ldr	r3, [r4, #16]
 8005ef6:	b953      	cbnz	r3, 8005f0e <__swsetup_r+0xc6>
 8005ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005efc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005f00:	d1ba      	bne.n	8005e78 <__swsetup_r+0x30>
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	0792      	lsls	r2, r2, #30
 8005f06:	bf58      	it	pl
 8005f08:	6963      	ldrpl	r3, [r4, #20]
 8005f0a:	60a3      	str	r3, [r4, #8]
 8005f0c:	e7f2      	b.n	8005ef4 <__swsetup_r+0xac>
 8005f0e:	2000      	movs	r0, #0
 8005f10:	e7f7      	b.n	8005f02 <__swsetup_r+0xba>
 8005f12:	bf00      	nop
 8005f14:	20000018 	.word	0x20000018
 8005f18:	08006e0c 	.word	0x08006e0c
 8005f1c:	08006e2c 	.word	0x08006e2c
 8005f20:	08006dec 	.word	0x08006dec

08005f24 <__sflush_r>:
 8005f24:	898a      	ldrh	r2, [r1, #12]
 8005f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	0710      	lsls	r0, r2, #28
 8005f2e:	460c      	mov	r4, r1
 8005f30:	d458      	bmi.n	8005fe4 <__sflush_r+0xc0>
 8005f32:	684b      	ldr	r3, [r1, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	dc05      	bgt.n	8005f44 <__sflush_r+0x20>
 8005f38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	dc02      	bgt.n	8005f44 <__sflush_r+0x20>
 8005f3e:	2000      	movs	r0, #0
 8005f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f46:	2e00      	cmp	r6, #0
 8005f48:	d0f9      	beq.n	8005f3e <__sflush_r+0x1a>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f50:	682f      	ldr	r7, [r5, #0]
 8005f52:	6a21      	ldr	r1, [r4, #32]
 8005f54:	602b      	str	r3, [r5, #0]
 8005f56:	d032      	beq.n	8005fbe <__sflush_r+0x9a>
 8005f58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f5a:	89a3      	ldrh	r3, [r4, #12]
 8005f5c:	075a      	lsls	r2, r3, #29
 8005f5e:	d505      	bpl.n	8005f6c <__sflush_r+0x48>
 8005f60:	6863      	ldr	r3, [r4, #4]
 8005f62:	1ac0      	subs	r0, r0, r3
 8005f64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f66:	b10b      	cbz	r3, 8005f6c <__sflush_r+0x48>
 8005f68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f6a:	1ac0      	subs	r0, r0, r3
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	4602      	mov	r2, r0
 8005f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f72:	6a21      	ldr	r1, [r4, #32]
 8005f74:	4628      	mov	r0, r5
 8005f76:	47b0      	blx	r6
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	d106      	bne.n	8005f8c <__sflush_r+0x68>
 8005f7e:	6829      	ldr	r1, [r5, #0]
 8005f80:	291d      	cmp	r1, #29
 8005f82:	d848      	bhi.n	8006016 <__sflush_r+0xf2>
 8005f84:	4a29      	ldr	r2, [pc, #164]	; (800602c <__sflush_r+0x108>)
 8005f86:	40ca      	lsrs	r2, r1
 8005f88:	07d6      	lsls	r6, r2, #31
 8005f8a:	d544      	bpl.n	8006016 <__sflush_r+0xf2>
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	6062      	str	r2, [r4, #4]
 8005f90:	6922      	ldr	r2, [r4, #16]
 8005f92:	04d9      	lsls	r1, r3, #19
 8005f94:	6022      	str	r2, [r4, #0]
 8005f96:	d504      	bpl.n	8005fa2 <__sflush_r+0x7e>
 8005f98:	1c42      	adds	r2, r0, #1
 8005f9a:	d101      	bne.n	8005fa0 <__sflush_r+0x7c>
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	b903      	cbnz	r3, 8005fa2 <__sflush_r+0x7e>
 8005fa0:	6560      	str	r0, [r4, #84]	; 0x54
 8005fa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fa4:	602f      	str	r7, [r5, #0]
 8005fa6:	2900      	cmp	r1, #0
 8005fa8:	d0c9      	beq.n	8005f3e <__sflush_r+0x1a>
 8005faa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fae:	4299      	cmp	r1, r3
 8005fb0:	d002      	beq.n	8005fb8 <__sflush_r+0x94>
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f000 f994 	bl	80062e0 <_free_r>
 8005fb8:	2000      	movs	r0, #0
 8005fba:	6360      	str	r0, [r4, #52]	; 0x34
 8005fbc:	e7c0      	b.n	8005f40 <__sflush_r+0x1c>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	47b0      	blx	r6
 8005fc4:	1c41      	adds	r1, r0, #1
 8005fc6:	d1c8      	bne.n	8005f5a <__sflush_r+0x36>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0c5      	beq.n	8005f5a <__sflush_r+0x36>
 8005fce:	2b1d      	cmp	r3, #29
 8005fd0:	d001      	beq.n	8005fd6 <__sflush_r+0xb2>
 8005fd2:	2b16      	cmp	r3, #22
 8005fd4:	d101      	bne.n	8005fda <__sflush_r+0xb6>
 8005fd6:	602f      	str	r7, [r5, #0]
 8005fd8:	e7b1      	b.n	8005f3e <__sflush_r+0x1a>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe0:	81a3      	strh	r3, [r4, #12]
 8005fe2:	e7ad      	b.n	8005f40 <__sflush_r+0x1c>
 8005fe4:	690f      	ldr	r7, [r1, #16]
 8005fe6:	2f00      	cmp	r7, #0
 8005fe8:	d0a9      	beq.n	8005f3e <__sflush_r+0x1a>
 8005fea:	0793      	lsls	r3, r2, #30
 8005fec:	bf18      	it	ne
 8005fee:	2300      	movne	r3, #0
 8005ff0:	680e      	ldr	r6, [r1, #0]
 8005ff2:	bf08      	it	eq
 8005ff4:	694b      	ldreq	r3, [r1, #20]
 8005ff6:	eba6 0807 	sub.w	r8, r6, r7
 8005ffa:	600f      	str	r7, [r1, #0]
 8005ffc:	608b      	str	r3, [r1, #8]
 8005ffe:	f1b8 0f00 	cmp.w	r8, #0
 8006002:	dd9c      	ble.n	8005f3e <__sflush_r+0x1a>
 8006004:	4643      	mov	r3, r8
 8006006:	463a      	mov	r2, r7
 8006008:	6a21      	ldr	r1, [r4, #32]
 800600a:	4628      	mov	r0, r5
 800600c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800600e:	47b0      	blx	r6
 8006010:	2800      	cmp	r0, #0
 8006012:	dc06      	bgt.n	8006022 <__sflush_r+0xfe>
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800601a:	81a3      	strh	r3, [r4, #12]
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	e78e      	b.n	8005f40 <__sflush_r+0x1c>
 8006022:	4407      	add	r7, r0
 8006024:	eba8 0800 	sub.w	r8, r8, r0
 8006028:	e7e9      	b.n	8005ffe <__sflush_r+0xda>
 800602a:	bf00      	nop
 800602c:	20400001 	.word	0x20400001

08006030 <_fflush_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	690b      	ldr	r3, [r1, #16]
 8006034:	4605      	mov	r5, r0
 8006036:	460c      	mov	r4, r1
 8006038:	b1db      	cbz	r3, 8006072 <_fflush_r+0x42>
 800603a:	b118      	cbz	r0, 8006044 <_fflush_r+0x14>
 800603c:	6983      	ldr	r3, [r0, #24]
 800603e:	b90b      	cbnz	r3, 8006044 <_fflush_r+0x14>
 8006040:	f000 f860 	bl	8006104 <__sinit>
 8006044:	4b0c      	ldr	r3, [pc, #48]	; (8006078 <_fflush_r+0x48>)
 8006046:	429c      	cmp	r4, r3
 8006048:	d109      	bne.n	800605e <_fflush_r+0x2e>
 800604a:	686c      	ldr	r4, [r5, #4]
 800604c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006050:	b17b      	cbz	r3, 8006072 <_fflush_r+0x42>
 8006052:	4621      	mov	r1, r4
 8006054:	4628      	mov	r0, r5
 8006056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800605a:	f7ff bf63 	b.w	8005f24 <__sflush_r>
 800605e:	4b07      	ldr	r3, [pc, #28]	; (800607c <_fflush_r+0x4c>)
 8006060:	429c      	cmp	r4, r3
 8006062:	d101      	bne.n	8006068 <_fflush_r+0x38>
 8006064:	68ac      	ldr	r4, [r5, #8]
 8006066:	e7f1      	b.n	800604c <_fflush_r+0x1c>
 8006068:	4b05      	ldr	r3, [pc, #20]	; (8006080 <_fflush_r+0x50>)
 800606a:	429c      	cmp	r4, r3
 800606c:	bf08      	it	eq
 800606e:	68ec      	ldreq	r4, [r5, #12]
 8006070:	e7ec      	b.n	800604c <_fflush_r+0x1c>
 8006072:	2000      	movs	r0, #0
 8006074:	bd38      	pop	{r3, r4, r5, pc}
 8006076:	bf00      	nop
 8006078:	08006e0c 	.word	0x08006e0c
 800607c:	08006e2c 	.word	0x08006e2c
 8006080:	08006dec 	.word	0x08006dec

08006084 <std>:
 8006084:	2300      	movs	r3, #0
 8006086:	b510      	push	{r4, lr}
 8006088:	4604      	mov	r4, r0
 800608a:	e9c0 3300 	strd	r3, r3, [r0]
 800608e:	6083      	str	r3, [r0, #8]
 8006090:	8181      	strh	r1, [r0, #12]
 8006092:	6643      	str	r3, [r0, #100]	; 0x64
 8006094:	81c2      	strh	r2, [r0, #14]
 8006096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800609a:	6183      	str	r3, [r0, #24]
 800609c:	4619      	mov	r1, r3
 800609e:	2208      	movs	r2, #8
 80060a0:	305c      	adds	r0, #92	; 0x5c
 80060a2:	f7ff fdfa 	bl	8005c9a <memset>
 80060a6:	4b05      	ldr	r3, [pc, #20]	; (80060bc <std+0x38>)
 80060a8:	6224      	str	r4, [r4, #32]
 80060aa:	6263      	str	r3, [r4, #36]	; 0x24
 80060ac:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <std+0x3c>)
 80060ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80060b0:	4b04      	ldr	r3, [pc, #16]	; (80060c4 <std+0x40>)
 80060b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060b4:	4b04      	ldr	r3, [pc, #16]	; (80060c8 <std+0x44>)
 80060b6:	6323      	str	r3, [r4, #48]	; 0x30
 80060b8:	bd10      	pop	{r4, pc}
 80060ba:	bf00      	nop
 80060bc:	080069d9 	.word	0x080069d9
 80060c0:	080069fb 	.word	0x080069fb
 80060c4:	08006a33 	.word	0x08006a33
 80060c8:	08006a57 	.word	0x08006a57

080060cc <_cleanup_r>:
 80060cc:	4901      	ldr	r1, [pc, #4]	; (80060d4 <_cleanup_r+0x8>)
 80060ce:	f000 b885 	b.w	80061dc <_fwalk_reent>
 80060d2:	bf00      	nop
 80060d4:	08006031 	.word	0x08006031

080060d8 <__sfmoreglue>:
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	2568      	movs	r5, #104	; 0x68
 80060dc:	1e4a      	subs	r2, r1, #1
 80060de:	4355      	muls	r5, r2
 80060e0:	460e      	mov	r6, r1
 80060e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060e6:	f000 f947 	bl	8006378 <_malloc_r>
 80060ea:	4604      	mov	r4, r0
 80060ec:	b140      	cbz	r0, 8006100 <__sfmoreglue+0x28>
 80060ee:	2100      	movs	r1, #0
 80060f0:	e9c0 1600 	strd	r1, r6, [r0]
 80060f4:	300c      	adds	r0, #12
 80060f6:	60a0      	str	r0, [r4, #8]
 80060f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060fc:	f7ff fdcd 	bl	8005c9a <memset>
 8006100:	4620      	mov	r0, r4
 8006102:	bd70      	pop	{r4, r5, r6, pc}

08006104 <__sinit>:
 8006104:	6983      	ldr	r3, [r0, #24]
 8006106:	b510      	push	{r4, lr}
 8006108:	4604      	mov	r4, r0
 800610a:	bb33      	cbnz	r3, 800615a <__sinit+0x56>
 800610c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006110:	6503      	str	r3, [r0, #80]	; 0x50
 8006112:	4b12      	ldr	r3, [pc, #72]	; (800615c <__sinit+0x58>)
 8006114:	4a12      	ldr	r2, [pc, #72]	; (8006160 <__sinit+0x5c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6282      	str	r2, [r0, #40]	; 0x28
 800611a:	4298      	cmp	r0, r3
 800611c:	bf04      	itt	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	6183      	streq	r3, [r0, #24]
 8006122:	f000 f81f 	bl	8006164 <__sfp>
 8006126:	6060      	str	r0, [r4, #4]
 8006128:	4620      	mov	r0, r4
 800612a:	f000 f81b 	bl	8006164 <__sfp>
 800612e:	60a0      	str	r0, [r4, #8]
 8006130:	4620      	mov	r0, r4
 8006132:	f000 f817 	bl	8006164 <__sfp>
 8006136:	2200      	movs	r2, #0
 8006138:	60e0      	str	r0, [r4, #12]
 800613a:	2104      	movs	r1, #4
 800613c:	6860      	ldr	r0, [r4, #4]
 800613e:	f7ff ffa1 	bl	8006084 <std>
 8006142:	2201      	movs	r2, #1
 8006144:	2109      	movs	r1, #9
 8006146:	68a0      	ldr	r0, [r4, #8]
 8006148:	f7ff ff9c 	bl	8006084 <std>
 800614c:	2202      	movs	r2, #2
 800614e:	2112      	movs	r1, #18
 8006150:	68e0      	ldr	r0, [r4, #12]
 8006152:	f7ff ff97 	bl	8006084 <std>
 8006156:	2301      	movs	r3, #1
 8006158:	61a3      	str	r3, [r4, #24]
 800615a:	bd10      	pop	{r4, pc}
 800615c:	08006de8 	.word	0x08006de8
 8006160:	080060cd 	.word	0x080060cd

08006164 <__sfp>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <__sfp+0x70>)
 8006168:	4607      	mov	r7, r0
 800616a:	681e      	ldr	r6, [r3, #0]
 800616c:	69b3      	ldr	r3, [r6, #24]
 800616e:	b913      	cbnz	r3, 8006176 <__sfp+0x12>
 8006170:	4630      	mov	r0, r6
 8006172:	f7ff ffc7 	bl	8006104 <__sinit>
 8006176:	3648      	adds	r6, #72	; 0x48
 8006178:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800617c:	3b01      	subs	r3, #1
 800617e:	d503      	bpl.n	8006188 <__sfp+0x24>
 8006180:	6833      	ldr	r3, [r6, #0]
 8006182:	b133      	cbz	r3, 8006192 <__sfp+0x2e>
 8006184:	6836      	ldr	r6, [r6, #0]
 8006186:	e7f7      	b.n	8006178 <__sfp+0x14>
 8006188:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800618c:	b16d      	cbz	r5, 80061aa <__sfp+0x46>
 800618e:	3468      	adds	r4, #104	; 0x68
 8006190:	e7f4      	b.n	800617c <__sfp+0x18>
 8006192:	2104      	movs	r1, #4
 8006194:	4638      	mov	r0, r7
 8006196:	f7ff ff9f 	bl	80060d8 <__sfmoreglue>
 800619a:	6030      	str	r0, [r6, #0]
 800619c:	2800      	cmp	r0, #0
 800619e:	d1f1      	bne.n	8006184 <__sfp+0x20>
 80061a0:	230c      	movs	r3, #12
 80061a2:	4604      	mov	r4, r0
 80061a4:	603b      	str	r3, [r7, #0]
 80061a6:	4620      	mov	r0, r4
 80061a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061aa:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <__sfp+0x74>)
 80061ac:	6665      	str	r5, [r4, #100]	; 0x64
 80061ae:	e9c4 5500 	strd	r5, r5, [r4]
 80061b2:	60a5      	str	r5, [r4, #8]
 80061b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80061b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80061bc:	2208      	movs	r2, #8
 80061be:	4629      	mov	r1, r5
 80061c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061c4:	f7ff fd69 	bl	8005c9a <memset>
 80061c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061d0:	e7e9      	b.n	80061a6 <__sfp+0x42>
 80061d2:	bf00      	nop
 80061d4:	08006de8 	.word	0x08006de8
 80061d8:	ffff0001 	.word	0xffff0001

080061dc <_fwalk_reent>:
 80061dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e0:	4680      	mov	r8, r0
 80061e2:	4689      	mov	r9, r1
 80061e4:	2600      	movs	r6, #0
 80061e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061ea:	b914      	cbnz	r4, 80061f2 <_fwalk_reent+0x16>
 80061ec:	4630      	mov	r0, r6
 80061ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80061f6:	3f01      	subs	r7, #1
 80061f8:	d501      	bpl.n	80061fe <_fwalk_reent+0x22>
 80061fa:	6824      	ldr	r4, [r4, #0]
 80061fc:	e7f5      	b.n	80061ea <_fwalk_reent+0xe>
 80061fe:	89ab      	ldrh	r3, [r5, #12]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d907      	bls.n	8006214 <_fwalk_reent+0x38>
 8006204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006208:	3301      	adds	r3, #1
 800620a:	d003      	beq.n	8006214 <_fwalk_reent+0x38>
 800620c:	4629      	mov	r1, r5
 800620e:	4640      	mov	r0, r8
 8006210:	47c8      	blx	r9
 8006212:	4306      	orrs	r6, r0
 8006214:	3568      	adds	r5, #104	; 0x68
 8006216:	e7ee      	b.n	80061f6 <_fwalk_reent+0x1a>

08006218 <__swhatbuf_r>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	460e      	mov	r6, r1
 800621c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006220:	b096      	sub	sp, #88	; 0x58
 8006222:	2900      	cmp	r1, #0
 8006224:	4614      	mov	r4, r2
 8006226:	461d      	mov	r5, r3
 8006228:	da07      	bge.n	800623a <__swhatbuf_r+0x22>
 800622a:	2300      	movs	r3, #0
 800622c:	602b      	str	r3, [r5, #0]
 800622e:	89b3      	ldrh	r3, [r6, #12]
 8006230:	061a      	lsls	r2, r3, #24
 8006232:	d410      	bmi.n	8006256 <__swhatbuf_r+0x3e>
 8006234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006238:	e00e      	b.n	8006258 <__swhatbuf_r+0x40>
 800623a:	466a      	mov	r2, sp
 800623c:	f000 fc32 	bl	8006aa4 <_fstat_r>
 8006240:	2800      	cmp	r0, #0
 8006242:	dbf2      	blt.n	800622a <__swhatbuf_r+0x12>
 8006244:	9a01      	ldr	r2, [sp, #4]
 8006246:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800624a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800624e:	425a      	negs	r2, r3
 8006250:	415a      	adcs	r2, r3
 8006252:	602a      	str	r2, [r5, #0]
 8006254:	e7ee      	b.n	8006234 <__swhatbuf_r+0x1c>
 8006256:	2340      	movs	r3, #64	; 0x40
 8006258:	2000      	movs	r0, #0
 800625a:	6023      	str	r3, [r4, #0]
 800625c:	b016      	add	sp, #88	; 0x58
 800625e:	bd70      	pop	{r4, r5, r6, pc}

08006260 <__smakebuf_r>:
 8006260:	898b      	ldrh	r3, [r1, #12]
 8006262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006264:	079d      	lsls	r5, r3, #30
 8006266:	4606      	mov	r6, r0
 8006268:	460c      	mov	r4, r1
 800626a:	d507      	bpl.n	800627c <__smakebuf_r+0x1c>
 800626c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	6123      	str	r3, [r4, #16]
 8006274:	2301      	movs	r3, #1
 8006276:	6163      	str	r3, [r4, #20]
 8006278:	b002      	add	sp, #8
 800627a:	bd70      	pop	{r4, r5, r6, pc}
 800627c:	ab01      	add	r3, sp, #4
 800627e:	466a      	mov	r2, sp
 8006280:	f7ff ffca 	bl	8006218 <__swhatbuf_r>
 8006284:	9900      	ldr	r1, [sp, #0]
 8006286:	4605      	mov	r5, r0
 8006288:	4630      	mov	r0, r6
 800628a:	f000 f875 	bl	8006378 <_malloc_r>
 800628e:	b948      	cbnz	r0, 80062a4 <__smakebuf_r+0x44>
 8006290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006294:	059a      	lsls	r2, r3, #22
 8006296:	d4ef      	bmi.n	8006278 <__smakebuf_r+0x18>
 8006298:	f023 0303 	bic.w	r3, r3, #3
 800629c:	f043 0302 	orr.w	r3, r3, #2
 80062a0:	81a3      	strh	r3, [r4, #12]
 80062a2:	e7e3      	b.n	800626c <__smakebuf_r+0xc>
 80062a4:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <__smakebuf_r+0x7c>)
 80062a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	6020      	str	r0, [r4, #0]
 80062ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b0:	81a3      	strh	r3, [r4, #12]
 80062b2:	9b00      	ldr	r3, [sp, #0]
 80062b4:	6120      	str	r0, [r4, #16]
 80062b6:	6163      	str	r3, [r4, #20]
 80062b8:	9b01      	ldr	r3, [sp, #4]
 80062ba:	b15b      	cbz	r3, 80062d4 <__smakebuf_r+0x74>
 80062bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062c0:	4630      	mov	r0, r6
 80062c2:	f000 fc01 	bl	8006ac8 <_isatty_r>
 80062c6:	b128      	cbz	r0, 80062d4 <__smakebuf_r+0x74>
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	f023 0303 	bic.w	r3, r3, #3
 80062ce:	f043 0301 	orr.w	r3, r3, #1
 80062d2:	81a3      	strh	r3, [r4, #12]
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	431d      	orrs	r5, r3
 80062d8:	81a5      	strh	r5, [r4, #12]
 80062da:	e7cd      	b.n	8006278 <__smakebuf_r+0x18>
 80062dc:	080060cd 	.word	0x080060cd

080062e0 <_free_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4605      	mov	r5, r0
 80062e4:	2900      	cmp	r1, #0
 80062e6:	d043      	beq.n	8006370 <_free_r+0x90>
 80062e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ec:	1f0c      	subs	r4, r1, #4
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bfb8      	it	lt
 80062f2:	18e4      	addlt	r4, r4, r3
 80062f4:	f000 fc18 	bl	8006b28 <__malloc_lock>
 80062f8:	4a1e      	ldr	r2, [pc, #120]	; (8006374 <_free_r+0x94>)
 80062fa:	6813      	ldr	r3, [r2, #0]
 80062fc:	4610      	mov	r0, r2
 80062fe:	b933      	cbnz	r3, 800630e <_free_r+0x2e>
 8006300:	6063      	str	r3, [r4, #4]
 8006302:	6014      	str	r4, [r2, #0]
 8006304:	4628      	mov	r0, r5
 8006306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800630a:	f000 bc0e 	b.w	8006b2a <__malloc_unlock>
 800630e:	42a3      	cmp	r3, r4
 8006310:	d90b      	bls.n	800632a <_free_r+0x4a>
 8006312:	6821      	ldr	r1, [r4, #0]
 8006314:	1862      	adds	r2, r4, r1
 8006316:	4293      	cmp	r3, r2
 8006318:	bf01      	itttt	eq
 800631a:	681a      	ldreq	r2, [r3, #0]
 800631c:	685b      	ldreq	r3, [r3, #4]
 800631e:	1852      	addeq	r2, r2, r1
 8006320:	6022      	streq	r2, [r4, #0]
 8006322:	6063      	str	r3, [r4, #4]
 8006324:	6004      	str	r4, [r0, #0]
 8006326:	e7ed      	b.n	8006304 <_free_r+0x24>
 8006328:	4613      	mov	r3, r2
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	b10a      	cbz	r2, 8006332 <_free_r+0x52>
 800632e:	42a2      	cmp	r2, r4
 8006330:	d9fa      	bls.n	8006328 <_free_r+0x48>
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	1858      	adds	r0, r3, r1
 8006336:	42a0      	cmp	r0, r4
 8006338:	d10b      	bne.n	8006352 <_free_r+0x72>
 800633a:	6820      	ldr	r0, [r4, #0]
 800633c:	4401      	add	r1, r0
 800633e:	1858      	adds	r0, r3, r1
 8006340:	4282      	cmp	r2, r0
 8006342:	6019      	str	r1, [r3, #0]
 8006344:	d1de      	bne.n	8006304 <_free_r+0x24>
 8006346:	6810      	ldr	r0, [r2, #0]
 8006348:	6852      	ldr	r2, [r2, #4]
 800634a:	4401      	add	r1, r0
 800634c:	6019      	str	r1, [r3, #0]
 800634e:	605a      	str	r2, [r3, #4]
 8006350:	e7d8      	b.n	8006304 <_free_r+0x24>
 8006352:	d902      	bls.n	800635a <_free_r+0x7a>
 8006354:	230c      	movs	r3, #12
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	e7d4      	b.n	8006304 <_free_r+0x24>
 800635a:	6820      	ldr	r0, [r4, #0]
 800635c:	1821      	adds	r1, r4, r0
 800635e:	428a      	cmp	r2, r1
 8006360:	bf01      	itttt	eq
 8006362:	6811      	ldreq	r1, [r2, #0]
 8006364:	6852      	ldreq	r2, [r2, #4]
 8006366:	1809      	addeq	r1, r1, r0
 8006368:	6021      	streq	r1, [r4, #0]
 800636a:	6062      	str	r2, [r4, #4]
 800636c:	605c      	str	r4, [r3, #4]
 800636e:	e7c9      	b.n	8006304 <_free_r+0x24>
 8006370:	bd38      	pop	{r3, r4, r5, pc}
 8006372:	bf00      	nop
 8006374:	20000100 	.word	0x20000100

08006378 <_malloc_r>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	1ccd      	adds	r5, r1, #3
 800637c:	f025 0503 	bic.w	r5, r5, #3
 8006380:	3508      	adds	r5, #8
 8006382:	2d0c      	cmp	r5, #12
 8006384:	bf38      	it	cc
 8006386:	250c      	movcc	r5, #12
 8006388:	2d00      	cmp	r5, #0
 800638a:	4606      	mov	r6, r0
 800638c:	db01      	blt.n	8006392 <_malloc_r+0x1a>
 800638e:	42a9      	cmp	r1, r5
 8006390:	d903      	bls.n	800639a <_malloc_r+0x22>
 8006392:	230c      	movs	r3, #12
 8006394:	6033      	str	r3, [r6, #0]
 8006396:	2000      	movs	r0, #0
 8006398:	bd70      	pop	{r4, r5, r6, pc}
 800639a:	f000 fbc5 	bl	8006b28 <__malloc_lock>
 800639e:	4a21      	ldr	r2, [pc, #132]	; (8006424 <_malloc_r+0xac>)
 80063a0:	6814      	ldr	r4, [r2, #0]
 80063a2:	4621      	mov	r1, r4
 80063a4:	b991      	cbnz	r1, 80063cc <_malloc_r+0x54>
 80063a6:	4c20      	ldr	r4, [pc, #128]	; (8006428 <_malloc_r+0xb0>)
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	b91b      	cbnz	r3, 80063b4 <_malloc_r+0x3c>
 80063ac:	4630      	mov	r0, r6
 80063ae:	f000 fb03 	bl	80069b8 <_sbrk_r>
 80063b2:	6020      	str	r0, [r4, #0]
 80063b4:	4629      	mov	r1, r5
 80063b6:	4630      	mov	r0, r6
 80063b8:	f000 fafe 	bl	80069b8 <_sbrk_r>
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	d124      	bne.n	800640a <_malloc_r+0x92>
 80063c0:	230c      	movs	r3, #12
 80063c2:	4630      	mov	r0, r6
 80063c4:	6033      	str	r3, [r6, #0]
 80063c6:	f000 fbb0 	bl	8006b2a <__malloc_unlock>
 80063ca:	e7e4      	b.n	8006396 <_malloc_r+0x1e>
 80063cc:	680b      	ldr	r3, [r1, #0]
 80063ce:	1b5b      	subs	r3, r3, r5
 80063d0:	d418      	bmi.n	8006404 <_malloc_r+0x8c>
 80063d2:	2b0b      	cmp	r3, #11
 80063d4:	d90f      	bls.n	80063f6 <_malloc_r+0x7e>
 80063d6:	600b      	str	r3, [r1, #0]
 80063d8:	18cc      	adds	r4, r1, r3
 80063da:	50cd      	str	r5, [r1, r3]
 80063dc:	4630      	mov	r0, r6
 80063de:	f000 fba4 	bl	8006b2a <__malloc_unlock>
 80063e2:	f104 000b 	add.w	r0, r4, #11
 80063e6:	1d23      	adds	r3, r4, #4
 80063e8:	f020 0007 	bic.w	r0, r0, #7
 80063ec:	1ac3      	subs	r3, r0, r3
 80063ee:	d0d3      	beq.n	8006398 <_malloc_r+0x20>
 80063f0:	425a      	negs	r2, r3
 80063f2:	50e2      	str	r2, [r4, r3]
 80063f4:	e7d0      	b.n	8006398 <_malloc_r+0x20>
 80063f6:	684b      	ldr	r3, [r1, #4]
 80063f8:	428c      	cmp	r4, r1
 80063fa:	bf16      	itet	ne
 80063fc:	6063      	strne	r3, [r4, #4]
 80063fe:	6013      	streq	r3, [r2, #0]
 8006400:	460c      	movne	r4, r1
 8006402:	e7eb      	b.n	80063dc <_malloc_r+0x64>
 8006404:	460c      	mov	r4, r1
 8006406:	6849      	ldr	r1, [r1, #4]
 8006408:	e7cc      	b.n	80063a4 <_malloc_r+0x2c>
 800640a:	1cc4      	adds	r4, r0, #3
 800640c:	f024 0403 	bic.w	r4, r4, #3
 8006410:	42a0      	cmp	r0, r4
 8006412:	d005      	beq.n	8006420 <_malloc_r+0xa8>
 8006414:	1a21      	subs	r1, r4, r0
 8006416:	4630      	mov	r0, r6
 8006418:	f000 face 	bl	80069b8 <_sbrk_r>
 800641c:	3001      	adds	r0, #1
 800641e:	d0cf      	beq.n	80063c0 <_malloc_r+0x48>
 8006420:	6025      	str	r5, [r4, #0]
 8006422:	e7db      	b.n	80063dc <_malloc_r+0x64>
 8006424:	20000100 	.word	0x20000100
 8006428:	20000104 	.word	0x20000104

0800642c <__sfputc_r>:
 800642c:	6893      	ldr	r3, [r2, #8]
 800642e:	b410      	push	{r4}
 8006430:	3b01      	subs	r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	6093      	str	r3, [r2, #8]
 8006436:	da07      	bge.n	8006448 <__sfputc_r+0x1c>
 8006438:	6994      	ldr	r4, [r2, #24]
 800643a:	42a3      	cmp	r3, r4
 800643c:	db01      	blt.n	8006442 <__sfputc_r+0x16>
 800643e:	290a      	cmp	r1, #10
 8006440:	d102      	bne.n	8006448 <__sfputc_r+0x1c>
 8006442:	bc10      	pop	{r4}
 8006444:	f7ff bcae 	b.w	8005da4 <__swbuf_r>
 8006448:	6813      	ldr	r3, [r2, #0]
 800644a:	1c58      	adds	r0, r3, #1
 800644c:	6010      	str	r0, [r2, #0]
 800644e:	7019      	strb	r1, [r3, #0]
 8006450:	4608      	mov	r0, r1
 8006452:	bc10      	pop	{r4}
 8006454:	4770      	bx	lr

08006456 <__sfputs_r>:
 8006456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006458:	4606      	mov	r6, r0
 800645a:	460f      	mov	r7, r1
 800645c:	4614      	mov	r4, r2
 800645e:	18d5      	adds	r5, r2, r3
 8006460:	42ac      	cmp	r4, r5
 8006462:	d101      	bne.n	8006468 <__sfputs_r+0x12>
 8006464:	2000      	movs	r0, #0
 8006466:	e007      	b.n	8006478 <__sfputs_r+0x22>
 8006468:	463a      	mov	r2, r7
 800646a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800646e:	4630      	mov	r0, r6
 8006470:	f7ff ffdc 	bl	800642c <__sfputc_r>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d1f3      	bne.n	8006460 <__sfputs_r+0xa>
 8006478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800647c <_vfiprintf_r>:
 800647c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006480:	460c      	mov	r4, r1
 8006482:	b09d      	sub	sp, #116	; 0x74
 8006484:	4617      	mov	r7, r2
 8006486:	461d      	mov	r5, r3
 8006488:	4606      	mov	r6, r0
 800648a:	b118      	cbz	r0, 8006494 <_vfiprintf_r+0x18>
 800648c:	6983      	ldr	r3, [r0, #24]
 800648e:	b90b      	cbnz	r3, 8006494 <_vfiprintf_r+0x18>
 8006490:	f7ff fe38 	bl	8006104 <__sinit>
 8006494:	4b7c      	ldr	r3, [pc, #496]	; (8006688 <_vfiprintf_r+0x20c>)
 8006496:	429c      	cmp	r4, r3
 8006498:	d158      	bne.n	800654c <_vfiprintf_r+0xd0>
 800649a:	6874      	ldr	r4, [r6, #4]
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	0718      	lsls	r0, r3, #28
 80064a0:	d55e      	bpl.n	8006560 <_vfiprintf_r+0xe4>
 80064a2:	6923      	ldr	r3, [r4, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d05b      	beq.n	8006560 <_vfiprintf_r+0xe4>
 80064a8:	2300      	movs	r3, #0
 80064aa:	9309      	str	r3, [sp, #36]	; 0x24
 80064ac:	2320      	movs	r3, #32
 80064ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064b2:	2330      	movs	r3, #48	; 0x30
 80064b4:	f04f 0b01 	mov.w	fp, #1
 80064b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064bc:	9503      	str	r5, [sp, #12]
 80064be:	46b8      	mov	r8, r7
 80064c0:	4645      	mov	r5, r8
 80064c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064c6:	b10b      	cbz	r3, 80064cc <_vfiprintf_r+0x50>
 80064c8:	2b25      	cmp	r3, #37	; 0x25
 80064ca:	d154      	bne.n	8006576 <_vfiprintf_r+0xfa>
 80064cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80064d0:	d00b      	beq.n	80064ea <_vfiprintf_r+0x6e>
 80064d2:	4653      	mov	r3, sl
 80064d4:	463a      	mov	r2, r7
 80064d6:	4621      	mov	r1, r4
 80064d8:	4630      	mov	r0, r6
 80064da:	f7ff ffbc 	bl	8006456 <__sfputs_r>
 80064de:	3001      	adds	r0, #1
 80064e0:	f000 80c2 	beq.w	8006668 <_vfiprintf_r+0x1ec>
 80064e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e6:	4453      	add	r3, sl
 80064e8:	9309      	str	r3, [sp, #36]	; 0x24
 80064ea:	f898 3000 	ldrb.w	r3, [r8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80ba 	beq.w	8006668 <_vfiprintf_r+0x1ec>
 80064f4:	2300      	movs	r3, #0
 80064f6:	f04f 32ff 	mov.w	r2, #4294967295
 80064fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064fe:	9304      	str	r3, [sp, #16]
 8006500:	9307      	str	r3, [sp, #28]
 8006502:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006506:	931a      	str	r3, [sp, #104]	; 0x68
 8006508:	46a8      	mov	r8, r5
 800650a:	2205      	movs	r2, #5
 800650c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006510:	485e      	ldr	r0, [pc, #376]	; (800668c <_vfiprintf_r+0x210>)
 8006512:	f000 fafb 	bl	8006b0c <memchr>
 8006516:	9b04      	ldr	r3, [sp, #16]
 8006518:	bb78      	cbnz	r0, 800657a <_vfiprintf_r+0xfe>
 800651a:	06d9      	lsls	r1, r3, #27
 800651c:	bf44      	itt	mi
 800651e:	2220      	movmi	r2, #32
 8006520:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006524:	071a      	lsls	r2, r3, #28
 8006526:	bf44      	itt	mi
 8006528:	222b      	movmi	r2, #43	; 0x2b
 800652a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800652e:	782a      	ldrb	r2, [r5, #0]
 8006530:	2a2a      	cmp	r2, #42	; 0x2a
 8006532:	d02a      	beq.n	800658a <_vfiprintf_r+0x10e>
 8006534:	46a8      	mov	r8, r5
 8006536:	2000      	movs	r0, #0
 8006538:	250a      	movs	r5, #10
 800653a:	9a07      	ldr	r2, [sp, #28]
 800653c:	4641      	mov	r1, r8
 800653e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006542:	3b30      	subs	r3, #48	; 0x30
 8006544:	2b09      	cmp	r3, #9
 8006546:	d969      	bls.n	800661c <_vfiprintf_r+0x1a0>
 8006548:	b360      	cbz	r0, 80065a4 <_vfiprintf_r+0x128>
 800654a:	e024      	b.n	8006596 <_vfiprintf_r+0x11a>
 800654c:	4b50      	ldr	r3, [pc, #320]	; (8006690 <_vfiprintf_r+0x214>)
 800654e:	429c      	cmp	r4, r3
 8006550:	d101      	bne.n	8006556 <_vfiprintf_r+0xda>
 8006552:	68b4      	ldr	r4, [r6, #8]
 8006554:	e7a2      	b.n	800649c <_vfiprintf_r+0x20>
 8006556:	4b4f      	ldr	r3, [pc, #316]	; (8006694 <_vfiprintf_r+0x218>)
 8006558:	429c      	cmp	r4, r3
 800655a:	bf08      	it	eq
 800655c:	68f4      	ldreq	r4, [r6, #12]
 800655e:	e79d      	b.n	800649c <_vfiprintf_r+0x20>
 8006560:	4621      	mov	r1, r4
 8006562:	4630      	mov	r0, r6
 8006564:	f7ff fc70 	bl	8005e48 <__swsetup_r>
 8006568:	2800      	cmp	r0, #0
 800656a:	d09d      	beq.n	80064a8 <_vfiprintf_r+0x2c>
 800656c:	f04f 30ff 	mov.w	r0, #4294967295
 8006570:	b01d      	add	sp, #116	; 0x74
 8006572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006576:	46a8      	mov	r8, r5
 8006578:	e7a2      	b.n	80064c0 <_vfiprintf_r+0x44>
 800657a:	4a44      	ldr	r2, [pc, #272]	; (800668c <_vfiprintf_r+0x210>)
 800657c:	4645      	mov	r5, r8
 800657e:	1a80      	subs	r0, r0, r2
 8006580:	fa0b f000 	lsl.w	r0, fp, r0
 8006584:	4318      	orrs	r0, r3
 8006586:	9004      	str	r0, [sp, #16]
 8006588:	e7be      	b.n	8006508 <_vfiprintf_r+0x8c>
 800658a:	9a03      	ldr	r2, [sp, #12]
 800658c:	1d11      	adds	r1, r2, #4
 800658e:	6812      	ldr	r2, [r2, #0]
 8006590:	9103      	str	r1, [sp, #12]
 8006592:	2a00      	cmp	r2, #0
 8006594:	db01      	blt.n	800659a <_vfiprintf_r+0x11e>
 8006596:	9207      	str	r2, [sp, #28]
 8006598:	e004      	b.n	80065a4 <_vfiprintf_r+0x128>
 800659a:	4252      	negs	r2, r2
 800659c:	f043 0302 	orr.w	r3, r3, #2
 80065a0:	9207      	str	r2, [sp, #28]
 80065a2:	9304      	str	r3, [sp, #16]
 80065a4:	f898 3000 	ldrb.w	r3, [r8]
 80065a8:	2b2e      	cmp	r3, #46	; 0x2e
 80065aa:	d10e      	bne.n	80065ca <_vfiprintf_r+0x14e>
 80065ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 80065b0:	2b2a      	cmp	r3, #42	; 0x2a
 80065b2:	d138      	bne.n	8006626 <_vfiprintf_r+0x1aa>
 80065b4:	9b03      	ldr	r3, [sp, #12]
 80065b6:	f108 0802 	add.w	r8, r8, #2
 80065ba:	1d1a      	adds	r2, r3, #4
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	9203      	str	r2, [sp, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	bfb8      	it	lt
 80065c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80065c8:	9305      	str	r3, [sp, #20]
 80065ca:	4d33      	ldr	r5, [pc, #204]	; (8006698 <_vfiprintf_r+0x21c>)
 80065cc:	2203      	movs	r2, #3
 80065ce:	f898 1000 	ldrb.w	r1, [r8]
 80065d2:	4628      	mov	r0, r5
 80065d4:	f000 fa9a 	bl	8006b0c <memchr>
 80065d8:	b140      	cbz	r0, 80065ec <_vfiprintf_r+0x170>
 80065da:	2340      	movs	r3, #64	; 0x40
 80065dc:	1b40      	subs	r0, r0, r5
 80065de:	fa03 f000 	lsl.w	r0, r3, r0
 80065e2:	9b04      	ldr	r3, [sp, #16]
 80065e4:	f108 0801 	add.w	r8, r8, #1
 80065e8:	4303      	orrs	r3, r0
 80065ea:	9304      	str	r3, [sp, #16]
 80065ec:	f898 1000 	ldrb.w	r1, [r8]
 80065f0:	2206      	movs	r2, #6
 80065f2:	482a      	ldr	r0, [pc, #168]	; (800669c <_vfiprintf_r+0x220>)
 80065f4:	f108 0701 	add.w	r7, r8, #1
 80065f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065fc:	f000 fa86 	bl	8006b0c <memchr>
 8006600:	2800      	cmp	r0, #0
 8006602:	d037      	beq.n	8006674 <_vfiprintf_r+0x1f8>
 8006604:	4b26      	ldr	r3, [pc, #152]	; (80066a0 <_vfiprintf_r+0x224>)
 8006606:	bb1b      	cbnz	r3, 8006650 <_vfiprintf_r+0x1d4>
 8006608:	9b03      	ldr	r3, [sp, #12]
 800660a:	3307      	adds	r3, #7
 800660c:	f023 0307 	bic.w	r3, r3, #7
 8006610:	3308      	adds	r3, #8
 8006612:	9303      	str	r3, [sp, #12]
 8006614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006616:	444b      	add	r3, r9
 8006618:	9309      	str	r3, [sp, #36]	; 0x24
 800661a:	e750      	b.n	80064be <_vfiprintf_r+0x42>
 800661c:	fb05 3202 	mla	r2, r5, r2, r3
 8006620:	2001      	movs	r0, #1
 8006622:	4688      	mov	r8, r1
 8006624:	e78a      	b.n	800653c <_vfiprintf_r+0xc0>
 8006626:	2300      	movs	r3, #0
 8006628:	250a      	movs	r5, #10
 800662a:	4619      	mov	r1, r3
 800662c:	f108 0801 	add.w	r8, r8, #1
 8006630:	9305      	str	r3, [sp, #20]
 8006632:	4640      	mov	r0, r8
 8006634:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006638:	3a30      	subs	r2, #48	; 0x30
 800663a:	2a09      	cmp	r2, #9
 800663c:	d903      	bls.n	8006646 <_vfiprintf_r+0x1ca>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0c3      	beq.n	80065ca <_vfiprintf_r+0x14e>
 8006642:	9105      	str	r1, [sp, #20]
 8006644:	e7c1      	b.n	80065ca <_vfiprintf_r+0x14e>
 8006646:	fb05 2101 	mla	r1, r5, r1, r2
 800664a:	2301      	movs	r3, #1
 800664c:	4680      	mov	r8, r0
 800664e:	e7f0      	b.n	8006632 <_vfiprintf_r+0x1b6>
 8006650:	ab03      	add	r3, sp, #12
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	4622      	mov	r2, r4
 8006656:	4b13      	ldr	r3, [pc, #76]	; (80066a4 <_vfiprintf_r+0x228>)
 8006658:	a904      	add	r1, sp, #16
 800665a:	4630      	mov	r0, r6
 800665c:	f3af 8000 	nop.w
 8006660:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006664:	4681      	mov	r9, r0
 8006666:	d1d5      	bne.n	8006614 <_vfiprintf_r+0x198>
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	065b      	lsls	r3, r3, #25
 800666c:	f53f af7e 	bmi.w	800656c <_vfiprintf_r+0xf0>
 8006670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006672:	e77d      	b.n	8006570 <_vfiprintf_r+0xf4>
 8006674:	ab03      	add	r3, sp, #12
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	4622      	mov	r2, r4
 800667a:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <_vfiprintf_r+0x228>)
 800667c:	a904      	add	r1, sp, #16
 800667e:	4630      	mov	r0, r6
 8006680:	f000 f888 	bl	8006794 <_printf_i>
 8006684:	e7ec      	b.n	8006660 <_vfiprintf_r+0x1e4>
 8006686:	bf00      	nop
 8006688:	08006e0c 	.word	0x08006e0c
 800668c:	08006e4c 	.word	0x08006e4c
 8006690:	08006e2c 	.word	0x08006e2c
 8006694:	08006dec 	.word	0x08006dec
 8006698:	08006e52 	.word	0x08006e52
 800669c:	08006e56 	.word	0x08006e56
 80066a0:	00000000 	.word	0x00000000
 80066a4:	08006457 	.word	0x08006457

080066a8 <_printf_common>:
 80066a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ac:	4691      	mov	r9, r2
 80066ae:	461f      	mov	r7, r3
 80066b0:	688a      	ldr	r2, [r1, #8]
 80066b2:	690b      	ldr	r3, [r1, #16]
 80066b4:	4606      	mov	r6, r0
 80066b6:	4293      	cmp	r3, r2
 80066b8:	bfb8      	it	lt
 80066ba:	4613      	movlt	r3, r2
 80066bc:	f8c9 3000 	str.w	r3, [r9]
 80066c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066c4:	460c      	mov	r4, r1
 80066c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066ca:	b112      	cbz	r2, 80066d2 <_printf_common+0x2a>
 80066cc:	3301      	adds	r3, #1
 80066ce:	f8c9 3000 	str.w	r3, [r9]
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	0699      	lsls	r1, r3, #26
 80066d6:	bf42      	ittt	mi
 80066d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80066dc:	3302      	addmi	r3, #2
 80066de:	f8c9 3000 	strmi.w	r3, [r9]
 80066e2:	6825      	ldr	r5, [r4, #0]
 80066e4:	f015 0506 	ands.w	r5, r5, #6
 80066e8:	d107      	bne.n	80066fa <_printf_common+0x52>
 80066ea:	f104 0a19 	add.w	sl, r4, #25
 80066ee:	68e3      	ldr	r3, [r4, #12]
 80066f0:	f8d9 2000 	ldr.w	r2, [r9]
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	42ab      	cmp	r3, r5
 80066f8:	dc29      	bgt.n	800674e <_printf_common+0xa6>
 80066fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066fe:	6822      	ldr	r2, [r4, #0]
 8006700:	3300      	adds	r3, #0
 8006702:	bf18      	it	ne
 8006704:	2301      	movne	r3, #1
 8006706:	0692      	lsls	r2, r2, #26
 8006708:	d42e      	bmi.n	8006768 <_printf_common+0xc0>
 800670a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800670e:	4639      	mov	r1, r7
 8006710:	4630      	mov	r0, r6
 8006712:	47c0      	blx	r8
 8006714:	3001      	adds	r0, #1
 8006716:	d021      	beq.n	800675c <_printf_common+0xb4>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	68e5      	ldr	r5, [r4, #12]
 800671c:	f003 0306 	and.w	r3, r3, #6
 8006720:	2b04      	cmp	r3, #4
 8006722:	bf18      	it	ne
 8006724:	2500      	movne	r5, #0
 8006726:	f8d9 2000 	ldr.w	r2, [r9]
 800672a:	f04f 0900 	mov.w	r9, #0
 800672e:	bf08      	it	eq
 8006730:	1aad      	subeq	r5, r5, r2
 8006732:	68a3      	ldr	r3, [r4, #8]
 8006734:	6922      	ldr	r2, [r4, #16]
 8006736:	bf08      	it	eq
 8006738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800673c:	4293      	cmp	r3, r2
 800673e:	bfc4      	itt	gt
 8006740:	1a9b      	subgt	r3, r3, r2
 8006742:	18ed      	addgt	r5, r5, r3
 8006744:	341a      	adds	r4, #26
 8006746:	454d      	cmp	r5, r9
 8006748:	d11a      	bne.n	8006780 <_printf_common+0xd8>
 800674a:	2000      	movs	r0, #0
 800674c:	e008      	b.n	8006760 <_printf_common+0xb8>
 800674e:	2301      	movs	r3, #1
 8006750:	4652      	mov	r2, sl
 8006752:	4639      	mov	r1, r7
 8006754:	4630      	mov	r0, r6
 8006756:	47c0      	blx	r8
 8006758:	3001      	adds	r0, #1
 800675a:	d103      	bne.n	8006764 <_printf_common+0xbc>
 800675c:	f04f 30ff 	mov.w	r0, #4294967295
 8006760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006764:	3501      	adds	r5, #1
 8006766:	e7c2      	b.n	80066ee <_printf_common+0x46>
 8006768:	2030      	movs	r0, #48	; 0x30
 800676a:	18e1      	adds	r1, r4, r3
 800676c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006776:	4422      	add	r2, r4
 8006778:	3302      	adds	r3, #2
 800677a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800677e:	e7c4      	b.n	800670a <_printf_common+0x62>
 8006780:	2301      	movs	r3, #1
 8006782:	4622      	mov	r2, r4
 8006784:	4639      	mov	r1, r7
 8006786:	4630      	mov	r0, r6
 8006788:	47c0      	blx	r8
 800678a:	3001      	adds	r0, #1
 800678c:	d0e6      	beq.n	800675c <_printf_common+0xb4>
 800678e:	f109 0901 	add.w	r9, r9, #1
 8006792:	e7d8      	b.n	8006746 <_printf_common+0x9e>

08006794 <_printf_i>:
 8006794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006798:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800679c:	460c      	mov	r4, r1
 800679e:	7e09      	ldrb	r1, [r1, #24]
 80067a0:	b085      	sub	sp, #20
 80067a2:	296e      	cmp	r1, #110	; 0x6e
 80067a4:	4617      	mov	r7, r2
 80067a6:	4606      	mov	r6, r0
 80067a8:	4698      	mov	r8, r3
 80067aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067ac:	f000 80b3 	beq.w	8006916 <_printf_i+0x182>
 80067b0:	d822      	bhi.n	80067f8 <_printf_i+0x64>
 80067b2:	2963      	cmp	r1, #99	; 0x63
 80067b4:	d036      	beq.n	8006824 <_printf_i+0x90>
 80067b6:	d80a      	bhi.n	80067ce <_printf_i+0x3a>
 80067b8:	2900      	cmp	r1, #0
 80067ba:	f000 80b9 	beq.w	8006930 <_printf_i+0x19c>
 80067be:	2958      	cmp	r1, #88	; 0x58
 80067c0:	f000 8083 	beq.w	80068ca <_printf_i+0x136>
 80067c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067cc:	e032      	b.n	8006834 <_printf_i+0xa0>
 80067ce:	2964      	cmp	r1, #100	; 0x64
 80067d0:	d001      	beq.n	80067d6 <_printf_i+0x42>
 80067d2:	2969      	cmp	r1, #105	; 0x69
 80067d4:	d1f6      	bne.n	80067c4 <_printf_i+0x30>
 80067d6:	6820      	ldr	r0, [r4, #0]
 80067d8:	6813      	ldr	r3, [r2, #0]
 80067da:	0605      	lsls	r5, r0, #24
 80067dc:	f103 0104 	add.w	r1, r3, #4
 80067e0:	d52a      	bpl.n	8006838 <_printf_i+0xa4>
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6011      	str	r1, [r2, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	da03      	bge.n	80067f2 <_printf_i+0x5e>
 80067ea:	222d      	movs	r2, #45	; 0x2d
 80067ec:	425b      	negs	r3, r3
 80067ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80067f2:	486f      	ldr	r0, [pc, #444]	; (80069b0 <_printf_i+0x21c>)
 80067f4:	220a      	movs	r2, #10
 80067f6:	e039      	b.n	800686c <_printf_i+0xd8>
 80067f8:	2973      	cmp	r1, #115	; 0x73
 80067fa:	f000 809d 	beq.w	8006938 <_printf_i+0x1a4>
 80067fe:	d808      	bhi.n	8006812 <_printf_i+0x7e>
 8006800:	296f      	cmp	r1, #111	; 0x6f
 8006802:	d020      	beq.n	8006846 <_printf_i+0xb2>
 8006804:	2970      	cmp	r1, #112	; 0x70
 8006806:	d1dd      	bne.n	80067c4 <_printf_i+0x30>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	f043 0320 	orr.w	r3, r3, #32
 800680e:	6023      	str	r3, [r4, #0]
 8006810:	e003      	b.n	800681a <_printf_i+0x86>
 8006812:	2975      	cmp	r1, #117	; 0x75
 8006814:	d017      	beq.n	8006846 <_printf_i+0xb2>
 8006816:	2978      	cmp	r1, #120	; 0x78
 8006818:	d1d4      	bne.n	80067c4 <_printf_i+0x30>
 800681a:	2378      	movs	r3, #120	; 0x78
 800681c:	4865      	ldr	r0, [pc, #404]	; (80069b4 <_printf_i+0x220>)
 800681e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006822:	e055      	b.n	80068d0 <_printf_i+0x13c>
 8006824:	6813      	ldr	r3, [r2, #0]
 8006826:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800682a:	1d19      	adds	r1, r3, #4
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6011      	str	r1, [r2, #0]
 8006830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006834:	2301      	movs	r3, #1
 8006836:	e08c      	b.n	8006952 <_printf_i+0x1be>
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800683e:	6011      	str	r1, [r2, #0]
 8006840:	bf18      	it	ne
 8006842:	b21b      	sxthne	r3, r3
 8006844:	e7cf      	b.n	80067e6 <_printf_i+0x52>
 8006846:	6813      	ldr	r3, [r2, #0]
 8006848:	6825      	ldr	r5, [r4, #0]
 800684a:	1d18      	adds	r0, r3, #4
 800684c:	6010      	str	r0, [r2, #0]
 800684e:	0628      	lsls	r0, r5, #24
 8006850:	d501      	bpl.n	8006856 <_printf_i+0xc2>
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	e002      	b.n	800685c <_printf_i+0xc8>
 8006856:	0668      	lsls	r0, r5, #25
 8006858:	d5fb      	bpl.n	8006852 <_printf_i+0xbe>
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	296f      	cmp	r1, #111	; 0x6f
 800685e:	bf14      	ite	ne
 8006860:	220a      	movne	r2, #10
 8006862:	2208      	moveq	r2, #8
 8006864:	4852      	ldr	r0, [pc, #328]	; (80069b0 <_printf_i+0x21c>)
 8006866:	2100      	movs	r1, #0
 8006868:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800686c:	6865      	ldr	r5, [r4, #4]
 800686e:	2d00      	cmp	r5, #0
 8006870:	60a5      	str	r5, [r4, #8]
 8006872:	f2c0 8095 	blt.w	80069a0 <_printf_i+0x20c>
 8006876:	6821      	ldr	r1, [r4, #0]
 8006878:	f021 0104 	bic.w	r1, r1, #4
 800687c:	6021      	str	r1, [r4, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d13d      	bne.n	80068fe <_printf_i+0x16a>
 8006882:	2d00      	cmp	r5, #0
 8006884:	f040 808e 	bne.w	80069a4 <_printf_i+0x210>
 8006888:	4665      	mov	r5, ip
 800688a:	2a08      	cmp	r2, #8
 800688c:	d10b      	bne.n	80068a6 <_printf_i+0x112>
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	07db      	lsls	r3, r3, #31
 8006892:	d508      	bpl.n	80068a6 <_printf_i+0x112>
 8006894:	6923      	ldr	r3, [r4, #16]
 8006896:	6862      	ldr	r2, [r4, #4]
 8006898:	429a      	cmp	r2, r3
 800689a:	bfde      	ittt	le
 800689c:	2330      	movle	r3, #48	; 0x30
 800689e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068a6:	ebac 0305 	sub.w	r3, ip, r5
 80068aa:	6123      	str	r3, [r4, #16]
 80068ac:	f8cd 8000 	str.w	r8, [sp]
 80068b0:	463b      	mov	r3, r7
 80068b2:	aa03      	add	r2, sp, #12
 80068b4:	4621      	mov	r1, r4
 80068b6:	4630      	mov	r0, r6
 80068b8:	f7ff fef6 	bl	80066a8 <_printf_common>
 80068bc:	3001      	adds	r0, #1
 80068be:	d14d      	bne.n	800695c <_printf_i+0x1c8>
 80068c0:	f04f 30ff 	mov.w	r0, #4294967295
 80068c4:	b005      	add	sp, #20
 80068c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068ca:	4839      	ldr	r0, [pc, #228]	; (80069b0 <_printf_i+0x21c>)
 80068cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068d0:	6813      	ldr	r3, [r2, #0]
 80068d2:	6821      	ldr	r1, [r4, #0]
 80068d4:	1d1d      	adds	r5, r3, #4
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6015      	str	r5, [r2, #0]
 80068da:	060a      	lsls	r2, r1, #24
 80068dc:	d50b      	bpl.n	80068f6 <_printf_i+0x162>
 80068de:	07ca      	lsls	r2, r1, #31
 80068e0:	bf44      	itt	mi
 80068e2:	f041 0120 	orrmi.w	r1, r1, #32
 80068e6:	6021      	strmi	r1, [r4, #0]
 80068e8:	b91b      	cbnz	r3, 80068f2 <_printf_i+0x15e>
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	f022 0220 	bic.w	r2, r2, #32
 80068f0:	6022      	str	r2, [r4, #0]
 80068f2:	2210      	movs	r2, #16
 80068f4:	e7b7      	b.n	8006866 <_printf_i+0xd2>
 80068f6:	064d      	lsls	r5, r1, #25
 80068f8:	bf48      	it	mi
 80068fa:	b29b      	uxthmi	r3, r3
 80068fc:	e7ef      	b.n	80068de <_printf_i+0x14a>
 80068fe:	4665      	mov	r5, ip
 8006900:	fbb3 f1f2 	udiv	r1, r3, r2
 8006904:	fb02 3311 	mls	r3, r2, r1, r3
 8006908:	5cc3      	ldrb	r3, [r0, r3]
 800690a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800690e:	460b      	mov	r3, r1
 8006910:	2900      	cmp	r1, #0
 8006912:	d1f5      	bne.n	8006900 <_printf_i+0x16c>
 8006914:	e7b9      	b.n	800688a <_printf_i+0xf6>
 8006916:	6813      	ldr	r3, [r2, #0]
 8006918:	6825      	ldr	r5, [r4, #0]
 800691a:	1d18      	adds	r0, r3, #4
 800691c:	6961      	ldr	r1, [r4, #20]
 800691e:	6010      	str	r0, [r2, #0]
 8006920:	0628      	lsls	r0, r5, #24
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	d501      	bpl.n	800692a <_printf_i+0x196>
 8006926:	6019      	str	r1, [r3, #0]
 8006928:	e002      	b.n	8006930 <_printf_i+0x19c>
 800692a:	066a      	lsls	r2, r5, #25
 800692c:	d5fb      	bpl.n	8006926 <_printf_i+0x192>
 800692e:	8019      	strh	r1, [r3, #0]
 8006930:	2300      	movs	r3, #0
 8006932:	4665      	mov	r5, ip
 8006934:	6123      	str	r3, [r4, #16]
 8006936:	e7b9      	b.n	80068ac <_printf_i+0x118>
 8006938:	6813      	ldr	r3, [r2, #0]
 800693a:	1d19      	adds	r1, r3, #4
 800693c:	6011      	str	r1, [r2, #0]
 800693e:	681d      	ldr	r5, [r3, #0]
 8006940:	6862      	ldr	r2, [r4, #4]
 8006942:	2100      	movs	r1, #0
 8006944:	4628      	mov	r0, r5
 8006946:	f000 f8e1 	bl	8006b0c <memchr>
 800694a:	b108      	cbz	r0, 8006950 <_printf_i+0x1bc>
 800694c:	1b40      	subs	r0, r0, r5
 800694e:	6060      	str	r0, [r4, #4]
 8006950:	6863      	ldr	r3, [r4, #4]
 8006952:	6123      	str	r3, [r4, #16]
 8006954:	2300      	movs	r3, #0
 8006956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800695a:	e7a7      	b.n	80068ac <_printf_i+0x118>
 800695c:	6923      	ldr	r3, [r4, #16]
 800695e:	462a      	mov	r2, r5
 8006960:	4639      	mov	r1, r7
 8006962:	4630      	mov	r0, r6
 8006964:	47c0      	blx	r8
 8006966:	3001      	adds	r0, #1
 8006968:	d0aa      	beq.n	80068c0 <_printf_i+0x12c>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	079b      	lsls	r3, r3, #30
 800696e:	d413      	bmi.n	8006998 <_printf_i+0x204>
 8006970:	68e0      	ldr	r0, [r4, #12]
 8006972:	9b03      	ldr	r3, [sp, #12]
 8006974:	4298      	cmp	r0, r3
 8006976:	bfb8      	it	lt
 8006978:	4618      	movlt	r0, r3
 800697a:	e7a3      	b.n	80068c4 <_printf_i+0x130>
 800697c:	2301      	movs	r3, #1
 800697e:	464a      	mov	r2, r9
 8006980:	4639      	mov	r1, r7
 8006982:	4630      	mov	r0, r6
 8006984:	47c0      	blx	r8
 8006986:	3001      	adds	r0, #1
 8006988:	d09a      	beq.n	80068c0 <_printf_i+0x12c>
 800698a:	3501      	adds	r5, #1
 800698c:	68e3      	ldr	r3, [r4, #12]
 800698e:	9a03      	ldr	r2, [sp, #12]
 8006990:	1a9b      	subs	r3, r3, r2
 8006992:	42ab      	cmp	r3, r5
 8006994:	dcf2      	bgt.n	800697c <_printf_i+0x1e8>
 8006996:	e7eb      	b.n	8006970 <_printf_i+0x1dc>
 8006998:	2500      	movs	r5, #0
 800699a:	f104 0919 	add.w	r9, r4, #25
 800699e:	e7f5      	b.n	800698c <_printf_i+0x1f8>
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1ac      	bne.n	80068fe <_printf_i+0x16a>
 80069a4:	7803      	ldrb	r3, [r0, #0]
 80069a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069ae:	e76c      	b.n	800688a <_printf_i+0xf6>
 80069b0:	08006e5d 	.word	0x08006e5d
 80069b4:	08006e6e 	.word	0x08006e6e

080069b8 <_sbrk_r>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	2300      	movs	r3, #0
 80069bc:	4c05      	ldr	r4, [pc, #20]	; (80069d4 <_sbrk_r+0x1c>)
 80069be:	4605      	mov	r5, r0
 80069c0:	4608      	mov	r0, r1
 80069c2:	6023      	str	r3, [r4, #0]
 80069c4:	f7fb fb8c 	bl	80020e0 <_sbrk>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d102      	bne.n	80069d2 <_sbrk_r+0x1a>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	b103      	cbz	r3, 80069d2 <_sbrk_r+0x1a>
 80069d0:	602b      	str	r3, [r5, #0]
 80069d2:	bd38      	pop	{r3, r4, r5, pc}
 80069d4:	20000b34 	.word	0x20000b34

080069d8 <__sread>:
 80069d8:	b510      	push	{r4, lr}
 80069da:	460c      	mov	r4, r1
 80069dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069e0:	f000 f8a4 	bl	8006b2c <_read_r>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	bfab      	itete	ge
 80069e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069ea:	89a3      	ldrhlt	r3, [r4, #12]
 80069ec:	181b      	addge	r3, r3, r0
 80069ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069f2:	bfac      	ite	ge
 80069f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80069f6:	81a3      	strhlt	r3, [r4, #12]
 80069f8:	bd10      	pop	{r4, pc}

080069fa <__swrite>:
 80069fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069fe:	461f      	mov	r7, r3
 8006a00:	898b      	ldrh	r3, [r1, #12]
 8006a02:	4605      	mov	r5, r0
 8006a04:	05db      	lsls	r3, r3, #23
 8006a06:	460c      	mov	r4, r1
 8006a08:	4616      	mov	r6, r2
 8006a0a:	d505      	bpl.n	8006a18 <__swrite+0x1e>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a14:	f000 f868 	bl	8006ae8 <_lseek_r>
 8006a18:	89a3      	ldrh	r3, [r4, #12]
 8006a1a:	4632      	mov	r2, r6
 8006a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a20:	81a3      	strh	r3, [r4, #12]
 8006a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a26:	463b      	mov	r3, r7
 8006a28:	4628      	mov	r0, r5
 8006a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2e:	f000 b817 	b.w	8006a60 <_write_r>

08006a32 <__sseek>:
 8006a32:	b510      	push	{r4, lr}
 8006a34:	460c      	mov	r4, r1
 8006a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a3a:	f000 f855 	bl	8006ae8 <_lseek_r>
 8006a3e:	1c43      	adds	r3, r0, #1
 8006a40:	89a3      	ldrh	r3, [r4, #12]
 8006a42:	bf15      	itete	ne
 8006a44:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a4e:	81a3      	strheq	r3, [r4, #12]
 8006a50:	bf18      	it	ne
 8006a52:	81a3      	strhne	r3, [r4, #12]
 8006a54:	bd10      	pop	{r4, pc}

08006a56 <__sclose>:
 8006a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a5a:	f000 b813 	b.w	8006a84 <_close_r>
	...

08006a60 <_write_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4605      	mov	r5, r0
 8006a64:	4608      	mov	r0, r1
 8006a66:	4611      	mov	r1, r2
 8006a68:	2200      	movs	r2, #0
 8006a6a:	4c05      	ldr	r4, [pc, #20]	; (8006a80 <_write_r+0x20>)
 8006a6c:	6022      	str	r2, [r4, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f7fb fae9 	bl	8002046 <_write>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	d102      	bne.n	8006a7e <_write_r+0x1e>
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	b103      	cbz	r3, 8006a7e <_write_r+0x1e>
 8006a7c:	602b      	str	r3, [r5, #0]
 8006a7e:	bd38      	pop	{r3, r4, r5, pc}
 8006a80:	20000b34 	.word	0x20000b34

08006a84 <_close_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	2300      	movs	r3, #0
 8006a88:	4c05      	ldr	r4, [pc, #20]	; (8006aa0 <_close_r+0x1c>)
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	4608      	mov	r0, r1
 8006a8e:	6023      	str	r3, [r4, #0]
 8006a90:	f7fb faf5 	bl	800207e <_close>
 8006a94:	1c43      	adds	r3, r0, #1
 8006a96:	d102      	bne.n	8006a9e <_close_r+0x1a>
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	b103      	cbz	r3, 8006a9e <_close_r+0x1a>
 8006a9c:	602b      	str	r3, [r5, #0]
 8006a9e:	bd38      	pop	{r3, r4, r5, pc}
 8006aa0:	20000b34 	.word	0x20000b34

08006aa4 <_fstat_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	4c06      	ldr	r4, [pc, #24]	; (8006ac4 <_fstat_r+0x20>)
 8006aaa:	4605      	mov	r5, r0
 8006aac:	4608      	mov	r0, r1
 8006aae:	4611      	mov	r1, r2
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	f7fb faef 	bl	8002094 <_fstat>
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	d102      	bne.n	8006ac0 <_fstat_r+0x1c>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	b103      	cbz	r3, 8006ac0 <_fstat_r+0x1c>
 8006abe:	602b      	str	r3, [r5, #0]
 8006ac0:	bd38      	pop	{r3, r4, r5, pc}
 8006ac2:	bf00      	nop
 8006ac4:	20000b34 	.word	0x20000b34

08006ac8 <_isatty_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	2300      	movs	r3, #0
 8006acc:	4c05      	ldr	r4, [pc, #20]	; (8006ae4 <_isatty_r+0x1c>)
 8006ace:	4605      	mov	r5, r0
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	6023      	str	r3, [r4, #0]
 8006ad4:	f7fb faed 	bl	80020b2 <_isatty>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d102      	bne.n	8006ae2 <_isatty_r+0x1a>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	b103      	cbz	r3, 8006ae2 <_isatty_r+0x1a>
 8006ae0:	602b      	str	r3, [r5, #0]
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	20000b34 	.word	0x20000b34

08006ae8 <_lseek_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	4605      	mov	r5, r0
 8006aec:	4608      	mov	r0, r1
 8006aee:	4611      	mov	r1, r2
 8006af0:	2200      	movs	r2, #0
 8006af2:	4c05      	ldr	r4, [pc, #20]	; (8006b08 <_lseek_r+0x20>)
 8006af4:	6022      	str	r2, [r4, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	f7fb fae5 	bl	80020c6 <_lseek>
 8006afc:	1c43      	adds	r3, r0, #1
 8006afe:	d102      	bne.n	8006b06 <_lseek_r+0x1e>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	b103      	cbz	r3, 8006b06 <_lseek_r+0x1e>
 8006b04:	602b      	str	r3, [r5, #0]
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	20000b34 	.word	0x20000b34

08006b0c <memchr>:
 8006b0c:	b510      	push	{r4, lr}
 8006b0e:	b2c9      	uxtb	r1, r1
 8006b10:	4402      	add	r2, r0
 8006b12:	4290      	cmp	r0, r2
 8006b14:	4603      	mov	r3, r0
 8006b16:	d101      	bne.n	8006b1c <memchr+0x10>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	e003      	b.n	8006b24 <memchr+0x18>
 8006b1c:	781c      	ldrb	r4, [r3, #0]
 8006b1e:	3001      	adds	r0, #1
 8006b20:	428c      	cmp	r4, r1
 8006b22:	d1f6      	bne.n	8006b12 <memchr+0x6>
 8006b24:	4618      	mov	r0, r3
 8006b26:	bd10      	pop	{r4, pc}

08006b28 <__malloc_lock>:
 8006b28:	4770      	bx	lr

08006b2a <__malloc_unlock>:
 8006b2a:	4770      	bx	lr

08006b2c <_read_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	4605      	mov	r5, r0
 8006b30:	4608      	mov	r0, r1
 8006b32:	4611      	mov	r1, r2
 8006b34:	2200      	movs	r2, #0
 8006b36:	4c05      	ldr	r4, [pc, #20]	; (8006b4c <_read_r+0x20>)
 8006b38:	6022      	str	r2, [r4, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f7fb fa66 	bl	800200c <_read>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d102      	bne.n	8006b4a <_read_r+0x1e>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	b103      	cbz	r3, 8006b4a <_read_r+0x1e>
 8006b48:	602b      	str	r3, [r5, #0]
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	20000b34 	.word	0x20000b34

08006b50 <_init>:
 8006b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b52:	bf00      	nop
 8006b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b56:	bc08      	pop	{r3}
 8006b58:	469e      	mov	lr, r3
 8006b5a:	4770      	bx	lr

08006b5c <_fini>:
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	bf00      	nop
 8006b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b62:	bc08      	pop	{r3}
 8006b64:	469e      	mov	lr, r3
 8006b66:	4770      	bx	lr
